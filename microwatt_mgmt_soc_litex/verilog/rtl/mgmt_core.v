// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : mgmt_core.v
// Device     : 
// LiteX sha1 : e5fa4cbaf
// Date       : 2025-10-24 15:25:34
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module mgmt_core (
    input  wire          clk_in,
    output wire          clk_out,
    input  wire          core_clk,
    input  wire          core_rstn,
    input  wire          debug_in,
    output wire          debug_mode,
    output wire          debug_oeb,
    output wire          debug_out,
    output reg           flash_clk,
    output wire          flash_cs_n,
    input  wire          flash_io0_di,
    output reg           flash_io0_do,
    output reg           flash_io0_oeb,
    input  wire          flash_io1_di,
    output wire          flash_io1_do,
    output wire          flash_io1_oeb,
    input  wire          flash_io2_di,
    output wire          flash_io2_do,
    output wire          flash_io2_oeb,
    input  wire          flash_io3_di,
    output wire          flash_io3_do,
    output wire          flash_io3_oeb,
    input  wire          gpio_in_pad,
    output wire          gpio_inenb_pad,
    output wire          gpio_mode0_pad,
    output wire          gpio_mode1_pad,
    output wire          gpio_out_pad,
    output wire          gpio_outenb_pad,
    input  wire          hk_ack_i,
    output wire          hk_cyc_o,
    input  wire   [31:0] hk_dat_i,
    output wire          hk_stb_o,
    output reg   [127:0] la_iena,
    input  wire  [127:0] la_input,
    output reg   [127:0] la_oenb,
    output reg   [127:0] la_output,
    input  wire          mprj_ack_i,
    output reg    [31:0] mprj_adr_o,
    output wire          mprj_cyc_o,
    input  wire   [31:0] mprj_dat_i,
    output wire   [31:0] mprj_dat_o,
    output wire    [3:0] mprj_sel_o,
    output wire          mprj_stb_o,
    output wire          mprj_wb_iena,
    output wire          mprj_we_o,
    input  wire          por_l_in,
    output wire          por_l_out,
    input  wire          porb_h_in,
    output wire          porb_h_out,
    output wire          qspi_enabled,
    input  wire          resetn_in,
    output wire          resetn_out,
    input  wire          rstb_l_in,
    output wire          rstb_l_out,
    input  wire          serial_clock_in,
    output wire          serial_clock_out,
    input  wire          serial_data_2_in,
    output wire          serial_data_2_out,
    input  wire          serial_load_in,
    output wire          serial_load_out,
    input  wire          serial_resetn_in,
    output wire          serial_resetn_out,
    input  wire          serial_rx,
    output reg           serial_tx,
    output reg           spi_clk,
    output reg           spi_cs_n,
    output wire          spi_enabled,
    input  wire          spi_miso,
    output reg           spi_mosi,
    output wire          spi_sdoenb,
    output wire          trap,
    output wire          uart_enabled,
    input  wire    [5:0] user_irq,
    output wire    [2:0] user_irq_ena
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
MGMTSoC
└─── crg (CRG)
└─── bus (SoCBusHandler)
│    └─── converter_0* (Converter)
│    │    └─── downconverter_0* (DownConverter)
│    └─── converter_1* (Converter)
│    │    └─── downconverter_0* (DownConverter)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (Microwatt)
│    └─── cpu_vhd2v_converter (VHD2VConverter)
│    └─── xics (XICSSlave)
│    │    └─── icp_vhd2v_converter (VHD2VConverter)
│    │    └─── ics_vhd2v_converter (VHD2VConverter)
│    │    └─── [xics_icp_wrapper]
│    │    └─── [xics_ics_wrapper]
│    └─── [microwatt_wrapper]
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── mem (DFFRAM)
│    └─── [RAM256]
└─── mem2 (DFFRAM_512)
│    └─── [RAM128]
└─── flash_phy (LiteSPIPHY)
│    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    └─── resyncreg_0* (ResyncReg)
│    │    └─── clkgen (LiteSPIClkGen)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── fsm (FSM)
└─── flash_core (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── burst_timeout (WaitTimer)
│    │    └─── fsm (FSM)
│    └─── master (LiteSPIMaster)
│    │    └─── tx_fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    └─── rx_fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
└─── spi_master (SPIMaster)
│    └─── fsm (FSM)
└─── mprj_wb_iena (GPIOOut)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourcelevel_0* (EventSourceLevel)
│    │    └─── eventsourcelevel_1* (EventSourceLevel)
│    └─── phy (RS232PHY)
│    │    └─── tx (RS232PHYTX)
│    │    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (RS232PHYRX)
│    │    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    │    └─── fsm (FSM)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── dbg_uart (UARTWishboneBridge)
│    └─── phy (RS232PHY)
│    │    └─── tx (RS232PHYTX)
│    │    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (RS232PHYRX)
│    │    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    │    └─── fsm (FSM)
│    └─── fsm (FSM)
│    └─── timer (WaitTimer)
└─── debug_oeb (GPIOOut)
└─── debug_mode (GPIOOut)
└─── uart_enabled (GPIOOut)
└─── gpio (GPIOASIC)
└─── la (LogicAnalyzer)
└─── spi_enabled (GPIOOut)
└─── user_irq_ena (GPIOOut)
└─── user_irq_0 (GPIOIn)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── user_irq_1 (GPIOIn)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── user_irq_2 (GPIOIn)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── user_irq_3 (GPIOIn)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── user_irq_4 (GPIOIn)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── user_irq_5 (GPIOIn)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_7* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_8* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_9* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_10* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_11* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_12* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_13* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_14* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_15* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_16* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_17* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_18* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_19* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [13:0] adr;
reg    [29:0] comb_array_muxed0 = 30'd0;
reg    [31:0] comb_array_muxed1 = 32'd0;
reg     [3:0] comb_array_muxed2 = 4'd0;
reg           comb_array_muxed3 = 1'd0;
reg           comb_array_muxed4 = 1'd0;
reg           comb_array_muxed5 = 1'd0;
reg     [2:0] comb_array_muxed6 = 3'd0;
reg     [1:0] comb_array_muxed7 = 2'd0;
wire          core_rst;
reg    [19:0] count = 20'd1000000;
wire   [31:0] csrbank0_bus_errors_r;
reg           csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csrbank0_bus_errors_w;
reg           csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csrbank0_reset0_r;
reg           csrbank0_reset0_re = 1'd0;
wire    [1:0] csrbank0_reset0_w;
reg           csrbank0_reset0_we = 1'd0;
wire   [31:0] csrbank0_scratch0_r;
reg           csrbank0_scratch0_re = 1'd0;
wire   [31:0] csrbank0_scratch0_w;
reg           csrbank0_scratch0_we = 1'd0;
wire          csrbank0_sel;
wire          csrbank10_en0_r;
reg           csrbank10_en0_re = 1'd0;
wire          csrbank10_en0_w;
reg           csrbank10_en0_we = 1'd0;
wire          csrbank10_ev_enable0_r;
reg           csrbank10_ev_enable0_re = 1'd0;
wire          csrbank10_ev_enable0_w;
reg           csrbank10_ev_enable0_we = 1'd0;
wire          csrbank10_ev_pending_r;
reg           csrbank10_ev_pending_re = 1'd0;
wire          csrbank10_ev_pending_w;
reg           csrbank10_ev_pending_we = 1'd0;
wire          csrbank10_ev_status_r;
reg           csrbank10_ev_status_re = 1'd0;
wire          csrbank10_ev_status_w;
reg           csrbank10_ev_status_we = 1'd0;
wire   [31:0] csrbank10_load0_r;
reg           csrbank10_load0_re = 1'd0;
wire   [31:0] csrbank10_load0_w;
reg           csrbank10_load0_we = 1'd0;
wire   [31:0] csrbank10_reload0_r;
reg           csrbank10_reload0_re = 1'd0;
wire   [31:0] csrbank10_reload0_w;
reg           csrbank10_reload0_we = 1'd0;
wire          csrbank10_sel;
wire          csrbank10_update_value0_r;
reg           csrbank10_update_value0_re = 1'd0;
wire          csrbank10_update_value0_w;
reg           csrbank10_update_value0_we = 1'd0;
wire   [31:0] csrbank10_value_r;
reg           csrbank10_value_re = 1'd0;
wire   [31:0] csrbank10_value_w;
reg           csrbank10_value_we = 1'd0;
wire    [1:0] csrbank11_ev_enable0_r;
reg           csrbank11_ev_enable0_re = 1'd0;
wire    [1:0] csrbank11_ev_enable0_w;
reg           csrbank11_ev_enable0_we = 1'd0;
wire    [1:0] csrbank11_ev_pending_r;
reg           csrbank11_ev_pending_re = 1'd0;
wire    [1:0] csrbank11_ev_pending_w;
reg           csrbank11_ev_pending_we = 1'd0;
wire    [1:0] csrbank11_ev_status_r;
reg           csrbank11_ev_status_re = 1'd0;
wire    [1:0] csrbank11_ev_status_w;
reg           csrbank11_ev_status_we = 1'd0;
wire          csrbank11_rxempty_r;
reg           csrbank11_rxempty_re = 1'd0;
wire          csrbank11_rxempty_w;
reg           csrbank11_rxempty_we = 1'd0;
wire          csrbank11_rxfull_r;
reg           csrbank11_rxfull_re = 1'd0;
wire          csrbank11_rxfull_w;
reg           csrbank11_rxfull_we = 1'd0;
wire          csrbank11_sel;
wire          csrbank11_txempty_r;
reg           csrbank11_txempty_re = 1'd0;
wire          csrbank11_txempty_w;
reg           csrbank11_txempty_we = 1'd0;
wire          csrbank11_txfull_r;
reg           csrbank11_txfull_re = 1'd0;
wire          csrbank11_txfull_w;
reg           csrbank11_txfull_we = 1'd0;
wire          csrbank12_out0_r;
reg           csrbank12_out0_re = 1'd0;
wire          csrbank12_out0_w;
reg           csrbank12_out0_we = 1'd0;
wire          csrbank12_sel;
wire          csrbank13_edge0_r;
reg           csrbank13_edge0_re = 1'd0;
wire          csrbank13_edge0_w;
reg           csrbank13_edge0_we = 1'd0;
wire          csrbank13_ev_enable0_r;
reg           csrbank13_ev_enable0_re = 1'd0;
wire          csrbank13_ev_enable0_w;
reg           csrbank13_ev_enable0_we = 1'd0;
wire          csrbank13_ev_pending_r;
reg           csrbank13_ev_pending_re = 1'd0;
wire          csrbank13_ev_pending_w;
reg           csrbank13_ev_pending_we = 1'd0;
wire          csrbank13_ev_status_r;
reg           csrbank13_ev_status_re = 1'd0;
wire          csrbank13_ev_status_w;
reg           csrbank13_ev_status_we = 1'd0;
wire          csrbank13_in_r;
reg           csrbank13_in_re = 1'd0;
wire          csrbank13_in_w;
reg           csrbank13_in_we = 1'd0;
wire          csrbank13_mode0_r;
reg           csrbank13_mode0_re = 1'd0;
wire          csrbank13_mode0_w;
reg           csrbank13_mode0_we = 1'd0;
wire          csrbank13_sel;
wire          csrbank14_edge0_r;
reg           csrbank14_edge0_re = 1'd0;
wire          csrbank14_edge0_w;
reg           csrbank14_edge0_we = 1'd0;
wire          csrbank14_ev_enable0_r;
reg           csrbank14_ev_enable0_re = 1'd0;
wire          csrbank14_ev_enable0_w;
reg           csrbank14_ev_enable0_we = 1'd0;
wire          csrbank14_ev_pending_r;
reg           csrbank14_ev_pending_re = 1'd0;
wire          csrbank14_ev_pending_w;
reg           csrbank14_ev_pending_we = 1'd0;
wire          csrbank14_ev_status_r;
reg           csrbank14_ev_status_re = 1'd0;
wire          csrbank14_ev_status_w;
reg           csrbank14_ev_status_we = 1'd0;
wire          csrbank14_in_r;
reg           csrbank14_in_re = 1'd0;
wire          csrbank14_in_w;
reg           csrbank14_in_we = 1'd0;
wire          csrbank14_mode0_r;
reg           csrbank14_mode0_re = 1'd0;
wire          csrbank14_mode0_w;
reg           csrbank14_mode0_we = 1'd0;
wire          csrbank14_sel;
wire          csrbank15_edge0_r;
reg           csrbank15_edge0_re = 1'd0;
wire          csrbank15_edge0_w;
reg           csrbank15_edge0_we = 1'd0;
wire          csrbank15_ev_enable0_r;
reg           csrbank15_ev_enable0_re = 1'd0;
wire          csrbank15_ev_enable0_w;
reg           csrbank15_ev_enable0_we = 1'd0;
wire          csrbank15_ev_pending_r;
reg           csrbank15_ev_pending_re = 1'd0;
wire          csrbank15_ev_pending_w;
reg           csrbank15_ev_pending_we = 1'd0;
wire          csrbank15_ev_status_r;
reg           csrbank15_ev_status_re = 1'd0;
wire          csrbank15_ev_status_w;
reg           csrbank15_ev_status_we = 1'd0;
wire          csrbank15_in_r;
reg           csrbank15_in_re = 1'd0;
wire          csrbank15_in_w;
reg           csrbank15_in_we = 1'd0;
wire          csrbank15_mode0_r;
reg           csrbank15_mode0_re = 1'd0;
wire          csrbank15_mode0_w;
reg           csrbank15_mode0_we = 1'd0;
wire          csrbank15_sel;
wire          csrbank16_edge0_r;
reg           csrbank16_edge0_re = 1'd0;
wire          csrbank16_edge0_w;
reg           csrbank16_edge0_we = 1'd0;
wire          csrbank16_ev_enable0_r;
reg           csrbank16_ev_enable0_re = 1'd0;
wire          csrbank16_ev_enable0_w;
reg           csrbank16_ev_enable0_we = 1'd0;
wire          csrbank16_ev_pending_r;
reg           csrbank16_ev_pending_re = 1'd0;
wire          csrbank16_ev_pending_w;
reg           csrbank16_ev_pending_we = 1'd0;
wire          csrbank16_ev_status_r;
reg           csrbank16_ev_status_re = 1'd0;
wire          csrbank16_ev_status_w;
reg           csrbank16_ev_status_we = 1'd0;
wire          csrbank16_in_r;
reg           csrbank16_in_re = 1'd0;
wire          csrbank16_in_w;
reg           csrbank16_in_we = 1'd0;
wire          csrbank16_mode0_r;
reg           csrbank16_mode0_re = 1'd0;
wire          csrbank16_mode0_w;
reg           csrbank16_mode0_we = 1'd0;
wire          csrbank16_sel;
wire          csrbank17_edge0_r;
reg           csrbank17_edge0_re = 1'd0;
wire          csrbank17_edge0_w;
reg           csrbank17_edge0_we = 1'd0;
wire          csrbank17_ev_enable0_r;
reg           csrbank17_ev_enable0_re = 1'd0;
wire          csrbank17_ev_enable0_w;
reg           csrbank17_ev_enable0_we = 1'd0;
wire          csrbank17_ev_pending_r;
reg           csrbank17_ev_pending_re = 1'd0;
wire          csrbank17_ev_pending_w;
reg           csrbank17_ev_pending_we = 1'd0;
wire          csrbank17_ev_status_r;
reg           csrbank17_ev_status_re = 1'd0;
wire          csrbank17_ev_status_w;
reg           csrbank17_ev_status_we = 1'd0;
wire          csrbank17_in_r;
reg           csrbank17_in_re = 1'd0;
wire          csrbank17_in_w;
reg           csrbank17_in_we = 1'd0;
wire          csrbank17_mode0_r;
reg           csrbank17_mode0_re = 1'd0;
wire          csrbank17_mode0_w;
reg           csrbank17_mode0_we = 1'd0;
wire          csrbank17_sel;
wire          csrbank18_edge0_r;
reg           csrbank18_edge0_re = 1'd0;
wire          csrbank18_edge0_w;
reg           csrbank18_edge0_we = 1'd0;
wire          csrbank18_ev_enable0_r;
reg           csrbank18_ev_enable0_re = 1'd0;
wire          csrbank18_ev_enable0_w;
reg           csrbank18_ev_enable0_we = 1'd0;
wire          csrbank18_ev_pending_r;
reg           csrbank18_ev_pending_re = 1'd0;
wire          csrbank18_ev_pending_w;
reg           csrbank18_ev_pending_we = 1'd0;
wire          csrbank18_ev_status_r;
reg           csrbank18_ev_status_re = 1'd0;
wire          csrbank18_ev_status_w;
reg           csrbank18_ev_status_we = 1'd0;
wire          csrbank18_in_r;
reg           csrbank18_in_re = 1'd0;
wire          csrbank18_in_w;
reg           csrbank18_in_we = 1'd0;
wire          csrbank18_mode0_r;
reg           csrbank18_mode0_re = 1'd0;
wire          csrbank18_mode0_w;
reg           csrbank18_mode0_we = 1'd0;
wire          csrbank18_sel;
wire    [2:0] csrbank19_out0_r;
reg           csrbank19_out0_re = 1'd0;
wire    [2:0] csrbank19_out0_w;
reg           csrbank19_out0_we = 1'd0;
wire          csrbank19_sel;
wire          csrbank1_out0_r;
reg           csrbank1_out0_re = 1'd0;
wire          csrbank1_out0_w;
reg           csrbank1_out0_we = 1'd0;
wire          csrbank1_sel;
wire          csrbank2_out0_r;
reg           csrbank2_out0_re = 1'd0;
wire          csrbank2_out0_w;
reg           csrbank2_out0_we = 1'd0;
wire          csrbank2_sel;
wire          csrbank3_master_cs0_r;
reg           csrbank3_master_cs0_re = 1'd0;
wire          csrbank3_master_cs0_w;
reg           csrbank3_master_cs0_we = 1'd0;
wire   [23:0] csrbank3_master_phyconfig0_r;
reg           csrbank3_master_phyconfig0_re = 1'd0;
wire   [23:0] csrbank3_master_phyconfig0_w;
reg           csrbank3_master_phyconfig0_we = 1'd0;
wire    [1:0] csrbank3_master_status_r;
reg           csrbank3_master_status_re = 1'd0;
wire    [1:0] csrbank3_master_status_w;
reg           csrbank3_master_status_we = 1'd0;
wire    [7:0] csrbank3_mmap_dummy_bits0_r;
reg           csrbank3_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] csrbank3_mmap_dummy_bits0_w;
reg           csrbank3_mmap_dummy_bits0_we = 1'd0;
wire          csrbank3_sel;
wire    [7:0] csrbank4_clk_divisor0_r;
reg           csrbank4_clk_divisor0_re = 1'd0;
wire    [7:0] csrbank4_clk_divisor0_w;
reg           csrbank4_clk_divisor0_we = 1'd0;
wire          csrbank4_sel;
wire          csrbank5_ien0_r;
reg           csrbank5_ien0_re = 1'd0;
wire          csrbank5_ien0_w;
reg           csrbank5_ien0_we = 1'd0;
wire          csrbank5_in_r;
reg           csrbank5_in_re = 1'd0;
wire          csrbank5_in_w;
reg           csrbank5_in_we = 1'd0;
wire          csrbank5_mode00_r;
reg           csrbank5_mode00_re = 1'd0;
wire          csrbank5_mode00_w;
reg           csrbank5_mode00_we = 1'd0;
wire          csrbank5_mode10_r;
reg           csrbank5_mode10_re = 1'd0;
wire          csrbank5_mode10_w;
reg           csrbank5_mode10_we = 1'd0;
wire          csrbank5_oe0_r;
reg           csrbank5_oe0_re = 1'd0;
wire          csrbank5_oe0_w;
reg           csrbank5_oe0_we = 1'd0;
wire          csrbank5_out0_r;
reg           csrbank5_out0_re = 1'd0;
wire          csrbank5_out0_w;
reg           csrbank5_out0_we = 1'd0;
wire          csrbank5_sel;
wire   [31:0] csrbank6_ien0_r;
reg           csrbank6_ien0_re = 1'd0;
wire   [31:0] csrbank6_ien0_w;
reg           csrbank6_ien0_we = 1'd0;
wire   [31:0] csrbank6_ien1_r;
reg           csrbank6_ien1_re = 1'd0;
wire   [31:0] csrbank6_ien1_w;
reg           csrbank6_ien1_we = 1'd0;
wire   [31:0] csrbank6_ien2_r;
reg           csrbank6_ien2_re = 1'd0;
wire   [31:0] csrbank6_ien2_w;
reg           csrbank6_ien2_we = 1'd0;
wire   [31:0] csrbank6_ien3_r;
reg           csrbank6_ien3_re = 1'd0;
wire   [31:0] csrbank6_ien3_w;
reg           csrbank6_ien3_we = 1'd0;
wire   [31:0] csrbank6_in0_r;
reg           csrbank6_in0_re = 1'd0;
wire   [31:0] csrbank6_in0_w;
reg           csrbank6_in0_we = 1'd0;
wire   [31:0] csrbank6_in1_r;
reg           csrbank6_in1_re = 1'd0;
wire   [31:0] csrbank6_in1_w;
reg           csrbank6_in1_we = 1'd0;
wire   [31:0] csrbank6_in2_r;
reg           csrbank6_in2_re = 1'd0;
wire   [31:0] csrbank6_in2_w;
reg           csrbank6_in2_we = 1'd0;
wire   [31:0] csrbank6_in3_r;
reg           csrbank6_in3_re = 1'd0;
wire   [31:0] csrbank6_in3_w;
reg           csrbank6_in3_we = 1'd0;
wire   [31:0] csrbank6_oe0_r;
reg           csrbank6_oe0_re = 1'd0;
wire   [31:0] csrbank6_oe0_w;
reg           csrbank6_oe0_we = 1'd0;
wire   [31:0] csrbank6_oe1_r;
reg           csrbank6_oe1_re = 1'd0;
wire   [31:0] csrbank6_oe1_w;
reg           csrbank6_oe1_we = 1'd0;
wire   [31:0] csrbank6_oe2_r;
reg           csrbank6_oe2_re = 1'd0;
wire   [31:0] csrbank6_oe2_w;
reg           csrbank6_oe2_we = 1'd0;
wire   [31:0] csrbank6_oe3_r;
reg           csrbank6_oe3_re = 1'd0;
wire   [31:0] csrbank6_oe3_w;
reg           csrbank6_oe3_we = 1'd0;
wire   [31:0] csrbank6_out0_r;
reg           csrbank6_out0_re = 1'd0;
wire   [31:0] csrbank6_out0_w;
reg           csrbank6_out0_we = 1'd0;
wire   [31:0] csrbank6_out1_r;
reg           csrbank6_out1_re = 1'd0;
wire   [31:0] csrbank6_out1_w;
reg           csrbank6_out1_we = 1'd0;
wire   [31:0] csrbank6_out2_r;
reg           csrbank6_out2_re = 1'd0;
wire   [31:0] csrbank6_out2_w;
reg           csrbank6_out2_we = 1'd0;
wire   [31:0] csrbank6_out3_r;
reg           csrbank6_out3_re = 1'd0;
wire   [31:0] csrbank6_out3_w;
reg           csrbank6_out3_we = 1'd0;
wire          csrbank6_sel;
wire          csrbank7_out0_r;
reg           csrbank7_out0_re = 1'd0;
wire          csrbank7_out0_w;
reg           csrbank7_out0_we = 1'd0;
wire          csrbank7_sel;
wire          csrbank8_out0_r;
reg           csrbank8_out0_re = 1'd0;
wire          csrbank8_out0_w;
reg           csrbank8_out0_we = 1'd0;
wire          csrbank8_sel;
wire   [15:0] csrbank9_clk_divider0_r;
reg           csrbank9_clk_divider0_re = 1'd0;
wire   [15:0] csrbank9_clk_divider0_w;
reg           csrbank9_clk_divider0_we = 1'd0;
wire   [15:0] csrbank9_control0_r;
reg           csrbank9_control0_re = 1'd0;
wire   [15:0] csrbank9_control0_w;
reg           csrbank9_control0_we = 1'd0;
wire   [16:0] csrbank9_cs0_r;
reg           csrbank9_cs0_re = 1'd0;
wire   [16:0] csrbank9_cs0_w;
reg           csrbank9_cs0_we = 1'd0;
wire          csrbank9_loopback0_r;
reg           csrbank9_loopback0_re = 1'd0;
wire          csrbank9_loopback0_w;
reg           csrbank9_loopback0_we = 1'd0;
wire    [7:0] csrbank9_miso_r;
reg           csrbank9_miso_re = 1'd0;
wire    [7:0] csrbank9_miso_w;
reg           csrbank9_miso_we = 1'd0;
wire    [7:0] csrbank9_mosi0_r;
reg           csrbank9_mosi0_re = 1'd0;
wire    [7:0] csrbank9_mosi0_w;
reg           csrbank9_mosi0_we = 1'd0;
wire          csrbank9_sel;
wire    [1:0] csrbank9_status_r;
reg           csrbank9_status_re = 1'd0;
wire    [1:0] csrbank9_status_w;
reg           csrbank9_status_we = 1'd0;
wire   [31:0] dat_r;
wire   [31:0] dat_w;
reg     [1:0] dbg_uart_addr_bytes_count = 2'd0;
reg     [1:0] dbg_uart_addr_bytes_count_uartwishbonebridge_next_value1 = 2'd0;
reg           dbg_uart_addr_bytes_count_uartwishbonebridge_next_value_ce1 = 1'd0;
reg    [31:0] dbg_uart_address = 32'd0;
reg    [31:0] dbg_uart_address_uartwishbonebridge_next_value5 = 32'd0;
reg           dbg_uart_address_uartwishbonebridge_next_value_ce5 = 1'd0;
reg     [7:0] dbg_uart_cmd = 8'd0;
reg     [7:0] dbg_uart_cmd_uartwishbonebridge_next_value3 = 8'd0;
reg           dbg_uart_cmd_uartwishbonebridge_next_value_ce3 = 1'd0;
reg    [19:0] dbg_uart_count = 20'd1000000;
reg    [31:0] dbg_uart_data = 32'd0;
reg     [1:0] dbg_uart_data_bytes_count = 2'd0;
reg     [1:0] dbg_uart_data_bytes_count_uartwishbonebridge_next_value0 = 2'd0;
reg           dbg_uart_data_bytes_count_uartwishbonebridge_next_value_ce0 = 1'd0;
reg    [31:0] dbg_uart_data_uartwishbonebridge_next_value7 = 32'd0;
reg           dbg_uart_data_uartwishbonebridge_next_value_ce7 = 1'd0;
reg           dbg_uart_dbg_uart_rx = 1'd0;
reg           dbg_uart_dbg_uart_tx = 1'd1;
reg           dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value1 = 1'd0;
reg           dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value_ce1 = 1'd0;
wire          dbg_uart_done;
reg           dbg_uart_incr = 1'd0;
reg           dbg_uart_incr_uartwishbonebridge_next_value6 = 1'd0;
reg           dbg_uart_incr_uartwishbonebridge_next_value_ce6 = 1'd0;
reg           dbg_uart_is_ongoing = 1'd0;
reg     [7:0] dbg_uart_length = 8'd0;
reg     [7:0] dbg_uart_length_uartwishbonebridge_next_value4 = 8'd0;
reg           dbg_uart_length_uartwishbonebridge_next_value_ce4 = 1'd0;
wire          dbg_uart_reset;
reg     [3:0] dbg_uart_rx_count = 4'd0;
reg     [3:0] dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value0 = 4'd0;
reg           dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] dbg_uart_rx_data = 8'd0;
reg     [7:0] dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value1 = 8'd0;
reg           dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1 = 1'd0;
reg           dbg_uart_rx_enable = 1'd0;
reg    [31:0] dbg_uart_rx_phase = 32'd0;
wire          dbg_uart_rx_rx;
reg           dbg_uart_rx_rx_d = 1'd0;
reg     [7:0] dbg_uart_rx_source_payload_data = 8'd0;
reg           dbg_uart_rx_source_ready = 1'd0;
reg           dbg_uart_rx_source_valid = 1'd0;
reg           dbg_uart_rx_tick = 1'd0;
reg     [3:0] dbg_uart_tx_count = 4'd0;
reg     [3:0] dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value0 = 4'd0;
reg           dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] dbg_uart_tx_data = 8'd0;
reg     [7:0] dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value2 = 8'd0;
reg           dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 = 1'd0;
reg           dbg_uart_tx_enable = 1'd0;
reg    [31:0] dbg_uart_tx_phase = 32'd0;
wire          dbg_uart_tx_sink_last;
reg     [7:0] dbg_uart_tx_sink_payload_data = 8'd0;
reg           dbg_uart_tx_sink_ready = 1'd0;
reg           dbg_uart_tx_sink_valid = 1'd0;
reg           dbg_uart_tx_tick = 1'd0;
wire          dbg_uart_wait;
wire          dbg_uart_wishbone_ack;
wire   [29:0] dbg_uart_wishbone_adr;
reg     [1:0] dbg_uart_wishbone_bte = 2'd0;
reg     [2:0] dbg_uart_wishbone_cti = 3'd0;
reg           dbg_uart_wishbone_cyc = 1'd0;
wire   [31:0] dbg_uart_wishbone_dat_r;
wire   [31:0] dbg_uart_wishbone_dat_w;
wire          dbg_uart_wishbone_err;
wire    [3:0] dbg_uart_wishbone_sel;
reg           dbg_uart_wishbone_stb = 1'd0;
reg           dbg_uart_wishbone_we = 1'd0;
reg     [7:0] dbg_uart_words_count = 8'd0;
reg     [7:0] dbg_uart_words_count_uartwishbonebridge_next_value2 = 8'd0;
reg           dbg_uart_words_count_uartwishbonebridge_next_value_ce2 = 1'd0;
reg           debug_mode_re = 1'd0;
reg           debug_mode_storage = 1'd0;
reg           debug_oeb_re = 1'd0;
reg           debug_oeb_storage = 1'd0;
reg           dff2_bus_ack = 1'd0;
wire   [29:0] dff2_bus_adr;
wire    [1:0] dff2_bus_bte;
wire    [2:0] dff2_bus_cti;
wire          dff2_bus_cyc;
wire   [31:0] dff2_bus_dat_r;
wire   [31:0] dff2_bus_dat_w;
reg           dff2_bus_err = 1'd0;
wire    [3:0] dff2_bus_sel;
wire          dff2_bus_stb;
wire          dff2_bus_we;
wire   [31:0] dff2_di;
wire   [31:0] dff2_do;
wire          dff2_en;
reg     [3:0] dff2_we = 4'd0;
reg           dff_bus_ack = 1'd0;
wire   [29:0] dff_bus_adr;
wire    [1:0] dff_bus_bte;
wire    [2:0] dff_bus_cti;
wire          dff_bus_cyc;
wire   [31:0] dff_bus_dat_r;
wire   [31:0] dff_bus_dat_w;
reg           dff_bus_err = 1'd0;
wire    [3:0] dff_bus_sel;
wire          dff_bus_stb;
wire          dff_bus_we;
wire   [31:0] dff_di;
wire   [31:0] dff_do;
wire          dff_en;
reg     [3:0] dff_we = 4'd0;
wire          done;
reg           error = 1'd0;
reg           gpio_ien_re = 1'd0;
reg           gpio_ien_storage = 1'd0;
reg           gpio_in_re = 1'd0;
wire          gpio_in_status;
wire          gpio_in_we;
reg           gpio_mode0_re = 1'd0;
reg           gpio_mode0_storage = 1'd0;
reg           gpio_mode1_re = 1'd0;
reg           gpio_mode1_storage = 1'd0;
reg           gpio_oe_re = 1'd0;
reg           gpio_oe_storage = 1'd0;
reg           gpio_out_re = 1'd0;
reg           gpio_out_storage = 1'd0;
reg           gpioin0_gpioin0_clear = 1'd0;
reg           gpioin0_gpioin0_edge_re = 1'd0;
reg           gpioin0_gpioin0_edge_storage = 1'd0;
reg           gpioin0_gpioin0_enable_re = 1'd0;
reg           gpioin0_gpioin0_enable_storage = 1'd0;
wire          gpioin0_gpioin0_i00;
wire          gpioin0_gpioin0_i01;
wire          gpioin0_gpioin0_i02;
reg           gpioin0_gpioin0_in_pads_n_d = 1'd0;
wire          gpioin0_gpioin0_irq;
reg           gpioin0_gpioin0_mode_re = 1'd0;
reg           gpioin0_gpioin0_mode_storage = 1'd0;
reg           gpioin0_gpioin0_pending = 1'd0;
reg           gpioin0_gpioin0_pending_r = 1'd0;
reg           gpioin0_gpioin0_pending_re = 1'd0;
wire          gpioin0_gpioin0_pending_status;
wire          gpioin0_gpioin0_pending_we;
wire          gpioin0_gpioin0_status;
reg           gpioin0_gpioin0_status_re = 1'd0;
wire          gpioin0_gpioin0_status_status;
wire          gpioin0_gpioin0_status_we;
reg           gpioin0_gpioin0_trigger = 1'd0;
reg           gpioin0_gpioin0_trigger_d = 1'd0;
reg           gpioin0_in_re = 1'd0;
wire          gpioin0_in_status;
wire          gpioin0_in_we;
reg           gpioin1_gpioin1_clear = 1'd0;
reg           gpioin1_gpioin1_edge_re = 1'd0;
reg           gpioin1_gpioin1_edge_storage = 1'd0;
reg           gpioin1_gpioin1_enable_re = 1'd0;
reg           gpioin1_gpioin1_enable_storage = 1'd0;
wire          gpioin1_gpioin1_i00;
wire          gpioin1_gpioin1_i01;
wire          gpioin1_gpioin1_i02;
reg           gpioin1_gpioin1_in_pads_n_d = 1'd0;
wire          gpioin1_gpioin1_irq;
reg           gpioin1_gpioin1_mode_re = 1'd0;
reg           gpioin1_gpioin1_mode_storage = 1'd0;
reg           gpioin1_gpioin1_pending = 1'd0;
reg           gpioin1_gpioin1_pending_r = 1'd0;
reg           gpioin1_gpioin1_pending_re = 1'd0;
wire          gpioin1_gpioin1_pending_status;
wire          gpioin1_gpioin1_pending_we;
wire          gpioin1_gpioin1_status;
reg           gpioin1_gpioin1_status_re = 1'd0;
wire          gpioin1_gpioin1_status_status;
wire          gpioin1_gpioin1_status_we;
reg           gpioin1_gpioin1_trigger = 1'd0;
reg           gpioin1_gpioin1_trigger_d = 1'd0;
reg           gpioin1_in_re = 1'd0;
wire          gpioin1_in_status;
wire          gpioin1_in_we;
reg           gpioin2_gpioin2_clear = 1'd0;
reg           gpioin2_gpioin2_edge_re = 1'd0;
reg           gpioin2_gpioin2_edge_storage = 1'd0;
reg           gpioin2_gpioin2_enable_re = 1'd0;
reg           gpioin2_gpioin2_enable_storage = 1'd0;
wire          gpioin2_gpioin2_i00;
wire          gpioin2_gpioin2_i01;
wire          gpioin2_gpioin2_i02;
reg           gpioin2_gpioin2_in_pads_n_d = 1'd0;
wire          gpioin2_gpioin2_irq;
reg           gpioin2_gpioin2_mode_re = 1'd0;
reg           gpioin2_gpioin2_mode_storage = 1'd0;
reg           gpioin2_gpioin2_pending = 1'd0;
reg           gpioin2_gpioin2_pending_r = 1'd0;
reg           gpioin2_gpioin2_pending_re = 1'd0;
wire          gpioin2_gpioin2_pending_status;
wire          gpioin2_gpioin2_pending_we;
wire          gpioin2_gpioin2_status;
reg           gpioin2_gpioin2_status_re = 1'd0;
wire          gpioin2_gpioin2_status_status;
wire          gpioin2_gpioin2_status_we;
reg           gpioin2_gpioin2_trigger = 1'd0;
reg           gpioin2_gpioin2_trigger_d = 1'd0;
reg           gpioin2_in_re = 1'd0;
wire          gpioin2_in_status;
wire          gpioin2_in_we;
reg           gpioin3_gpioin3_clear = 1'd0;
reg           gpioin3_gpioin3_edge_re = 1'd0;
reg           gpioin3_gpioin3_edge_storage = 1'd0;
reg           gpioin3_gpioin3_enable_re = 1'd0;
reg           gpioin3_gpioin3_enable_storage = 1'd0;
wire          gpioin3_gpioin3_i00;
wire          gpioin3_gpioin3_i01;
wire          gpioin3_gpioin3_i02;
reg           gpioin3_gpioin3_in_pads_n_d = 1'd0;
wire          gpioin3_gpioin3_irq;
reg           gpioin3_gpioin3_mode_re = 1'd0;
reg           gpioin3_gpioin3_mode_storage = 1'd0;
reg           gpioin3_gpioin3_pending = 1'd0;
reg           gpioin3_gpioin3_pending_r = 1'd0;
reg           gpioin3_gpioin3_pending_re = 1'd0;
wire          gpioin3_gpioin3_pending_status;
wire          gpioin3_gpioin3_pending_we;
wire          gpioin3_gpioin3_status;
reg           gpioin3_gpioin3_status_re = 1'd0;
wire          gpioin3_gpioin3_status_status;
wire          gpioin3_gpioin3_status_we;
reg           gpioin3_gpioin3_trigger = 1'd0;
reg           gpioin3_gpioin3_trigger_d = 1'd0;
reg           gpioin3_in_re = 1'd0;
wire          gpioin3_in_status;
wire          gpioin3_in_we;
reg           gpioin4_gpioin4_clear = 1'd0;
reg           gpioin4_gpioin4_edge_re = 1'd0;
reg           gpioin4_gpioin4_edge_storage = 1'd0;
reg           gpioin4_gpioin4_enable_re = 1'd0;
reg           gpioin4_gpioin4_enable_storage = 1'd0;
wire          gpioin4_gpioin4_i00;
wire          gpioin4_gpioin4_i01;
wire          gpioin4_gpioin4_i02;
reg           gpioin4_gpioin4_in_pads_n_d = 1'd0;
wire          gpioin4_gpioin4_irq;
reg           gpioin4_gpioin4_mode_re = 1'd0;
reg           gpioin4_gpioin4_mode_storage = 1'd0;
reg           gpioin4_gpioin4_pending = 1'd0;
reg           gpioin4_gpioin4_pending_r = 1'd0;
reg           gpioin4_gpioin4_pending_re = 1'd0;
wire          gpioin4_gpioin4_pending_status;
wire          gpioin4_gpioin4_pending_we;
wire          gpioin4_gpioin4_status;
reg           gpioin4_gpioin4_status_re = 1'd0;
wire          gpioin4_gpioin4_status_status;
wire          gpioin4_gpioin4_status_we;
reg           gpioin4_gpioin4_trigger = 1'd0;
reg           gpioin4_gpioin4_trigger_d = 1'd0;
reg           gpioin4_in_re = 1'd0;
wire          gpioin4_in_status;
wire          gpioin4_in_we;
reg           gpioin5_gpioin5_clear = 1'd0;
reg           gpioin5_gpioin5_edge_re = 1'd0;
reg           gpioin5_gpioin5_edge_storage = 1'd0;
reg           gpioin5_gpioin5_enable_re = 1'd0;
reg           gpioin5_gpioin5_enable_storage = 1'd0;
wire          gpioin5_gpioin5_i00;
wire          gpioin5_gpioin5_i01;
wire          gpioin5_gpioin5_i02;
reg           gpioin5_gpioin5_in_pads_n_d = 1'd0;
wire          gpioin5_gpioin5_irq;
reg           gpioin5_gpioin5_mode_re = 1'd0;
reg           gpioin5_gpioin5_mode_storage = 1'd0;
reg           gpioin5_gpioin5_pending = 1'd0;
reg           gpioin5_gpioin5_pending_r = 1'd0;
reg           gpioin5_gpioin5_pending_re = 1'd0;
wire          gpioin5_gpioin5_pending_status;
wire          gpioin5_gpioin5_pending_we;
wire          gpioin5_gpioin5_status;
reg           gpioin5_gpioin5_status_re = 1'd0;
wire          gpioin5_gpioin5_status_status;
wire          gpioin5_gpioin5_status_we;
reg           gpioin5_gpioin5_trigger = 1'd0;
reg           gpioin5_gpioin5_trigger_d = 1'd0;
reg           gpioin5_in_re = 1'd0;
wire          gpioin5_in_status;
wire          gpioin5_in_we;
reg     [1:0] grant = 2'd0;
wire          hk_ack;
wire   [29:0] hk_adr;
wire    [1:0] hk_bte;
wire    [2:0] hk_cti;
wire          hk_cyc;
wire   [31:0] hk_dat_r;
wire   [31:0] hk_dat_w;
reg           hk_err = 1'd0;
wire    [3:0] hk_sel;
wire          hk_stb;
wire          hk_we;
reg           int_rst = 1'd1;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire   [13:0] interface0_bank_bus_adr;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] interface0_bank_bus_dat_w;
wire          interface0_bank_bus_re;
wire          interface0_bank_bus_we;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
wire   [13:0] interface10_bank_bus_adr;
reg    [31:0] interface10_bank_bus_dat_r = 32'd0;
wire   [31:0] interface10_bank_bus_dat_w;
wire          interface10_bank_bus_re;
wire          interface10_bank_bus_we;
wire   [13:0] interface11_bank_bus_adr;
reg    [31:0] interface11_bank_bus_dat_r = 32'd0;
wire   [31:0] interface11_bank_bus_dat_w;
wire          interface11_bank_bus_re;
wire          interface11_bank_bus_we;
wire   [13:0] interface12_bank_bus_adr;
reg    [31:0] interface12_bank_bus_dat_r = 32'd0;
wire   [31:0] interface12_bank_bus_dat_w;
wire          interface12_bank_bus_re;
wire          interface12_bank_bus_we;
wire   [13:0] interface13_bank_bus_adr;
reg    [31:0] interface13_bank_bus_dat_r = 32'd0;
wire   [31:0] interface13_bank_bus_dat_w;
wire          interface13_bank_bus_re;
wire          interface13_bank_bus_we;
wire   [13:0] interface14_bank_bus_adr;
reg    [31:0] interface14_bank_bus_dat_r = 32'd0;
wire   [31:0] interface14_bank_bus_dat_w;
wire          interface14_bank_bus_re;
wire          interface14_bank_bus_we;
wire   [13:0] interface15_bank_bus_adr;
reg    [31:0] interface15_bank_bus_dat_r = 32'd0;
wire   [31:0] interface15_bank_bus_dat_w;
wire          interface15_bank_bus_re;
wire          interface15_bank_bus_we;
wire   [13:0] interface16_bank_bus_adr;
reg    [31:0] interface16_bank_bus_dat_r = 32'd0;
wire   [31:0] interface16_bank_bus_dat_w;
wire          interface16_bank_bus_re;
wire          interface16_bank_bus_we;
wire   [13:0] interface17_bank_bus_adr;
reg    [31:0] interface17_bank_bus_dat_r = 32'd0;
wire   [31:0] interface17_bank_bus_dat_w;
wire          interface17_bank_bus_re;
wire          interface17_bank_bus_we;
wire   [13:0] interface18_bank_bus_adr;
reg    [31:0] interface18_bank_bus_dat_r = 32'd0;
wire   [31:0] interface18_bank_bus_dat_w;
wire          interface18_bank_bus_re;
wire          interface18_bank_bus_we;
wire   [13:0] interface19_bank_bus_adr;
reg    [31:0] interface19_bank_bus_dat_r = 32'd0;
wire   [31:0] interface19_bank_bus_dat_w;
wire          interface19_bank_bus_re;
wire          interface19_bank_bus_we;
reg    [13:0] interface1_adr = 14'd0;
wire   [13:0] interface1_bank_bus_adr;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] interface1_bank_bus_dat_w;
wire          interface1_bank_bus_re;
wire          interface1_bank_bus_we;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg           interface1_re = 1'd0;
reg           interface1_we = 1'd0;
wire   [13:0] interface2_bank_bus_adr;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] interface2_bank_bus_dat_w;
wire          interface2_bank_bus_re;
wire          interface2_bank_bus_we;
wire   [13:0] interface3_bank_bus_adr;
reg    [31:0] interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] interface3_bank_bus_dat_w;
wire          interface3_bank_bus_re;
wire          interface3_bank_bus_we;
wire   [13:0] interface4_bank_bus_adr;
reg    [31:0] interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] interface4_bank_bus_dat_w;
wire          interface4_bank_bus_re;
wire          interface4_bank_bus_we;
wire   [13:0] interface5_bank_bus_adr;
reg    [31:0] interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] interface5_bank_bus_dat_w;
wire          interface5_bank_bus_re;
wire          interface5_bank_bus_we;
wire   [13:0] interface6_bank_bus_adr;
reg    [31:0] interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] interface6_bank_bus_dat_w;
wire          interface6_bank_bus_re;
wire          interface6_bank_bus_we;
wire   [13:0] interface7_bank_bus_adr;
reg    [31:0] interface7_bank_bus_dat_r = 32'd0;
wire   [31:0] interface7_bank_bus_dat_w;
wire          interface7_bank_bus_re;
wire          interface7_bank_bus_we;
wire   [13:0] interface8_bank_bus_adr;
reg    [31:0] interface8_bank_bus_dat_r = 32'd0;
wire   [31:0] interface8_bank_bus_dat_w;
wire          interface8_bank_bus_re;
wire          interface8_bank_bus_we;
wire   [13:0] interface9_bank_bus_adr;
reg    [31:0] interface9_bank_bus_dat_r = 32'd0;
wire   [31:0] interface9_bank_bus_dat_w;
wire          interface9_bank_bus_re;
wire          interface9_bank_bus_we;
reg           la_ien_re = 1'd0;
reg   [127:0] la_ien_storage = 128'd0;
reg           la_in_re = 1'd0;
reg   [127:0] la_in_status = 128'd0;
wire          la_in_we;
reg           la_oe_re = 1'd0;
reg   [127:0] la_oe_storage = 128'd0;
reg           la_out_re = 1'd0;
reg   [127:0] la_out_storage = 128'd0;
reg           litespi_grant = 1'd0;
reg     [3:0] litespi_next_state = 4'd0;
wire    [1:0] litespi_request;
reg           litespi_rx_demux_endpoint0_source_first = 1'd0;
reg           litespi_rx_demux_endpoint0_source_last = 1'd0;
reg    [31:0] litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
wire          litespi_rx_demux_endpoint0_source_ready;
reg           litespi_rx_demux_endpoint0_source_valid = 1'd0;
reg           litespi_rx_demux_endpoint1_source_first = 1'd0;
reg           litespi_rx_demux_endpoint1_source_last = 1'd0;
reg    [31:0] litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire          litespi_rx_demux_endpoint1_source_ready;
reg           litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire          litespi_rx_demux_sel;
wire          litespi_rx_demux_sink_first;
wire          litespi_rx_demux_sink_last;
wire   [31:0] litespi_rx_demux_sink_payload_data;
reg           litespi_rx_demux_sink_ready = 1'd0;
wire          litespi_rx_demux_sink_valid;
reg     [3:0] litespi_state = 4'd0;
wire          litespi_tx_mux_endpoint0_sink_first;
wire          litespi_tx_mux_endpoint0_sink_last;
wire   [31:0] litespi_tx_mux_endpoint0_sink_payload_data;
wire    [5:0] litespi_tx_mux_endpoint0_sink_payload_len;
wire    [7:0] litespi_tx_mux_endpoint0_sink_payload_mask;
wire    [3:0] litespi_tx_mux_endpoint0_sink_payload_width;
reg           litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire          litespi_tx_mux_endpoint0_sink_valid;
wire          litespi_tx_mux_endpoint1_sink_first;
wire          litespi_tx_mux_endpoint1_sink_last;
wire   [31:0] litespi_tx_mux_endpoint1_sink_payload_data;
wire    [5:0] litespi_tx_mux_endpoint1_sink_payload_len;
wire    [7:0] litespi_tx_mux_endpoint1_sink_payload_mask;
wire    [3:0] litespi_tx_mux_endpoint1_sink_payload_width;
reg           litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire          litespi_tx_mux_endpoint1_sink_valid;
wire          litespi_tx_mux_sel;
reg           litespi_tx_mux_source_first = 1'd0;
reg           litespi_tx_mux_source_last = 1'd0;
reg    [31:0] litespi_tx_mux_source_payload_data = 32'd0;
reg     [5:0] litespi_tx_mux_source_payload_len = 6'd0;
reg     [7:0] litespi_tx_mux_source_payload_mask = 8'd0;
reg     [3:0] litespi_tx_mux_source_payload_width = 4'd0;
wire          litespi_tx_mux_source_ready;
reg           litespi_tx_mux_source_valid = 1'd0;
reg     [1:0] litespiphy_next_state = 2'd0;
reg     [1:0] litespiphy_state = 2'd0;
wire          mgmtsoc_bus_error;
reg    [31:0] mgmtsoc_bus_errors = 32'd0;
reg           mgmtsoc_bus_errors_re = 1'd0;
wire   [31:0] mgmtsoc_bus_errors_status;
wire          mgmtsoc_bus_errors_we;
reg           mgmtsoc_converter0_count = 1'd0;
reg    [63:0] mgmtsoc_converter0_dat_r = 64'd0;
wire          mgmtsoc_converter0_done;
reg           mgmtsoc_converter0_skip = 1'd0;
reg           mgmtsoc_converter1_count = 1'd0;
reg    [63:0] mgmtsoc_converter1_dat_r = 64'd0;
wire          mgmtsoc_converter1_done;
reg           mgmtsoc_converter1_skip = 1'd0;
wire          mgmtsoc_cpu_rst;
reg           mgmtsoc_crossbar_cs = 1'd0;
wire          mgmtsoc_crossbar_sink_first;
wire          mgmtsoc_crossbar_sink_last;
wire   [31:0] mgmtsoc_crossbar_sink_payload_data;
wire          mgmtsoc_crossbar_sink_ready;
wire          mgmtsoc_crossbar_sink_valid;
wire          mgmtsoc_crossbar_source_first;
wire          mgmtsoc_crossbar_source_last;
wire   [31:0] mgmtsoc_crossbar_source_payload_data;
wire    [5:0] mgmtsoc_crossbar_source_payload_len;
wire    [7:0] mgmtsoc_crossbar_source_payload_mask;
wire    [3:0] mgmtsoc_crossbar_source_payload_width;
wire          mgmtsoc_crossbar_source_ready;
wire          mgmtsoc_crossbar_source_valid;
reg           mgmtsoc_en_re = 1'd0;
reg           mgmtsoc_en_storage = 1'd0;
reg           mgmtsoc_enable_re = 1'd0;
reg           mgmtsoc_enable_storage = 1'd0;
wire          mgmtsoc_icp_bus_ack;
wire   [11:0] mgmtsoc_icp_bus_adr;
wire    [1:0] mgmtsoc_icp_bus_bte;
wire    [2:0] mgmtsoc_icp_bus_cti;
wire          mgmtsoc_icp_bus_cyc;
wire   [31:0] mgmtsoc_icp_bus_dat_r;
wire   [31:0] mgmtsoc_icp_bus_dat_w;
reg           mgmtsoc_icp_bus_err = 1'd0;
wire    [3:0] mgmtsoc_icp_bus_sel;
wire          mgmtsoc_icp_bus_stb;
wire          mgmtsoc_icp_bus_we;
wire          mgmtsoc_ics_bus_ack;
wire   [11:0] mgmtsoc_ics_bus_adr;
wire    [1:0] mgmtsoc_ics_bus_bte;
wire    [2:0] mgmtsoc_ics_bus_cti;
wire          mgmtsoc_ics_bus_cyc;
wire   [31:0] mgmtsoc_ics_bus_dat_r;
wire   [31:0] mgmtsoc_ics_bus_dat_w;
reg           mgmtsoc_ics_bus_err = 1'd0;
wire    [3:0] mgmtsoc_ics_bus_sel;
wire          mgmtsoc_ics_bus_stb;
wire          mgmtsoc_ics_bus_we;
wire    [7:0] mgmtsoc_ics_icp_xfer_pri;
wire    [3:0] mgmtsoc_ics_icp_xfer_src;
wire          mgmtsoc_interface0_adapted_interface_ack;
wire   [29:0] mgmtsoc_interface0_adapted_interface_adr;
reg     [1:0] mgmtsoc_interface0_adapted_interface_bte = 2'd0;
reg     [2:0] mgmtsoc_interface0_adapted_interface_cti = 3'd0;
reg           mgmtsoc_interface0_adapted_interface_cyc = 1'd0;
wire   [31:0] mgmtsoc_interface0_adapted_interface_dat_r;
reg    [31:0] mgmtsoc_interface0_adapted_interface_dat_w = 32'd0;
wire          mgmtsoc_interface0_adapted_interface_err;
reg     [3:0] mgmtsoc_interface0_adapted_interface_sel = 4'd0;
reg           mgmtsoc_interface0_adapted_interface_stb = 1'd0;
reg           mgmtsoc_interface0_adapted_interface_we = 1'd0;
wire          mgmtsoc_interface1_adapted_interface_ack;
wire   [29:0] mgmtsoc_interface1_adapted_interface_adr;
reg     [1:0] mgmtsoc_interface1_adapted_interface_bte = 2'd0;
reg     [2:0] mgmtsoc_interface1_adapted_interface_cti = 3'd0;
reg           mgmtsoc_interface1_adapted_interface_cyc = 1'd0;
wire   [31:0] mgmtsoc_interface1_adapted_interface_dat_r;
reg    [31:0] mgmtsoc_interface1_adapted_interface_dat_w = 32'd0;
wire          mgmtsoc_interface1_adapted_interface_err;
reg     [3:0] mgmtsoc_interface1_adapted_interface_sel = 4'd0;
reg           mgmtsoc_interface1_adapted_interface_stb = 1'd0;
reg           mgmtsoc_interface1_adapted_interface_we = 1'd0;
wire          mgmtsoc_irq;
reg           mgmtsoc_litespisdrphycore0 = 1'd0;
reg     [1:0] mgmtsoc_litespisdrphycore1 = 2'd0;
reg     [3:0] mgmtsoc_litespisdrphycore2 = 4'd0;
reg     [7:0] mgmtsoc_litespisdrphycore3 = 8'd0;
reg           mgmtsoc_litespisdrphycore_clk = 1'd0;
reg     [7:0] mgmtsoc_litespisdrphycore_cnt = 8'd0;
reg     [3:0] mgmtsoc_litespisdrphycore_count = 4'd11;
wire          mgmtsoc_litespisdrphycore_cs;
wire          mgmtsoc_litespisdrphycore_cs_enable;
wire    [7:0] mgmtsoc_litespisdrphycore_div;
wire          mgmtsoc_litespisdrphycore_done;
reg     [1:0] mgmtsoc_litespisdrphycore_dq_i = 2'd0;
reg           mgmtsoc_litespisdrphycore_dq_o = 1'd0;
wire          mgmtsoc_litespisdrphycore_dq_oe;
reg           mgmtsoc_litespisdrphycore_en = 1'd0;
reg           mgmtsoc_litespisdrphycore_en_int = 1'd0;
wire          mgmtsoc_litespisdrphycore_negedge;
wire          mgmtsoc_litespisdrphycore_posedge;
reg     [1:0] mgmtsoc_litespisdrphycore_posedge_reg = 2'd0;
wire          mgmtsoc_litespisdrphycore_posedge_reg2;
reg           mgmtsoc_litespisdrphycore_re = 1'd0;
wire          mgmtsoc_litespisdrphycore_sink_first;
wire          mgmtsoc_litespisdrphycore_sink_last;
wire   [31:0] mgmtsoc_litespisdrphycore_sink_payload_data;
wire    [5:0] mgmtsoc_litespisdrphycore_sink_payload_len;
wire    [7:0] mgmtsoc_litespisdrphycore_sink_payload_mask;
wire    [3:0] mgmtsoc_litespisdrphycore_sink_payload_width;
reg           mgmtsoc_litespisdrphycore_sink_ready = 1'd0;
wire          mgmtsoc_litespisdrphycore_sink_valid;
reg           mgmtsoc_litespisdrphycore_source_first = 1'd0;
reg           mgmtsoc_litespisdrphycore_source_last = 1'd0;
wire   [31:0] mgmtsoc_litespisdrphycore_source_payload_data;
wire          mgmtsoc_litespisdrphycore_source_ready;
reg           mgmtsoc_litespisdrphycore_source_valid = 1'd0;
wire    [7:0] mgmtsoc_litespisdrphycore_spi_clk_divisor;
reg     [7:0] mgmtsoc_litespisdrphycore_sr_cnt = 8'd0;
reg     [7:0] mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg           mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
reg    [31:0] mgmtsoc_litespisdrphycore_sr_in = 32'd0;
reg           mgmtsoc_litespisdrphycore_sr_in_shift = 1'd0;
reg    [31:0] mgmtsoc_litespisdrphycore_sr_out = 32'd0;
reg           mgmtsoc_litespisdrphycore_sr_out_load = 1'd0;
reg           mgmtsoc_litespisdrphycore_sr_out_shift = 1'd0;
reg     [7:0] mgmtsoc_litespisdrphycore_storage = 8'd1;
wire          mgmtsoc_litespisdrphycore_wait;
reg           mgmtsoc_load_re = 1'd0;
reg    [31:0] mgmtsoc_load_storage = 32'd0;
wire          mgmtsoc_master_cs;
reg           mgmtsoc_master_cs_re = 1'd0;
reg           mgmtsoc_master_cs_storage = 1'd0;
wire    [7:0] mgmtsoc_master_len;
wire    [7:0] mgmtsoc_master_mask;
reg           mgmtsoc_master_phyconfig_re = 1'd0;
reg    [23:0] mgmtsoc_master_phyconfig_storage = 24'd0;
wire          mgmtsoc_master_rx_fifo_pipe_valid_sink_first;
wire          mgmtsoc_master_rx_fifo_pipe_valid_sink_last;
wire   [31:0] mgmtsoc_master_rx_fifo_pipe_valid_sink_payload_data;
wire          mgmtsoc_master_rx_fifo_pipe_valid_sink_ready;
wire          mgmtsoc_master_rx_fifo_pipe_valid_sink_valid;
reg           mgmtsoc_master_rx_fifo_pipe_valid_source_first = 1'd0;
reg           mgmtsoc_master_rx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] mgmtsoc_master_rx_fifo_pipe_valid_source_payload_data = 32'd0;
wire          mgmtsoc_master_rx_fifo_pipe_valid_source_ready;
reg           mgmtsoc_master_rx_fifo_pipe_valid_source_valid = 1'd0;
wire          mgmtsoc_master_rx_fifo_sink_sink_first;
wire          mgmtsoc_master_rx_fifo_sink_sink_last;
wire   [31:0] mgmtsoc_master_rx_fifo_sink_sink_payload_data;
wire          mgmtsoc_master_rx_fifo_sink_sink_ready;
wire          mgmtsoc_master_rx_fifo_sink_sink_valid;
wire          mgmtsoc_master_rx_fifo_source_source_first;
wire          mgmtsoc_master_rx_fifo_source_source_last;
wire   [31:0] mgmtsoc_master_rx_fifo_source_source_payload_data;
wire          mgmtsoc_master_rx_fifo_source_source_ready;
wire          mgmtsoc_master_rx_fifo_source_source_valid;
wire          mgmtsoc_master_rx_ready;
wire   [31:0] mgmtsoc_master_rxtx_r;
reg           mgmtsoc_master_rxtx_re = 1'd0;
wire   [31:0] mgmtsoc_master_rxtx_w;
reg           mgmtsoc_master_rxtx_we = 1'd0;
wire          mgmtsoc_master_sink_first;
wire          mgmtsoc_master_sink_last;
wire   [31:0] mgmtsoc_master_sink_payload_data;
wire          mgmtsoc_master_sink_ready;
wire          mgmtsoc_master_sink_valid;
wire          mgmtsoc_master_source_first;
wire          mgmtsoc_master_source_last;
wire   [31:0] mgmtsoc_master_source_payload_data;
wire    [5:0] mgmtsoc_master_source_payload_len;
wire    [7:0] mgmtsoc_master_source_payload_mask;
wire    [3:0] mgmtsoc_master_source_payload_width;
wire          mgmtsoc_master_source_ready;
wire          mgmtsoc_master_source_valid;
reg           mgmtsoc_master_status_re = 1'd0;
reg     [1:0] mgmtsoc_master_status_status = 2'd0;
wire          mgmtsoc_master_status_we;
wire          mgmtsoc_master_tx_fifo_pipe_valid_sink_first;
wire          mgmtsoc_master_tx_fifo_pipe_valid_sink_last;
wire   [31:0] mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_data;
wire    [5:0] mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_len;
wire    [7:0] mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_mask;
wire    [3:0] mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_width;
wire          mgmtsoc_master_tx_fifo_pipe_valid_sink_ready;
wire          mgmtsoc_master_tx_fifo_pipe_valid_sink_valid;
reg           mgmtsoc_master_tx_fifo_pipe_valid_source_first = 1'd0;
reg           mgmtsoc_master_tx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] mgmtsoc_master_tx_fifo_pipe_valid_source_payload_data = 32'd0;
reg     [5:0] mgmtsoc_master_tx_fifo_pipe_valid_source_payload_len = 6'd0;
reg     [7:0] mgmtsoc_master_tx_fifo_pipe_valid_source_payload_mask = 8'd0;
reg     [3:0] mgmtsoc_master_tx_fifo_pipe_valid_source_payload_width = 4'd0;
wire          mgmtsoc_master_tx_fifo_pipe_valid_source_ready;
reg           mgmtsoc_master_tx_fifo_pipe_valid_source_valid = 1'd0;
reg           mgmtsoc_master_tx_fifo_sink_sink_first = 1'd0;
reg           mgmtsoc_master_tx_fifo_sink_sink_last = 1'd0;
wire   [31:0] mgmtsoc_master_tx_fifo_sink_sink_payload_data;
wire    [5:0] mgmtsoc_master_tx_fifo_sink_sink_payload_len;
wire    [7:0] mgmtsoc_master_tx_fifo_sink_sink_payload_mask;
wire    [3:0] mgmtsoc_master_tx_fifo_sink_sink_payload_width;
wire          mgmtsoc_master_tx_fifo_sink_sink_ready;
wire          mgmtsoc_master_tx_fifo_sink_sink_valid;
wire          mgmtsoc_master_tx_fifo_source_source_first;
wire          mgmtsoc_master_tx_fifo_source_source_last;
wire   [31:0] mgmtsoc_master_tx_fifo_source_source_payload_data;
wire    [5:0] mgmtsoc_master_tx_fifo_source_source_payload_len;
wire    [7:0] mgmtsoc_master_tx_fifo_source_source_payload_mask;
wire    [3:0] mgmtsoc_master_tx_fifo_source_source_payload_width;
wire          mgmtsoc_master_tx_fifo_source_source_ready;
wire          mgmtsoc_master_tx_fifo_source_source_valid;
wire          mgmtsoc_master_tx_ready;
wire    [3:0] mgmtsoc_master_width;
wire          mgmtsoc_microwatt0;
wire          mgmtsoc_microwatt1;
wire          mgmtsoc_microwatt_core_ext_irq;
reg           mgmtsoc_microwatt_dbus_ack = 1'd0;
wire   [28:0] mgmtsoc_microwatt_dbus_adr;
reg     [1:0] mgmtsoc_microwatt_dbus_bte = 2'd0;
reg     [2:0] mgmtsoc_microwatt_dbus_cti = 3'd0;
wire          mgmtsoc_microwatt_dbus_cyc;
wire   [63:0] mgmtsoc_microwatt_dbus_dat_r;
wire   [63:0] mgmtsoc_microwatt_dbus_dat_w;
wire    [7:0] mgmtsoc_microwatt_dbus_sel;
wire          mgmtsoc_microwatt_dbus_stb;
wire          mgmtsoc_microwatt_dbus_we;
reg           mgmtsoc_microwatt_ibus_ack = 1'd0;
wire   [28:0] mgmtsoc_microwatt_ibus_adr;
reg     [1:0] mgmtsoc_microwatt_ibus_bte = 2'd0;
reg     [2:0] mgmtsoc_microwatt_ibus_cti = 3'd0;
wire          mgmtsoc_microwatt_ibus_cyc;
wire   [63:0] mgmtsoc_microwatt_ibus_dat_r;
wire   [63:0] mgmtsoc_microwatt_ibus_dat_w;
wire    [7:0] mgmtsoc_microwatt_ibus_sel;
wire          mgmtsoc_microwatt_ibus_stb;
wire          mgmtsoc_microwatt_ibus_we;
reg    [15:0] mgmtsoc_microwatt_interrupt = 16'd0;
wire          mgmtsoc_microwatt_reset;
reg    [29:0] mgmtsoc_mmap_burst_adr = 30'd0;
reg    [29:0] mgmtsoc_mmap_burst_adr_litespi_next_value2 = 30'd0;
reg           mgmtsoc_mmap_burst_adr_litespi_next_value_ce2 = 1'd0;
reg           mgmtsoc_mmap_burst_cs = 1'd0;
reg           mgmtsoc_mmap_burst_cs_litespi_next_value0 = 1'd0;
reg           mgmtsoc_mmap_burst_cs_litespi_next_value_ce0 = 1'd0;
reg           mgmtsoc_mmap_bus_ack = 1'd0;
wire   [29:0] mgmtsoc_mmap_bus_adr;
wire    [1:0] mgmtsoc_mmap_bus_bte;
wire    [2:0] mgmtsoc_mmap_bus_cti;
wire          mgmtsoc_mmap_bus_cyc;
reg    [31:0] mgmtsoc_mmap_bus_dat_r = 32'd0;
wire   [31:0] mgmtsoc_mmap_bus_dat_w;
reg           mgmtsoc_mmap_bus_err = 1'd0;
wire    [3:0] mgmtsoc_mmap_bus_sel;
wire          mgmtsoc_mmap_bus_stb;
wire          mgmtsoc_mmap_bus_we;
reg     [1:0] mgmtsoc_mmap_byte_count = 2'd0;
reg     [1:0] mgmtsoc_mmap_byte_count_litespi_next_value1 = 2'd0;
reg           mgmtsoc_mmap_byte_count_litespi_next_value_ce1 = 1'd0;
reg     [8:0] mgmtsoc_mmap_count = 9'd256;
reg           mgmtsoc_mmap_cs = 1'd0;
wire          mgmtsoc_mmap_done;
reg    [31:0] mgmtsoc_mmap_dummy = 32'd57005;
reg           mgmtsoc_mmap_re = 1'd0;
reg           mgmtsoc_mmap_request = 1'd0;
wire          mgmtsoc_mmap_sink_first;
wire          mgmtsoc_mmap_sink_last;
wire   [31:0] mgmtsoc_mmap_sink_payload_data;
reg           mgmtsoc_mmap_sink_ready = 1'd0;
wire          mgmtsoc_mmap_sink_valid;
reg           mgmtsoc_mmap_source_first = 1'd0;
reg           mgmtsoc_mmap_source_last = 1'd0;
reg    [31:0] mgmtsoc_mmap_source_payload_data = 32'd0;
reg     [5:0] mgmtsoc_mmap_source_payload_len = 6'd0;
reg     [7:0] mgmtsoc_mmap_source_payload_mask = 8'd0;
reg     [3:0] mgmtsoc_mmap_source_payload_width = 4'd0;
wire          mgmtsoc_mmap_source_ready;
reg           mgmtsoc_mmap_source_valid = 1'd0;
wire    [7:0] mgmtsoc_mmap_spi_dummy_bits;
reg     [7:0] mgmtsoc_mmap_storage = 8'd0;
reg           mgmtsoc_mmap_wait = 1'd0;
reg           mgmtsoc_pending_r = 1'd0;
reg           mgmtsoc_pending_re = 1'd0;
wire          mgmtsoc_pending_status;
wire          mgmtsoc_pending_we;
wire          mgmtsoc_port_master_internal_port_sink_first;
wire          mgmtsoc_port_master_internal_port_sink_last;
wire   [31:0] mgmtsoc_port_master_internal_port_sink_payload_data;
wire    [5:0] mgmtsoc_port_master_internal_port_sink_payload_len;
wire    [7:0] mgmtsoc_port_master_internal_port_sink_payload_mask;
wire    [3:0] mgmtsoc_port_master_internal_port_sink_payload_width;
wire          mgmtsoc_port_master_internal_port_sink_ready;
wire          mgmtsoc_port_master_internal_port_sink_valid;
wire          mgmtsoc_port_master_internal_port_source_first;
wire          mgmtsoc_port_master_internal_port_source_last;
wire   [31:0] mgmtsoc_port_master_internal_port_source_payload_data;
wire          mgmtsoc_port_master_internal_port_source_ready;
wire          mgmtsoc_port_master_internal_port_source_valid;
wire          mgmtsoc_port_master_request;
wire          mgmtsoc_port_master_user_port_sink_first;
wire          mgmtsoc_port_master_user_port_sink_last;
wire   [31:0] mgmtsoc_port_master_user_port_sink_payload_data;
wire    [5:0] mgmtsoc_port_master_user_port_sink_payload_len;
wire    [7:0] mgmtsoc_port_master_user_port_sink_payload_mask;
wire    [3:0] mgmtsoc_port_master_user_port_sink_payload_width;
wire          mgmtsoc_port_master_user_port_sink_ready;
wire          mgmtsoc_port_master_user_port_sink_valid;
wire          mgmtsoc_port_master_user_port_source_first;
wire          mgmtsoc_port_master_user_port_source_last;
wire   [31:0] mgmtsoc_port_master_user_port_source_payload_data;
wire          mgmtsoc_port_master_user_port_source_ready;
wire          mgmtsoc_port_master_user_port_source_valid;
wire          mgmtsoc_port_mmap_internal_port_sink_first;
wire          mgmtsoc_port_mmap_internal_port_sink_last;
wire   [31:0] mgmtsoc_port_mmap_internal_port_sink_payload_data;
wire    [5:0] mgmtsoc_port_mmap_internal_port_sink_payload_len;
wire    [7:0] mgmtsoc_port_mmap_internal_port_sink_payload_mask;
wire    [3:0] mgmtsoc_port_mmap_internal_port_sink_payload_width;
wire          mgmtsoc_port_mmap_internal_port_sink_ready;
wire          mgmtsoc_port_mmap_internal_port_sink_valid;
wire          mgmtsoc_port_mmap_internal_port_source_first;
wire          mgmtsoc_port_mmap_internal_port_source_last;
wire   [31:0] mgmtsoc_port_mmap_internal_port_source_payload_data;
wire          mgmtsoc_port_mmap_internal_port_source_ready;
wire          mgmtsoc_port_mmap_internal_port_source_valid;
wire          mgmtsoc_port_mmap_user_port_sink_first;
wire          mgmtsoc_port_mmap_user_port_sink_last;
wire   [31:0] mgmtsoc_port_mmap_user_port_sink_payload_data;
wire    [5:0] mgmtsoc_port_mmap_user_port_sink_payload_len;
wire    [7:0] mgmtsoc_port_mmap_user_port_sink_payload_mask;
wire    [3:0] mgmtsoc_port_mmap_user_port_sink_payload_width;
wire          mgmtsoc_port_mmap_user_port_sink_ready;
wire          mgmtsoc_port_mmap_user_port_sink_valid;
wire          mgmtsoc_port_mmap_user_port_source_first;
wire          mgmtsoc_port_mmap_user_port_source_last;
wire   [31:0] mgmtsoc_port_mmap_user_port_source_payload_data;
wire          mgmtsoc_port_mmap_user_port_source_ready;
wire          mgmtsoc_port_mmap_user_port_source_valid;
reg           mgmtsoc_reload_re = 1'd0;
reg    [31:0] mgmtsoc_reload_storage = 32'd0;
reg           mgmtsoc_reset_re = 1'd0;
reg     [1:0] mgmtsoc_reset_storage = 2'd0;
reg           mgmtsoc_scratch_re = 1'd0;
reg    [31:0] mgmtsoc_scratch_storage = 32'd305419896;
reg           mgmtsoc_soc_rst = 1'd0;
reg           mgmtsoc_status_re = 1'd0;
wire          mgmtsoc_status_status;
wire          mgmtsoc_status_we;
reg           mgmtsoc_update_value_re = 1'd0;
reg           mgmtsoc_update_value_storage = 1'd0;
reg    [31:0] mgmtsoc_value = 32'd0;
reg           mgmtsoc_value_re = 1'd0;
reg    [31:0] mgmtsoc_value_status = 32'd0;
wire          mgmtsoc_value_we;
wire          mgmtsoc_zero0;
wire          mgmtsoc_zero1;
wire          mgmtsoc_zero2;
reg           mgmtsoc_zero_clear = 1'd0;
reg           mgmtsoc_zero_pending = 1'd0;
wire          mgmtsoc_zero_status;
wire          mgmtsoc_zero_trigger;
reg           mgmtsoc_zero_trigger_d = 1'd0;
wire          mprj_ack;
wire   [29:0] mprj_adr;
wire    [1:0] mprj_bte;
wire    [2:0] mprj_cti;
wire          mprj_cyc;
wire   [31:0] mprj_dat_r;
wire   [31:0] mprj_dat_w;
reg           mprj_err = 1'd0;
wire    [3:0] mprj_sel;
wire          mprj_stb;
reg           mprj_wb_iena_re = 1'd0;
reg           mprj_wb_iena_storage = 1'd0;
wire          mprj_we;
reg           multiregimpl0_regs0 = 1'd0;
reg           multiregimpl0_regs1 = 1'd0;
reg           multiregimpl100_regs0 = 1'd0;
reg           multiregimpl100_regs1 = 1'd0;
reg           multiregimpl101_regs0 = 1'd0;
reg           multiregimpl101_regs1 = 1'd0;
reg           multiregimpl102_regs0 = 1'd0;
reg           multiregimpl102_regs1 = 1'd0;
reg           multiregimpl103_regs0 = 1'd0;
reg           multiregimpl103_regs1 = 1'd0;
reg           multiregimpl104_regs0 = 1'd0;
reg           multiregimpl104_regs1 = 1'd0;
reg           multiregimpl105_regs0 = 1'd0;
reg           multiregimpl105_regs1 = 1'd0;
reg           multiregimpl106_regs0 = 1'd0;
reg           multiregimpl106_regs1 = 1'd0;
reg           multiregimpl107_regs0 = 1'd0;
reg           multiregimpl107_regs1 = 1'd0;
reg           multiregimpl108_regs0 = 1'd0;
reg           multiregimpl108_regs1 = 1'd0;
reg           multiregimpl109_regs0 = 1'd0;
reg           multiregimpl109_regs1 = 1'd0;
reg           multiregimpl10_regs0 = 1'd0;
reg           multiregimpl10_regs1 = 1'd0;
reg           multiregimpl110_regs0 = 1'd0;
reg           multiregimpl110_regs1 = 1'd0;
reg           multiregimpl111_regs0 = 1'd0;
reg           multiregimpl111_regs1 = 1'd0;
reg           multiregimpl112_regs0 = 1'd0;
reg           multiregimpl112_regs1 = 1'd0;
reg           multiregimpl113_regs0 = 1'd0;
reg           multiregimpl113_regs1 = 1'd0;
reg           multiregimpl114_regs0 = 1'd0;
reg           multiregimpl114_regs1 = 1'd0;
reg           multiregimpl115_regs0 = 1'd0;
reg           multiregimpl115_regs1 = 1'd0;
reg           multiregimpl116_regs0 = 1'd0;
reg           multiregimpl116_regs1 = 1'd0;
reg           multiregimpl117_regs0 = 1'd0;
reg           multiregimpl117_regs1 = 1'd0;
reg           multiregimpl118_regs0 = 1'd0;
reg           multiregimpl118_regs1 = 1'd0;
reg           multiregimpl119_regs0 = 1'd0;
reg           multiregimpl119_regs1 = 1'd0;
reg           multiregimpl11_regs0 = 1'd0;
reg           multiregimpl11_regs1 = 1'd0;
reg           multiregimpl120_regs0 = 1'd0;
reg           multiregimpl120_regs1 = 1'd0;
reg           multiregimpl121_regs0 = 1'd0;
reg           multiregimpl121_regs1 = 1'd0;
reg           multiregimpl122_regs0 = 1'd0;
reg           multiregimpl122_regs1 = 1'd0;
reg           multiregimpl123_regs0 = 1'd0;
reg           multiregimpl123_regs1 = 1'd0;
reg           multiregimpl124_regs0 = 1'd0;
reg           multiregimpl124_regs1 = 1'd0;
reg           multiregimpl125_regs0 = 1'd0;
reg           multiregimpl125_regs1 = 1'd0;
reg           multiregimpl126_regs0 = 1'd0;
reg           multiregimpl126_regs1 = 1'd0;
reg           multiregimpl127_regs0 = 1'd0;
reg           multiregimpl127_regs1 = 1'd0;
reg           multiregimpl128_regs0 = 1'd0;
reg           multiregimpl128_regs1 = 1'd0;
reg           multiregimpl129_regs0 = 1'd0;
reg           multiregimpl129_regs1 = 1'd0;
reg           multiregimpl12_regs0 = 1'd0;
reg           multiregimpl12_regs1 = 1'd0;
reg           multiregimpl130_regs0 = 1'd0;
reg           multiregimpl130_regs1 = 1'd0;
reg           multiregimpl131_regs0 = 1'd0;
reg           multiregimpl131_regs1 = 1'd0;
reg           multiregimpl132_regs0 = 1'd0;
reg           multiregimpl132_regs1 = 1'd0;
reg           multiregimpl133_regs0 = 1'd0;
reg           multiregimpl133_regs1 = 1'd0;
reg           multiregimpl134_regs0 = 1'd0;
reg           multiregimpl134_regs1 = 1'd0;
reg           multiregimpl135_regs0 = 1'd0;
reg           multiregimpl135_regs1 = 1'd0;
reg           multiregimpl136_regs0 = 1'd0;
reg           multiregimpl136_regs1 = 1'd0;
reg           multiregimpl13_regs0 = 1'd0;
reg           multiregimpl13_regs1 = 1'd0;
reg           multiregimpl14_regs0 = 1'd0;
reg           multiregimpl14_regs1 = 1'd0;
reg           multiregimpl15_regs0 = 1'd0;
reg           multiregimpl15_regs1 = 1'd0;
reg           multiregimpl16_regs0 = 1'd0;
reg           multiregimpl16_regs1 = 1'd0;
reg           multiregimpl17_regs0 = 1'd0;
reg           multiregimpl17_regs1 = 1'd0;
reg           multiregimpl18_regs0 = 1'd0;
reg           multiregimpl18_regs1 = 1'd0;
reg           multiregimpl19_regs0 = 1'd0;
reg           multiregimpl19_regs1 = 1'd0;
reg           multiregimpl1_regs0 = 1'd0;
reg           multiregimpl1_regs1 = 1'd0;
reg           multiregimpl20_regs0 = 1'd0;
reg           multiregimpl20_regs1 = 1'd0;
reg           multiregimpl21_regs0 = 1'd0;
reg           multiregimpl21_regs1 = 1'd0;
reg           multiregimpl22_regs0 = 1'd0;
reg           multiregimpl22_regs1 = 1'd0;
reg           multiregimpl23_regs0 = 1'd0;
reg           multiregimpl23_regs1 = 1'd0;
reg           multiregimpl24_regs0 = 1'd0;
reg           multiregimpl24_regs1 = 1'd0;
reg           multiregimpl25_regs0 = 1'd0;
reg           multiregimpl25_regs1 = 1'd0;
reg           multiregimpl26_regs0 = 1'd0;
reg           multiregimpl26_regs1 = 1'd0;
reg           multiregimpl27_regs0 = 1'd0;
reg           multiregimpl27_regs1 = 1'd0;
reg           multiregimpl28_regs0 = 1'd0;
reg           multiregimpl28_regs1 = 1'd0;
reg           multiregimpl29_regs0 = 1'd0;
reg           multiregimpl29_regs1 = 1'd0;
reg           multiregimpl2_regs0 = 1'd0;
reg           multiregimpl2_regs1 = 1'd0;
reg           multiregimpl30_regs0 = 1'd0;
reg           multiregimpl30_regs1 = 1'd0;
reg           multiregimpl31_regs0 = 1'd0;
reg           multiregimpl31_regs1 = 1'd0;
reg           multiregimpl32_regs0 = 1'd0;
reg           multiregimpl32_regs1 = 1'd0;
reg           multiregimpl33_regs0 = 1'd0;
reg           multiregimpl33_regs1 = 1'd0;
reg           multiregimpl34_regs0 = 1'd0;
reg           multiregimpl34_regs1 = 1'd0;
reg           multiregimpl35_regs0 = 1'd0;
reg           multiregimpl35_regs1 = 1'd0;
reg           multiregimpl36_regs0 = 1'd0;
reg           multiregimpl36_regs1 = 1'd0;
reg           multiregimpl37_regs0 = 1'd0;
reg           multiregimpl37_regs1 = 1'd0;
reg           multiregimpl38_regs0 = 1'd0;
reg           multiregimpl38_regs1 = 1'd0;
reg           multiregimpl39_regs0 = 1'd0;
reg           multiregimpl39_regs1 = 1'd0;
reg           multiregimpl3_regs0 = 1'd0;
reg           multiregimpl3_regs1 = 1'd0;
reg           multiregimpl40_regs0 = 1'd0;
reg           multiregimpl40_regs1 = 1'd0;
reg           multiregimpl41_regs0 = 1'd0;
reg           multiregimpl41_regs1 = 1'd0;
reg           multiregimpl42_regs0 = 1'd0;
reg           multiregimpl42_regs1 = 1'd0;
reg           multiregimpl43_regs0 = 1'd0;
reg           multiregimpl43_regs1 = 1'd0;
reg           multiregimpl44_regs0 = 1'd0;
reg           multiregimpl44_regs1 = 1'd0;
reg           multiregimpl45_regs0 = 1'd0;
reg           multiregimpl45_regs1 = 1'd0;
reg           multiregimpl46_regs0 = 1'd0;
reg           multiregimpl46_regs1 = 1'd0;
reg           multiregimpl47_regs0 = 1'd0;
reg           multiregimpl47_regs1 = 1'd0;
reg           multiregimpl48_regs0 = 1'd0;
reg           multiregimpl48_regs1 = 1'd0;
reg           multiregimpl49_regs0 = 1'd0;
reg           multiregimpl49_regs1 = 1'd0;
reg           multiregimpl4_regs0 = 1'd0;
reg           multiregimpl4_regs1 = 1'd0;
reg           multiregimpl50_regs0 = 1'd0;
reg           multiregimpl50_regs1 = 1'd0;
reg           multiregimpl51_regs0 = 1'd0;
reg           multiregimpl51_regs1 = 1'd0;
reg           multiregimpl52_regs0 = 1'd0;
reg           multiregimpl52_regs1 = 1'd0;
reg           multiregimpl53_regs0 = 1'd0;
reg           multiregimpl53_regs1 = 1'd0;
reg           multiregimpl54_regs0 = 1'd0;
reg           multiregimpl54_regs1 = 1'd0;
reg           multiregimpl55_regs0 = 1'd0;
reg           multiregimpl55_regs1 = 1'd0;
reg           multiregimpl56_regs0 = 1'd0;
reg           multiregimpl56_regs1 = 1'd0;
reg           multiregimpl57_regs0 = 1'd0;
reg           multiregimpl57_regs1 = 1'd0;
reg           multiregimpl58_regs0 = 1'd0;
reg           multiregimpl58_regs1 = 1'd0;
reg           multiregimpl59_regs0 = 1'd0;
reg           multiregimpl59_regs1 = 1'd0;
reg           multiregimpl5_regs0 = 1'd0;
reg           multiregimpl5_regs1 = 1'd0;
reg           multiregimpl60_regs0 = 1'd0;
reg           multiregimpl60_regs1 = 1'd0;
reg           multiregimpl61_regs0 = 1'd0;
reg           multiregimpl61_regs1 = 1'd0;
reg           multiregimpl62_regs0 = 1'd0;
reg           multiregimpl62_regs1 = 1'd0;
reg           multiregimpl63_regs0 = 1'd0;
reg           multiregimpl63_regs1 = 1'd0;
reg           multiregimpl64_regs0 = 1'd0;
reg           multiregimpl64_regs1 = 1'd0;
reg           multiregimpl65_regs0 = 1'd0;
reg           multiregimpl65_regs1 = 1'd0;
reg           multiregimpl66_regs0 = 1'd0;
reg           multiregimpl66_regs1 = 1'd0;
reg           multiregimpl67_regs0 = 1'd0;
reg           multiregimpl67_regs1 = 1'd0;
reg           multiregimpl68_regs0 = 1'd0;
reg           multiregimpl68_regs1 = 1'd0;
reg           multiregimpl69_regs0 = 1'd0;
reg           multiregimpl69_regs1 = 1'd0;
reg           multiregimpl6_regs0 = 1'd0;
reg           multiregimpl6_regs1 = 1'd0;
reg           multiregimpl70_regs0 = 1'd0;
reg           multiregimpl70_regs1 = 1'd0;
reg           multiregimpl71_regs0 = 1'd0;
reg           multiregimpl71_regs1 = 1'd0;
reg           multiregimpl72_regs0 = 1'd0;
reg           multiregimpl72_regs1 = 1'd0;
reg           multiregimpl73_regs0 = 1'd0;
reg           multiregimpl73_regs1 = 1'd0;
reg           multiregimpl74_regs0 = 1'd0;
reg           multiregimpl74_regs1 = 1'd0;
reg           multiregimpl75_regs0 = 1'd0;
reg           multiregimpl75_regs1 = 1'd0;
reg           multiregimpl76_regs0 = 1'd0;
reg           multiregimpl76_regs1 = 1'd0;
reg           multiregimpl77_regs0 = 1'd0;
reg           multiregimpl77_regs1 = 1'd0;
reg           multiregimpl78_regs0 = 1'd0;
reg           multiregimpl78_regs1 = 1'd0;
reg           multiregimpl79_regs0 = 1'd0;
reg           multiregimpl79_regs1 = 1'd0;
reg           multiregimpl7_regs0 = 1'd0;
reg           multiregimpl7_regs1 = 1'd0;
reg           multiregimpl80_regs0 = 1'd0;
reg           multiregimpl80_regs1 = 1'd0;
reg           multiregimpl81_regs0 = 1'd0;
reg           multiregimpl81_regs1 = 1'd0;
reg           multiregimpl82_regs0 = 1'd0;
reg           multiregimpl82_regs1 = 1'd0;
reg           multiregimpl83_regs0 = 1'd0;
reg           multiregimpl83_regs1 = 1'd0;
reg           multiregimpl84_regs0 = 1'd0;
reg           multiregimpl84_regs1 = 1'd0;
reg           multiregimpl85_regs0 = 1'd0;
reg           multiregimpl85_regs1 = 1'd0;
reg           multiregimpl86_regs0 = 1'd0;
reg           multiregimpl86_regs1 = 1'd0;
reg           multiregimpl87_regs0 = 1'd0;
reg           multiregimpl87_regs1 = 1'd0;
reg           multiregimpl88_regs0 = 1'd0;
reg           multiregimpl88_regs1 = 1'd0;
reg           multiregimpl89_regs0 = 1'd0;
reg           multiregimpl89_regs1 = 1'd0;
reg           multiregimpl8_regs0 = 1'd0;
reg           multiregimpl8_regs1 = 1'd0;
reg           multiregimpl90_regs0 = 1'd0;
reg           multiregimpl90_regs1 = 1'd0;
reg           multiregimpl91_regs0 = 1'd0;
reg           multiregimpl91_regs1 = 1'd0;
reg           multiregimpl92_regs0 = 1'd0;
reg           multiregimpl92_regs1 = 1'd0;
reg           multiregimpl93_regs0 = 1'd0;
reg           multiregimpl93_regs1 = 1'd0;
reg           multiregimpl94_regs0 = 1'd0;
reg           multiregimpl94_regs1 = 1'd0;
reg           multiregimpl95_regs0 = 1'd0;
reg           multiregimpl95_regs1 = 1'd0;
reg           multiregimpl96_regs0 = 1'd0;
reg           multiregimpl96_regs1 = 1'd0;
reg           multiregimpl97_regs0 = 1'd0;
reg           multiregimpl97_regs1 = 1'd0;
reg           multiregimpl98_regs0 = 1'd0;
reg           multiregimpl98_regs1 = 1'd0;
reg           multiregimpl99_regs0 = 1'd0;
reg           multiregimpl99_regs1 = 1'd0;
reg           multiregimpl9_regs0 = 1'd0;
reg           multiregimpl9_regs1 = 1'd0;
wire          por_clk;
wire          re;
wire    [2:0] request;
reg           rs232phy_rs232phyrx_next_state = 1'd0;
reg           rs232phy_rs232phyrx_state = 1'd0;
reg           rs232phy_rs232phytx_next_state = 1'd0;
reg           rs232phy_rs232phytx_state = 1'd0;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_2;
wire          sdrio_clk_3;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [7:0] slave_sel = 8'd0;
reg     [7:0] slave_sel_r = 8'd0;
reg           spi_enabled_re = 1'd0;
reg           spi_enabled_storage = 1'd0;
wire   [15:0] spi_master_clk_divider0;
reg    [15:0] spi_master_clk_divider1 = 16'd0;
reg           spi_master_clk_enable = 1'd0;
wire          spi_master_clk_fall;
wire          spi_master_clk_rise;
reg           spi_master_control_re = 1'd0;
reg    [15:0] spi_master_control_storage = 16'd0;
reg     [2:0] spi_master_count = 3'd0;
reg     [2:0] spi_master_count_spimaster_next_value = 3'd0;
reg           spi_master_count_spimaster_next_value_ce = 1'd0;
wire          spi_master_cs;
wire          spi_master_cs_mode;
reg           spi_master_cs_re = 1'd0;
reg    [16:0] spi_master_cs_storage = 17'd1;
reg           spi_master_done0 = 1'd0;
wire          spi_master_done1;
reg           spi_master_irq = 1'd0;
wire    [7:0] spi_master_length0;
wire    [7:0] spi_master_length1;
wire          spi_master_loopback;
reg           spi_master_loopback_re = 1'd0;
reg           spi_master_loopback_storage = 1'd0;
reg     [7:0] spi_master_miso = 8'd0;
reg     [7:0] spi_master_miso_data = 8'd0;
reg           spi_master_miso_latch = 1'd0;
reg           spi_master_miso_re = 1'd0;
wire    [7:0] spi_master_miso_status;
wire          spi_master_miso_we;
wire          spi_master_mode0;
wire          spi_master_mode1;
wire          spi_master_mode2;
wire    [7:0] spi_master_mosi;
reg     [7:0] spi_master_mosi_data = 8'd0;
reg           spi_master_mosi_latch = 1'd0;
reg           spi_master_mosi_re = 1'd0;
reg     [2:0] spi_master_mosi_sel = 3'd0;
reg     [7:0] spi_master_mosi_storage = 8'd0;
wire          spi_master_sel;
wire          spi_master_start0;
reg           spi_master_start1 = 1'd0;
reg           spi_master_status_re = 1'd0;
reg     [1:0] spi_master_status_status = 2'd0;
wire          spi_master_status_we;
reg           spi_master_xfer_enable = 1'd0;
reg     [1:0] spimaster_next_state = 2'd0;
reg           spimaster_re = 1'd0;
reg     [1:0] spimaster_state = 2'd0;
reg    [15:0] spimaster_storage = 16'd100;
reg           sync_array_muxed = 1'd0;
wire          sys_clk;
wire          sys_rst;
reg           sys_uart_rx = 1'd0;
reg           sys_uart_tx = 1'd1;
reg           sys_uart_tx_rs232phy_rs232phytx_next_value1 = 1'd0;
reg           sys_uart_tx_rs232phy_rs232phytx_next_value_ce1 = 1'd0;
reg           uart_enable_re = 1'd0;
reg     [1:0] uart_enable_storage = 2'd0;
wire          uart_enabled_o;
reg           uart_enabled_re = 1'd0;
reg           uart_enabled_storage = 1'd0;
wire          uart_irq;
reg     [1:0] uart_pending_r = 2'd0;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
reg     [3:0] uart_phy_rx_count = 4'd0;
reg     [3:0] uart_phy_rx_count_rs232phy_rs232phyrx_next_value0 = 4'd0;
reg           uart_phy_rx_count_rs232phy_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] uart_phy_rx_data = 8'd0;
reg     [7:0] uart_phy_rx_data_rs232phy_rs232phyrx_next_value1 = 8'd0;
reg           uart_phy_rx_data_rs232phy_rs232phyrx_next_value_ce1 = 1'd0;
reg           uart_phy_rx_enable = 1'd0;
reg    [31:0] uart_phy_rx_phase = 32'd0;
wire          uart_phy_rx_rx;
reg           uart_phy_rx_rx_d = 1'd0;
reg           uart_phy_rx_source_first = 1'd0;
reg           uart_phy_rx_source_last = 1'd0;
reg     [7:0] uart_phy_rx_source_payload_data = 8'd0;
wire          uart_phy_rx_source_ready;
reg           uart_phy_rx_source_valid = 1'd0;
reg           uart_phy_rx_tick = 1'd0;
reg     [3:0] uart_phy_tx_count = 4'd0;
reg     [3:0] uart_phy_tx_count_rs232phy_rs232phytx_next_value0 = 4'd0;
reg           uart_phy_tx_count_rs232phy_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] uart_phy_tx_data = 8'd0;
reg     [7:0] uart_phy_tx_data_rs232phy_rs232phytx_next_value2 = 8'd0;
reg           uart_phy_tx_data_rs232phy_rs232phytx_next_value_ce2 = 1'd0;
reg           uart_phy_tx_enable = 1'd0;
reg    [31:0] uart_phy_tx_phase = 32'd0;
wire          uart_phy_tx_sink_first;
wire          uart_phy_tx_sink_last;
wire    [7:0] uart_phy_tx_sink_payload_data;
reg           uart_phy_tx_sink_ready = 1'd0;
wire          uart_phy_tx_sink_valid;
reg           uart_phy_tx_tick = 1'd0;
wire          uart_rx0;
wire          uart_rx1;
wire          uart_rx2;
reg           uart_rx_clear = 1'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
wire          uart_rx_fifo_do_read;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
wire    [4:0] uart_rx_fifo_level1;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
reg           uart_rx_fifo_replace = 1'd0;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_valid;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_wrport_we;
wire          uart_rx_pending;
wire          uart_rx_status;
wire          uart_rx_trigger;
reg           uart_rxempty_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_w;
reg           uart_rxtx_we = 1'd0;
reg           uart_status_re = 1'd0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
wire          uart_tx0;
wire          uart_tx1;
wire          uart_tx2;
reg           uart_tx_clear = 1'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
wire          uart_tx_fifo_do_read;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
wire    [4:0] uart_tx_fifo_level1;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_sink_ready;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_valid;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_wrport_we;
wire          uart_tx_pending;
wire          uart_tx_status;
wire          uart_tx_trigger;
reg           uart_txempty_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txfull_re = 1'd0;
wire          uart_txfull_status;
wire          uart_txfull_we;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_valid;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_uart_source_ready;
wire          uart_uart_source_valid;
reg     [2:0] uartwishbonebridge_next_state = 3'd0;
reg           uartwishbonebridge_rs232phyrx_next_state = 1'd0;
reg           uartwishbonebridge_rs232phyrx_state = 1'd0;
reg           uartwishbonebridge_rs232phytx_next_state = 1'd0;
reg           uartwishbonebridge_rs232phytx_state = 1'd0;
reg     [2:0] uartwishbonebridge_state = 3'd0;
reg           user_irq_ena_re = 1'd0;
reg     [2:0] user_irq_ena_storage = 3'd0;
wire          wait_1;
wire          we;
reg           wishbone2csr_next_state = 1'd0;
reg           wishbone2csr_state = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign core_rst = (~core_rstn);
assign mgmtsoc_microwatt_reset = (mgmtsoc_soc_rst | mgmtsoc_cpu_rst);
assign spi_sdoenb = (~spi_cs_n);
assign mprj_cyc_o = mprj_cyc;
assign mprj_stb_o = mprj_stb;
assign mprj_we_o = mprj_we;
assign mprj_sel_o = mprj_sel;
always @(*) begin
    mprj_adr_o <= 32'd0;
    mprj_adr_o[31:2] <= mprj_adr;
    mprj_adr_o[1:0] <= 1'd0;
end
assign mprj_dat_r = mprj_dat_i;
assign mprj_dat_o = mprj_dat_w;
assign mprj_ack = mprj_ack_i;
assign hk_stb_o = hk_stb;
assign hk_cyc_o = hk_cyc;
assign hk_dat_r = hk_dat_i;
assign hk_ack = hk_ack_i;
assign debug_out = 1'd0;
always @(*) begin
    sys_uart_rx <= 1'd0;
    if ((debug_in == 1'd1)) begin
    end else begin
        sys_uart_rx <= serial_rx;
    end
end
always @(*) begin
    serial_tx <= 1'd0;
    if ((debug_in == 1'd1)) begin
        serial_tx <= dbg_uart_dbg_uart_tx;
    end else begin
        serial_tx <= sys_uart_tx;
    end
end
always @(*) begin
    dbg_uart_dbg_uart_rx <= 1'd0;
    if ((debug_in == 1'd1)) begin
        dbg_uart_dbg_uart_rx <= serial_rx;
    end else begin
    end
end
assign uart_enabled = (uart_enabled_o | debug_in);
assign qspi_enabled = 1'd0;
assign trap = 1'd0;
assign clk_out = clk_in;
assign resetn_out = resetn_in;
assign serial_load_out = serial_load_in;
assign serial_data_2_out = serial_data_2_in;
assign serial_resetn_out = serial_resetn_in;
assign serial_clock_out = serial_clock_in;
assign rstb_l_out = rstb_l_in;
assign por_l_out = por_l_in;
assign porb_h_out = porb_h_in;
assign mgmtsoc_bus_error = error;
always @(*) begin
    mgmtsoc_microwatt_interrupt <= 16'd0;
    mgmtsoc_microwatt_interrupt[0] <= mgmtsoc_irq;
    mgmtsoc_microwatt_interrupt[1] <= uart_irq;
    mgmtsoc_microwatt_interrupt[2] <= gpioin0_gpioin0_irq;
    mgmtsoc_microwatt_interrupt[3] <= gpioin1_gpioin1_irq;
    mgmtsoc_microwatt_interrupt[4] <= gpioin2_gpioin2_irq;
    mgmtsoc_microwatt_interrupt[5] <= gpioin3_gpioin3_irq;
    mgmtsoc_microwatt_interrupt[6] <= gpioin4_gpioin4_irq;
    mgmtsoc_microwatt_interrupt[7] <= gpioin5_gpioin5_irq;
end
assign sys_clk = core_clk;
assign por_clk = core_clk;
assign sys_rst = int_rst;
assign mgmtsoc_converter0_done = (mgmtsoc_converter0_count == 1'd1);
always @(*) begin
    mgmtsoc_interface0_adapted_interface_cti <= 3'd0;
    case (mgmtsoc_microwatt_ibus_cti)
        2'd2: begin
            mgmtsoc_interface0_adapted_interface_cti <= 2'd2;
        end
        3'd7: begin
            mgmtsoc_interface0_adapted_interface_cti <= (mgmtsoc_converter0_done ? 3'd7 : 2'd2);
        end
        default: begin
            mgmtsoc_interface0_adapted_interface_cti <= 1'd0;
        end
    endcase
    if ((mgmtsoc_microwatt_ibus_bte != 1'd0)) begin
        mgmtsoc_interface0_adapted_interface_cti <= 1'd0;
    end
end
always @(*) begin
    mgmtsoc_microwatt_ibus_ack <= 1'd0;
    if ((mgmtsoc_microwatt_ibus_stb & mgmtsoc_microwatt_ibus_cyc)) begin
        if ((mgmtsoc_interface0_adapted_interface_ack | mgmtsoc_converter0_skip)) begin
            mgmtsoc_microwatt_ibus_ack <= mgmtsoc_converter0_done;
        end
    end
end
always @(*) begin
    mgmtsoc_converter0_skip <= 1'd0;
    if ((mgmtsoc_microwatt_ibus_stb & mgmtsoc_microwatt_ibus_cyc)) begin
        mgmtsoc_converter0_skip <= ((mgmtsoc_interface0_adapted_interface_sel == 1'd0) & (mgmtsoc_interface0_adapted_interface_cti == 1'd0));
    end
end
always @(*) begin
    mgmtsoc_interface0_adapted_interface_cyc <= 1'd0;
    if ((mgmtsoc_microwatt_ibus_stb & mgmtsoc_microwatt_ibus_cyc)) begin
        mgmtsoc_interface0_adapted_interface_cyc <= (~mgmtsoc_converter0_skip);
    end
end
always @(*) begin
    mgmtsoc_interface0_adapted_interface_stb <= 1'd0;
    if ((mgmtsoc_microwatt_ibus_stb & mgmtsoc_microwatt_ibus_cyc)) begin
        mgmtsoc_interface0_adapted_interface_stb <= (~mgmtsoc_converter0_skip);
    end
end
always @(*) begin
    mgmtsoc_interface0_adapted_interface_we <= 1'd0;
    if ((mgmtsoc_microwatt_ibus_stb & mgmtsoc_microwatt_ibus_cyc)) begin
        mgmtsoc_interface0_adapted_interface_we <= mgmtsoc_microwatt_ibus_we;
    end
end
assign mgmtsoc_interface0_adapted_interface_adr = {mgmtsoc_microwatt_ibus_adr, mgmtsoc_converter0_count};
always @(*) begin
    mgmtsoc_interface0_adapted_interface_dat_w <= 32'd0;
    case (mgmtsoc_converter0_count)
        1'd0: begin
            mgmtsoc_interface0_adapted_interface_dat_w <= mgmtsoc_microwatt_ibus_dat_w;
        end
        1'd1: begin
            mgmtsoc_interface0_adapted_interface_dat_w <= mgmtsoc_microwatt_ibus_dat_w[63:32];
        end
    endcase
end
always @(*) begin
    mgmtsoc_interface0_adapted_interface_sel <= 4'd0;
    case (mgmtsoc_converter0_count)
        1'd0: begin
            mgmtsoc_interface0_adapted_interface_sel <= mgmtsoc_microwatt_ibus_sel;
        end
        1'd1: begin
            mgmtsoc_interface0_adapted_interface_sel <= mgmtsoc_microwatt_ibus_sel[7:4];
        end
    endcase
end
assign mgmtsoc_microwatt_ibus_dat_r = {mgmtsoc_interface0_adapted_interface_dat_r, mgmtsoc_converter0_dat_r[63:32]};
assign mgmtsoc_converter1_done = (mgmtsoc_converter1_count == 1'd1);
always @(*) begin
    mgmtsoc_interface1_adapted_interface_cti <= 3'd0;
    case (mgmtsoc_microwatt_dbus_cti)
        2'd2: begin
            mgmtsoc_interface1_adapted_interface_cti <= 2'd2;
        end
        3'd7: begin
            mgmtsoc_interface1_adapted_interface_cti <= (mgmtsoc_converter1_done ? 3'd7 : 2'd2);
        end
        default: begin
            mgmtsoc_interface1_adapted_interface_cti <= 1'd0;
        end
    endcase
    if ((mgmtsoc_microwatt_dbus_bte != 1'd0)) begin
        mgmtsoc_interface1_adapted_interface_cti <= 1'd0;
    end
end
always @(*) begin
    mgmtsoc_interface1_adapted_interface_stb <= 1'd0;
    if ((mgmtsoc_microwatt_dbus_stb & mgmtsoc_microwatt_dbus_cyc)) begin
        mgmtsoc_interface1_adapted_interface_stb <= (~mgmtsoc_converter1_skip);
    end
end
always @(*) begin
    mgmtsoc_interface1_adapted_interface_we <= 1'd0;
    if ((mgmtsoc_microwatt_dbus_stb & mgmtsoc_microwatt_dbus_cyc)) begin
        mgmtsoc_interface1_adapted_interface_we <= mgmtsoc_microwatt_dbus_we;
    end
end
always @(*) begin
    mgmtsoc_converter1_skip <= 1'd0;
    if ((mgmtsoc_microwatt_dbus_stb & mgmtsoc_microwatt_dbus_cyc)) begin
        mgmtsoc_converter1_skip <= ((mgmtsoc_interface1_adapted_interface_sel == 1'd0) & (mgmtsoc_interface1_adapted_interface_cti == 1'd0));
    end
end
always @(*) begin
    mgmtsoc_microwatt_dbus_ack <= 1'd0;
    if ((mgmtsoc_microwatt_dbus_stb & mgmtsoc_microwatt_dbus_cyc)) begin
        if ((mgmtsoc_interface1_adapted_interface_ack | mgmtsoc_converter1_skip)) begin
            mgmtsoc_microwatt_dbus_ack <= mgmtsoc_converter1_done;
        end
    end
end
always @(*) begin
    mgmtsoc_interface1_adapted_interface_cyc <= 1'd0;
    if ((mgmtsoc_microwatt_dbus_stb & mgmtsoc_microwatt_dbus_cyc)) begin
        mgmtsoc_interface1_adapted_interface_cyc <= (~mgmtsoc_converter1_skip);
    end
end
assign mgmtsoc_interface1_adapted_interface_adr = {mgmtsoc_microwatt_dbus_adr, mgmtsoc_converter1_count};
always @(*) begin
    mgmtsoc_interface1_adapted_interface_dat_w <= 32'd0;
    case (mgmtsoc_converter1_count)
        1'd0: begin
            mgmtsoc_interface1_adapted_interface_dat_w <= mgmtsoc_microwatt_dbus_dat_w;
        end
        1'd1: begin
            mgmtsoc_interface1_adapted_interface_dat_w <= mgmtsoc_microwatt_dbus_dat_w[63:32];
        end
    endcase
end
always @(*) begin
    mgmtsoc_interface1_adapted_interface_sel <= 4'd0;
    case (mgmtsoc_converter1_count)
        1'd0: begin
            mgmtsoc_interface1_adapted_interface_sel <= mgmtsoc_microwatt_dbus_sel;
        end
        1'd1: begin
            mgmtsoc_interface1_adapted_interface_sel <= mgmtsoc_microwatt_dbus_sel[7:4];
        end
    endcase
end
assign mgmtsoc_microwatt_dbus_dat_r = {mgmtsoc_interface1_adapted_interface_dat_r, mgmtsoc_converter1_dat_r[63:32]};
assign shared_adr = comb_array_muxed0;
assign shared_dat_w = comb_array_muxed1;
assign shared_sel = comb_array_muxed2;
assign shared_cyc = comb_array_muxed3;
assign shared_stb = comb_array_muxed4;
assign shared_we = comb_array_muxed5;
assign shared_cti = comb_array_muxed6;
assign shared_bte = comb_array_muxed7;
assign mgmtsoc_interface0_adapted_interface_dat_r = shared_dat_r;
assign mgmtsoc_interface1_adapted_interface_dat_r = shared_dat_r;
assign dbg_uart_wishbone_dat_r = shared_dat_r;
assign mgmtsoc_interface0_adapted_interface_ack = (shared_ack & (grant == 1'd0));
assign mgmtsoc_interface1_adapted_interface_ack = (shared_ack & (grant == 1'd1));
assign dbg_uart_wishbone_ack = (shared_ack & (grant == 2'd2));
assign mgmtsoc_interface0_adapted_interface_err = (shared_err & (grant == 1'd0));
assign mgmtsoc_interface1_adapted_interface_err = (shared_err & (grant == 1'd1));
assign dbg_uart_wishbone_err = (shared_err & (grant == 2'd2));
assign request = {dbg_uart_wishbone_cyc, mgmtsoc_interface1_adapted_interface_cyc, mgmtsoc_interface0_adapted_interface_cyc};
always @(*) begin
    slave_sel <= 8'd0;
    slave_sel[0] <= (shared_adr[29:10] == 20'd835568);
    slave_sel[1] <= (shared_adr[29:10] == 20'd835569);
    slave_sel[2] <= (shared_adr[29:8] == 1'd0);
    slave_sel[3] <= (shared_adr[29:7] == 2'd2);
    slave_sel[4] <= (shared_adr[29:22] == 5'd16);
    slave_sel[5] <= (shared_adr[29:26] == 2'd3);
    slave_sel[6] <= (shared_adr[29:20] == 8'd152);
    slave_sel[7] <= (shared_adr[29:14] == 16'd51200);
end
assign mgmtsoc_icp_bus_adr = shared_adr;
assign mgmtsoc_icp_bus_dat_w = shared_dat_w;
assign mgmtsoc_icp_bus_sel = shared_sel;
assign mgmtsoc_icp_bus_stb = shared_stb;
assign mgmtsoc_icp_bus_we = shared_we;
assign mgmtsoc_icp_bus_cti = shared_cti;
assign mgmtsoc_icp_bus_bte = shared_bte;
assign mgmtsoc_ics_bus_adr = shared_adr;
assign mgmtsoc_ics_bus_dat_w = shared_dat_w;
assign mgmtsoc_ics_bus_sel = shared_sel;
assign mgmtsoc_ics_bus_stb = shared_stb;
assign mgmtsoc_ics_bus_we = shared_we;
assign mgmtsoc_ics_bus_cti = shared_cti;
assign mgmtsoc_ics_bus_bte = shared_bte;
assign dff_bus_adr = shared_adr;
assign dff_bus_dat_w = shared_dat_w;
assign dff_bus_sel = shared_sel;
assign dff_bus_stb = shared_stb;
assign dff_bus_we = shared_we;
assign dff_bus_cti = shared_cti;
assign dff_bus_bte = shared_bte;
assign dff2_bus_adr = shared_adr;
assign dff2_bus_dat_w = shared_dat_w;
assign dff2_bus_sel = shared_sel;
assign dff2_bus_stb = shared_stb;
assign dff2_bus_we = shared_we;
assign dff2_bus_cti = shared_cti;
assign dff2_bus_bte = shared_bte;
assign mgmtsoc_mmap_bus_adr = shared_adr;
assign mgmtsoc_mmap_bus_dat_w = shared_dat_w;
assign mgmtsoc_mmap_bus_sel = shared_sel;
assign mgmtsoc_mmap_bus_stb = shared_stb;
assign mgmtsoc_mmap_bus_we = shared_we;
assign mgmtsoc_mmap_bus_cti = shared_cti;
assign mgmtsoc_mmap_bus_bte = shared_bte;
assign mprj_adr = shared_adr;
assign mprj_dat_w = shared_dat_w;
assign mprj_sel = shared_sel;
assign mprj_stb = shared_stb;
assign mprj_we = shared_we;
assign mprj_cti = shared_cti;
assign mprj_bte = shared_bte;
assign hk_adr = shared_adr;
assign hk_dat_w = shared_dat_w;
assign hk_sel = shared_sel;
assign hk_stb = shared_stb;
assign hk_we = shared_we;
assign hk_cti = shared_cti;
assign hk_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign mgmtsoc_icp_bus_cyc = (shared_cyc & slave_sel[0]);
assign mgmtsoc_ics_bus_cyc = (shared_cyc & slave_sel[1]);
assign dff_bus_cyc = (shared_cyc & slave_sel[2]);
assign dff2_bus_cyc = (shared_cyc & slave_sel[3]);
assign mgmtsoc_mmap_bus_cyc = (shared_cyc & slave_sel[4]);
assign mprj_cyc = (shared_cyc & slave_sel[5]);
assign hk_cyc = (shared_cyc & slave_sel[6]);
assign interface0_cyc = (shared_cyc & slave_sel[7]);
always @(*) begin
    shared_ack <= 1'd0;
    shared_ack <= (((((((mgmtsoc_icp_bus_ack | mgmtsoc_ics_bus_ack) | dff_bus_ack) | dff2_bus_ack) | mgmtsoc_mmap_bus_ack) | mprj_ack) | hk_ack) | interface0_ack);
    if (done) begin
        shared_ack <= 1'd1;
    end
end
assign shared_err = (((((((mgmtsoc_icp_bus_err | mgmtsoc_ics_bus_err) | dff_bus_err) | dff2_bus_err) | mgmtsoc_mmap_bus_err) | mprj_err) | hk_err) | interface0_err);
always @(*) begin
    shared_dat_r <= 32'd0;
    shared_dat_r <= (((((((({32{slave_sel_r[0]}} & mgmtsoc_icp_bus_dat_r) | ({32{slave_sel_r[1]}} & mgmtsoc_ics_bus_dat_r)) | ({32{slave_sel_r[2]}} & dff_bus_dat_r)) | ({32{slave_sel_r[3]}} & dff2_bus_dat_r)) | ({32{slave_sel_r[4]}} & mgmtsoc_mmap_bus_dat_r)) | ({32{slave_sel_r[5]}} & mprj_dat_r)) | ({32{slave_sel_r[6]}} & hk_dat_r)) | ({32{slave_sel_r[7]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
    end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    if (done) begin
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign mgmtsoc_bus_errors_status = mgmtsoc_bus_errors;
assign mgmtsoc_zero_trigger = (mgmtsoc_value == 1'd0);
assign mgmtsoc_zero0 = mgmtsoc_zero_status;
assign mgmtsoc_zero1 = mgmtsoc_zero_pending;
always @(*) begin
    mgmtsoc_zero_clear <= 1'd0;
    if ((mgmtsoc_pending_re & mgmtsoc_pending_r)) begin
        mgmtsoc_zero_clear <= 1'd1;
    end
end
assign mgmtsoc_irq = (mgmtsoc_pending_status & mgmtsoc_enable_storage);
assign mgmtsoc_zero_status = mgmtsoc_zero_trigger;
assign dff_di = dff_bus_dat_w;
always @(*) begin
    dff_we <= 4'd0;
    dff_we[0] <= (((dff_bus_sel[0] & dff_bus_we) & dff_bus_stb) & dff_bus_cyc);
    dff_we[1] <= (((dff_bus_sel[1] & dff_bus_we) & dff_bus_stb) & dff_bus_cyc);
    dff_we[2] <= (((dff_bus_sel[2] & dff_bus_we) & dff_bus_stb) & dff_bus_cyc);
    dff_we[3] <= (((dff_bus_sel[3] & dff_bus_we) & dff_bus_stb) & dff_bus_cyc);
end
assign dff_bus_dat_r = dff_do;
assign dff_en = (dff_bus_stb & dff_bus_cyc);
assign dff2_di = dff2_bus_dat_w;
always @(*) begin
    dff2_we <= 4'd0;
    dff2_we[0] <= (((dff2_bus_sel[0] & dff2_bus_we) & dff2_bus_stb) & dff2_bus_cyc);
    dff2_we[1] <= (((dff2_bus_sel[1] & dff2_bus_we) & dff2_bus_stb) & dff2_bus_cyc);
    dff2_we[2] <= (((dff2_bus_sel[2] & dff2_bus_we) & dff2_bus_stb) & dff2_bus_cyc);
    dff2_we[3] <= (((dff2_bus_sel[3] & dff2_bus_we) & dff2_bus_stb) & dff2_bus_cyc);
end
assign dff2_bus_dat_r = dff2_do;
assign dff2_en = (dff2_bus_stb & dff2_bus_cyc);
assign mgmtsoc_litespisdrphycore_div = mgmtsoc_litespisdrphycore_spi_clk_divisor;
assign mgmtsoc_litespisdrphycore_wait = mgmtsoc_litespisdrphycore_cs;
assign mgmtsoc_litespisdrphycore_cs_enable = mgmtsoc_litespisdrphycore_done;
assign flash_cs_n = (~mgmtsoc_litespisdrphycore_cs_enable);
assign flash_io1_oeb = 1'd1;
assign flash_io1_do = 1'd0;
assign flash_io2_do = 1'd0;
assign flash_io3_do = 1'd0;
assign flash_io2_oeb = 1'd1;
assign flash_io3_oeb = 1'd1;
assign mgmtsoc_litespisdrphycore_dq_oe = mgmtsoc_litespisdrphycore_sink_payload_mask;
always @(*) begin
    mgmtsoc_litespisdrphycore_dq_o <= 1'd0;
    case (mgmtsoc_litespisdrphycore_sink_payload_width)
        1'd1: begin
            mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31];
        end
        2'd2: begin
            mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31:30];
        end
        3'd4: begin
            mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31:28];
        end
        4'd8: begin
            mgmtsoc_litespisdrphycore_dq_o <= mgmtsoc_litespisdrphycore_sr_out[31:24];
        end
    endcase
end
assign mgmtsoc_litespisdrphycore_source_payload_data = mgmtsoc_litespisdrphycore_sr_in;
assign mgmtsoc_litespisdrphycore_spi_clk_divisor = mgmtsoc_litespisdrphycore_storage;
assign mgmtsoc_litespisdrphycore_posedge = ((mgmtsoc_litespisdrphycore_en & (~mgmtsoc_litespisdrphycore_clk)) & (mgmtsoc_litespisdrphycore_cnt == mgmtsoc_litespisdrphycore_div));
assign mgmtsoc_litespisdrphycore_negedge = ((mgmtsoc_litespisdrphycore_en & mgmtsoc_litespisdrphycore_clk) & (mgmtsoc_litespisdrphycore_cnt == mgmtsoc_litespisdrphycore_div));
assign mgmtsoc_litespisdrphycore_posedge_reg2 = mgmtsoc_litespisdrphycore_posedge_reg[0];
assign mgmtsoc_litespisdrphycore_done = (mgmtsoc_litespisdrphycore_count == 1'd0);
always @(*) begin
    litespiphy_next_state <= 2'd0;
    litespiphy_next_state <= litespiphy_state;
    case (litespiphy_state)
        1'd1: begin
            if (mgmtsoc_litespisdrphycore_negedge) begin
                if ((mgmtsoc_litespisdrphycore_sr_cnt == 1'd0)) begin
                    litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (((mgmtsoc_litespisdrphycore_spi_clk_divisor > 1'd0) | mgmtsoc_litespisdrphycore_posedge_reg2)) begin
                litespiphy_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (mgmtsoc_litespisdrphycore_source_ready) begin
                litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((mgmtsoc_litespisdrphycore_cs_enable & mgmtsoc_litespisdrphycore_sink_valid)) begin
                litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_source_last <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_litespisdrphycore_source_last <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_en <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
            mgmtsoc_litespisdrphycore_en <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_sink_ready <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
            if (((mgmtsoc_litespisdrphycore_spi_clk_divisor > 1'd0) | mgmtsoc_litespisdrphycore_posedge_reg2)) begin
                mgmtsoc_litespisdrphycore_sink_ready <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_sr_out_load <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if ((mgmtsoc_litespisdrphycore_cs_enable & mgmtsoc_litespisdrphycore_sink_valid)) begin
                mgmtsoc_litespisdrphycore_sr_out_load <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_sr_out_shift <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
            if (mgmtsoc_litespisdrphycore_negedge) begin
                mgmtsoc_litespisdrphycore_sr_out_shift <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_sr_in_shift <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
            if (mgmtsoc_litespisdrphycore_posedge_reg2) begin
                mgmtsoc_litespisdrphycore_sr_in_shift <= 1'd1;
            end
        end
        2'd2: begin
            if (((mgmtsoc_litespisdrphycore_spi_clk_divisor > 1'd0) | mgmtsoc_litespisdrphycore_posedge_reg2)) begin
                mgmtsoc_litespisdrphycore_sr_in_shift <= (mgmtsoc_litespisdrphycore_spi_clk_divisor == 1'd0);
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= 8'd0;
    case (litespiphy_state)
        1'd1: begin
            if (mgmtsoc_litespisdrphycore_negedge) begin
                mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= (mgmtsoc_litespisdrphycore_sr_cnt - mgmtsoc_litespisdrphycore_sink_payload_width);
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if ((mgmtsoc_litespisdrphycore_cs_enable & mgmtsoc_litespisdrphycore_sink_valid)) begin
                mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= (mgmtsoc_litespisdrphycore_sink_payload_len - mgmtsoc_litespisdrphycore_sink_payload_width);
            end
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
            if (mgmtsoc_litespisdrphycore_negedge) begin
                mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if ((mgmtsoc_litespisdrphycore_cs_enable & mgmtsoc_litespisdrphycore_sink_valid)) begin
                mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    mgmtsoc_litespisdrphycore_source_valid <= 1'd0;
    case (litespiphy_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_litespisdrphycore_source_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
assign mgmtsoc_litespisdrphycore_cs = mgmtsoc_crossbar_cs;
assign mgmtsoc_mmap_sink_valid = mgmtsoc_port_mmap_user_port_source_valid;
assign mgmtsoc_port_mmap_user_port_source_ready = mgmtsoc_mmap_sink_ready;
assign mgmtsoc_mmap_sink_first = mgmtsoc_port_mmap_user_port_source_first;
assign mgmtsoc_mmap_sink_last = mgmtsoc_port_mmap_user_port_source_last;
assign mgmtsoc_mmap_sink_payload_data = mgmtsoc_port_mmap_user_port_source_payload_data;
assign mgmtsoc_port_mmap_user_port_sink_valid = mgmtsoc_mmap_source_valid;
assign mgmtsoc_mmap_source_ready = mgmtsoc_port_mmap_user_port_sink_ready;
assign mgmtsoc_port_mmap_user_port_sink_first = mgmtsoc_mmap_source_first;
assign mgmtsoc_port_mmap_user_port_sink_last = mgmtsoc_mmap_source_last;
assign mgmtsoc_port_mmap_user_port_sink_payload_data = mgmtsoc_mmap_source_payload_data;
assign mgmtsoc_port_mmap_user_port_sink_payload_len = mgmtsoc_mmap_source_payload_len;
assign mgmtsoc_port_mmap_user_port_sink_payload_width = mgmtsoc_mmap_source_payload_width;
assign mgmtsoc_port_mmap_user_port_sink_payload_mask = mgmtsoc_mmap_source_payload_mask;
assign mgmtsoc_master_sink_valid = mgmtsoc_port_master_user_port_source_valid;
assign mgmtsoc_port_master_user_port_source_ready = mgmtsoc_master_sink_ready;
assign mgmtsoc_master_sink_first = mgmtsoc_port_master_user_port_source_first;
assign mgmtsoc_master_sink_last = mgmtsoc_port_master_user_port_source_last;
assign mgmtsoc_master_sink_payload_data = mgmtsoc_port_master_user_port_source_payload_data;
assign mgmtsoc_port_master_user_port_sink_valid = mgmtsoc_master_source_valid;
assign mgmtsoc_master_source_ready = mgmtsoc_port_master_user_port_sink_ready;
assign mgmtsoc_port_master_user_port_sink_first = mgmtsoc_master_source_first;
assign mgmtsoc_port_master_user_port_sink_last = mgmtsoc_master_source_last;
assign mgmtsoc_port_master_user_port_sink_payload_data = mgmtsoc_master_source_payload_data;
assign mgmtsoc_port_master_user_port_sink_payload_len = mgmtsoc_master_source_payload_len;
assign mgmtsoc_port_master_user_port_sink_payload_width = mgmtsoc_master_source_payload_width;
assign mgmtsoc_port_master_user_port_sink_payload_mask = mgmtsoc_master_source_payload_mask;
assign mgmtsoc_litespisdrphycore_sink_valid = mgmtsoc_crossbar_source_valid;
assign mgmtsoc_crossbar_source_ready = mgmtsoc_litespisdrphycore_sink_ready;
assign mgmtsoc_litespisdrphycore_sink_first = mgmtsoc_crossbar_source_first;
assign mgmtsoc_litespisdrphycore_sink_last = mgmtsoc_crossbar_source_last;
assign mgmtsoc_litespisdrphycore_sink_payload_data = mgmtsoc_crossbar_source_payload_data;
assign mgmtsoc_litespisdrphycore_sink_payload_len = mgmtsoc_crossbar_source_payload_len;
assign mgmtsoc_litespisdrphycore_sink_payload_width = mgmtsoc_crossbar_source_payload_width;
assign mgmtsoc_litespisdrphycore_sink_payload_mask = mgmtsoc_crossbar_source_payload_mask;
assign mgmtsoc_crossbar_sink_valid = mgmtsoc_litespisdrphycore_source_valid;
assign mgmtsoc_litespisdrphycore_source_ready = mgmtsoc_crossbar_sink_ready;
assign mgmtsoc_crossbar_sink_first = mgmtsoc_litespisdrphycore_source_first;
assign mgmtsoc_crossbar_sink_last = mgmtsoc_litespisdrphycore_source_last;
assign mgmtsoc_crossbar_sink_payload_data = mgmtsoc_litespisdrphycore_source_payload_data;
assign mgmtsoc_port_mmap_internal_port_sink_valid = mgmtsoc_port_mmap_user_port_sink_valid;
assign mgmtsoc_port_mmap_user_port_sink_ready = mgmtsoc_port_mmap_internal_port_sink_ready;
assign mgmtsoc_port_mmap_internal_port_sink_first = mgmtsoc_port_mmap_user_port_sink_first;
assign mgmtsoc_port_mmap_internal_port_sink_last = mgmtsoc_port_mmap_user_port_sink_last;
assign mgmtsoc_port_mmap_internal_port_sink_payload_data = mgmtsoc_port_mmap_user_port_sink_payload_data;
assign mgmtsoc_port_mmap_internal_port_sink_payload_len = mgmtsoc_port_mmap_user_port_sink_payload_len;
assign mgmtsoc_port_mmap_internal_port_sink_payload_width = mgmtsoc_port_mmap_user_port_sink_payload_width;
assign mgmtsoc_port_mmap_internal_port_sink_payload_mask = mgmtsoc_port_mmap_user_port_sink_payload_mask;
assign mgmtsoc_port_mmap_user_port_source_valid = mgmtsoc_port_mmap_internal_port_source_valid;
assign mgmtsoc_port_mmap_internal_port_source_ready = mgmtsoc_port_mmap_user_port_source_ready;
assign mgmtsoc_port_mmap_user_port_source_first = mgmtsoc_port_mmap_internal_port_source_first;
assign mgmtsoc_port_mmap_user_port_source_last = mgmtsoc_port_mmap_internal_port_source_last;
assign mgmtsoc_port_mmap_user_port_source_payload_data = mgmtsoc_port_mmap_internal_port_source_payload_data;
assign mgmtsoc_port_master_internal_port_sink_valid = mgmtsoc_port_master_user_port_sink_valid;
assign mgmtsoc_port_master_user_port_sink_ready = mgmtsoc_port_master_internal_port_sink_ready;
assign mgmtsoc_port_master_internal_port_sink_first = mgmtsoc_port_master_user_port_sink_first;
assign mgmtsoc_port_master_internal_port_sink_last = mgmtsoc_port_master_user_port_sink_last;
assign mgmtsoc_port_master_internal_port_sink_payload_data = mgmtsoc_port_master_user_port_sink_payload_data;
assign mgmtsoc_port_master_internal_port_sink_payload_len = mgmtsoc_port_master_user_port_sink_payload_len;
assign mgmtsoc_port_master_internal_port_sink_payload_width = mgmtsoc_port_master_user_port_sink_payload_width;
assign mgmtsoc_port_master_internal_port_sink_payload_mask = mgmtsoc_port_master_user_port_sink_payload_mask;
assign mgmtsoc_port_master_user_port_source_valid = mgmtsoc_port_master_internal_port_source_valid;
assign mgmtsoc_port_master_internal_port_source_ready = mgmtsoc_port_master_user_port_source_ready;
assign mgmtsoc_port_master_user_port_source_first = mgmtsoc_port_master_internal_port_source_first;
assign mgmtsoc_port_master_user_port_source_last = mgmtsoc_port_master_internal_port_source_last;
assign mgmtsoc_port_master_user_port_source_payload_data = mgmtsoc_port_master_internal_port_source_payload_data;
assign mgmtsoc_port_master_request = (mgmtsoc_master_cs != 1'd0);
assign litespi_tx_mux_endpoint0_sink_valid = mgmtsoc_port_mmap_internal_port_sink_valid;
assign mgmtsoc_port_mmap_internal_port_sink_ready = litespi_tx_mux_endpoint0_sink_ready;
assign litespi_tx_mux_endpoint0_sink_first = mgmtsoc_port_mmap_internal_port_sink_first;
assign litespi_tx_mux_endpoint0_sink_last = mgmtsoc_port_mmap_internal_port_sink_last;
assign litespi_tx_mux_endpoint0_sink_payload_data = mgmtsoc_port_mmap_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint0_sink_payload_len = mgmtsoc_port_mmap_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint0_sink_payload_width = mgmtsoc_port_mmap_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint0_sink_payload_mask = mgmtsoc_port_mmap_internal_port_sink_payload_mask;
assign mgmtsoc_port_mmap_internal_port_source_valid = litespi_rx_demux_endpoint0_source_valid;
assign litespi_rx_demux_endpoint0_source_ready = mgmtsoc_port_mmap_internal_port_source_ready;
assign mgmtsoc_port_mmap_internal_port_source_first = litespi_rx_demux_endpoint0_source_first;
assign mgmtsoc_port_mmap_internal_port_source_last = litespi_rx_demux_endpoint0_source_last;
assign mgmtsoc_port_mmap_internal_port_source_payload_data = litespi_rx_demux_endpoint0_source_payload_data;
assign litespi_tx_mux_endpoint1_sink_valid = mgmtsoc_port_master_internal_port_sink_valid;
assign mgmtsoc_port_master_internal_port_sink_ready = litespi_tx_mux_endpoint1_sink_ready;
assign litespi_tx_mux_endpoint1_sink_first = mgmtsoc_port_master_internal_port_sink_first;
assign litespi_tx_mux_endpoint1_sink_last = mgmtsoc_port_master_internal_port_sink_last;
assign litespi_tx_mux_endpoint1_sink_payload_data = mgmtsoc_port_master_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint1_sink_payload_len = mgmtsoc_port_master_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint1_sink_payload_width = mgmtsoc_port_master_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint1_sink_payload_mask = mgmtsoc_port_master_internal_port_sink_payload_mask;
assign mgmtsoc_port_master_internal_port_source_valid = litespi_rx_demux_endpoint1_source_valid;
assign litespi_rx_demux_endpoint1_source_ready = mgmtsoc_port_master_internal_port_source_ready;
assign mgmtsoc_port_master_internal_port_source_first = litespi_rx_demux_endpoint1_source_first;
assign mgmtsoc_port_master_internal_port_source_last = litespi_rx_demux_endpoint1_source_last;
assign mgmtsoc_port_master_internal_port_source_payload_data = litespi_rx_demux_endpoint1_source_payload_data;
assign litespi_request = {mgmtsoc_port_master_request, mgmtsoc_mmap_request};
assign mgmtsoc_crossbar_source_valid = litespi_tx_mux_source_valid;
assign litespi_tx_mux_source_ready = mgmtsoc_crossbar_source_ready;
assign mgmtsoc_crossbar_source_first = litespi_tx_mux_source_first;
assign mgmtsoc_crossbar_source_last = litespi_tx_mux_source_last;
assign mgmtsoc_crossbar_source_payload_data = litespi_tx_mux_source_payload_data;
assign mgmtsoc_crossbar_source_payload_len = litespi_tx_mux_source_payload_len;
assign mgmtsoc_crossbar_source_payload_width = litespi_tx_mux_source_payload_width;
assign mgmtsoc_crossbar_source_payload_mask = litespi_tx_mux_source_payload_mask;
assign litespi_tx_mux_sel = litespi_grant;
assign litespi_rx_demux_sink_valid = mgmtsoc_crossbar_sink_valid;
assign mgmtsoc_crossbar_sink_ready = litespi_rx_demux_sink_ready;
assign litespi_rx_demux_sink_first = mgmtsoc_crossbar_sink_first;
assign litespi_rx_demux_sink_last = mgmtsoc_crossbar_sink_last;
assign litespi_rx_demux_sink_payload_data = mgmtsoc_crossbar_sink_payload_data;
assign litespi_rx_demux_sel = litespi_grant;
always @(*) begin
    mgmtsoc_crossbar_cs <= 1'd0;
    case (litespi_grant)
        1'd0: begin
            mgmtsoc_crossbar_cs <= mgmtsoc_mmap_cs;
        end
        1'd1: begin
            mgmtsoc_crossbar_cs <= mgmtsoc_master_cs;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_source_payload_width <= 4'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint0_sink_payload_width;
        end
        1'd1: begin
            litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint1_sink_payload_width;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_source_payload_mask <= 8'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint0_sink_payload_mask;
        end
        1'd1: begin
            litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint1_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_endpoint0_sink_ready <= 1'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_endpoint0_sink_ready <= litespi_tx_mux_source_ready;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_source_valid <= 1'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint0_sink_valid;
        end
        1'd1: begin
            litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint1_sink_valid;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_endpoint1_sink_ready <= 1'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
        end
        1'd1: begin
            litespi_tx_mux_endpoint1_sink_ready <= litespi_tx_mux_source_ready;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_source_first <= 1'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_first <= litespi_tx_mux_endpoint0_sink_first;
        end
        1'd1: begin
            litespi_tx_mux_source_first <= litespi_tx_mux_endpoint1_sink_first;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_source_last <= 1'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_last <= litespi_tx_mux_endpoint0_sink_last;
        end
        1'd1: begin
            litespi_tx_mux_source_last <= litespi_tx_mux_endpoint1_sink_last;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_source_payload_data <= 32'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint0_sink_payload_data;
        end
        1'd1: begin
            litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint1_sink_payload_data;
        end
    endcase
end
always @(*) begin
    litespi_tx_mux_source_payload_len <= 6'd0;
    case (litespi_tx_mux_sel)
        1'd0: begin
            litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint0_sink_payload_len;
        end
        1'd1: begin
            litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint1_sink_payload_len;
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint1_source_first <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            litespi_rx_demux_endpoint1_source_first <= litespi_rx_demux_sink_first;
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint1_source_last <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            litespi_rx_demux_endpoint1_source_last <= litespi_rx_demux_sink_last;
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint1_source_payload_data <= 32'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            litespi_rx_demux_endpoint1_source_payload_data <= litespi_rx_demux_sink_payload_data;
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_sink_ready <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
            litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint0_source_ready;
        end
        1'd1: begin
            litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint1_source_ready;
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint0_source_valid <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
            litespi_rx_demux_endpoint0_source_valid <= litespi_rx_demux_sink_valid;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint0_source_first <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
            litespi_rx_demux_endpoint0_source_first <= litespi_rx_demux_sink_first;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint0_source_last <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
            litespi_rx_demux_endpoint0_source_last <= litespi_rx_demux_sink_last;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint0_source_payload_data <= 32'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
            litespi_rx_demux_endpoint0_source_payload_data <= litespi_rx_demux_sink_payload_data;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    litespi_rx_demux_endpoint1_source_valid <= 1'd0;
    case (litespi_rx_demux_sel)
        1'd0: begin
        end
        1'd1: begin
            litespi_rx_demux_endpoint1_source_valid <= litespi_rx_demux_sink_valid;
        end
    endcase
end
assign mgmtsoc_mmap_spi_dummy_bits = mgmtsoc_mmap_storage;
always @(*) begin
    mgmtsoc_mmap_cs <= 1'd0;
    if (mgmtsoc_mmap_request) begin
        mgmtsoc_mmap_cs <= 1'd1;
    end
end
assign mgmtsoc_mmap_done = (mgmtsoc_mmap_count == 1'd0);
always @(*) begin
    litespi_next_state <= 4'd0;
    litespi_next_state <= litespi_state;
    case (litespi_state)
        1'd1: begin
            if (mgmtsoc_mmap_source_ready) begin
                litespi_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (mgmtsoc_mmap_sink_valid) begin
                litespi_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (mgmtsoc_mmap_source_ready) begin
                litespi_next_state <= 3'd4;
            end
        end
        3'd4: begin
            if (mgmtsoc_mmap_sink_valid) begin
                if ((mgmtsoc_mmap_spi_dummy_bits == 1'd0)) begin
                    litespi_next_state <= 3'd7;
                end else begin
                    litespi_next_state <= 3'd5;
                end
            end
        end
        3'd5: begin
            if (mgmtsoc_mmap_source_ready) begin
                litespi_next_state <= 3'd6;
            end
        end
        3'd6: begin
            if (mgmtsoc_mmap_sink_valid) begin
                litespi_next_state <= 3'd7;
            end
        end
        3'd7: begin
            if (mgmtsoc_mmap_source_ready) begin
                litespi_next_state <= 4'd8;
            end
        end
        4'd8: begin
            if (mgmtsoc_mmap_sink_valid) begin
                litespi_next_state <= 1'd0;
            end
        end
        default: begin
            if ((mgmtsoc_mmap_bus_cyc & mgmtsoc_mmap_bus_stb)) begin
                if ((~mgmtsoc_mmap_bus_we)) begin
                    if (((mgmtsoc_mmap_burst_cs & (mgmtsoc_mmap_bus_adr == mgmtsoc_mmap_burst_adr)) & ((~1'd0) | (~1'd0)))) begin
                        litespi_next_state <= 3'd7;
                    end else begin
                        litespi_next_state <= 1'd1;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_wait <= 1'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            mgmtsoc_mmap_wait <= 1'd1;
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_sink_ready <= 1'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
            mgmtsoc_mmap_sink_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            mgmtsoc_mmap_sink_ready <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
            mgmtsoc_mmap_sink_ready <= 1'd1;
        end
        3'd7: begin
        end
        4'd8: begin
            mgmtsoc_mmap_sink_ready <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_bus_dat_r <= 32'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            mgmtsoc_mmap_bus_dat_r <= {mgmtsoc_mmap_sink_payload_data[7:0], mgmtsoc_mmap_sink_payload_data[15:8], mgmtsoc_mmap_sink_payload_data[23:16], mgmtsoc_mmap_sink_payload_data[31:24]};
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_burst_adr_litespi_next_value2 <= 30'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_burst_adr_litespi_next_value2 <= mgmtsoc_mmap_bus_adr;
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_burst_adr_litespi_next_value2 <= mgmtsoc_mmap_bus_adr;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            if (mgmtsoc_mmap_sink_valid) begin
                mgmtsoc_mmap_burst_adr_litespi_next_value2 <= (mgmtsoc_mmap_burst_adr + 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_source_valid <= 1'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_source_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_source_valid <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
            mgmtsoc_mmap_source_valid <= 1'd1;
        end
        3'd6: begin
        end
        3'd7: begin
            mgmtsoc_mmap_source_valid <= 1'd1;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_burst_adr_litespi_next_value_ce2 <= 1'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_burst_adr_litespi_next_value_ce2 <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_burst_adr_litespi_next_value_ce2 <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            if (mgmtsoc_mmap_sink_valid) begin
                mgmtsoc_mmap_burst_adr_litespi_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_byte_count_litespi_next_value_ce1 <= 1'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if ((mgmtsoc_mmap_bus_cyc & mgmtsoc_mmap_bus_stb)) begin
                mgmtsoc_mmap_byte_count_litespi_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_bus_ack <= 1'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
            if (mgmtsoc_mmap_sink_valid) begin
                mgmtsoc_mmap_bus_ack <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_source_payload_data <= 32'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_source_payload_data <= 2'd3;
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_source_payload_data <= {mgmtsoc_mmap_bus_adr, mgmtsoc_mmap_byte_count};
        end
        3'd4: begin
        end
        3'd5: begin
            mgmtsoc_mmap_source_payload_data <= mgmtsoc_mmap_dummy;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_burst_cs_litespi_next_value0 <= 1'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_burst_cs_litespi_next_value0 <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            mgmtsoc_mmap_burst_cs_litespi_next_value0 <= (mgmtsoc_mmap_burst_cs & (~mgmtsoc_mmap_done));
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_source_payload_len <= 6'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_source_payload_len <= 4'd8;
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_source_payload_len <= 5'd24;
        end
        3'd4: begin
        end
        3'd5: begin
            mgmtsoc_mmap_source_payload_len <= mgmtsoc_mmap_spi_dummy_bits;
        end
        3'd6: begin
        end
        3'd7: begin
            mgmtsoc_mmap_source_payload_len <= 6'd32;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_burst_cs_litespi_next_value_ce0 <= 1'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            mgmtsoc_mmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_source_payload_width <= 4'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_source_payload_width <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_source_payload_width <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
            mgmtsoc_mmap_source_payload_width <= 1'd1;
        end
        3'd6: begin
        end
        3'd7: begin
            mgmtsoc_mmap_source_payload_width <= 1'd1;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_source_payload_mask <= 8'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_source_payload_mask <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            mgmtsoc_mmap_source_payload_mask <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
            mgmtsoc_mmap_source_payload_mask <= 1'd0;
        end
        3'd6: begin
        end
        3'd7: begin
            mgmtsoc_mmap_source_payload_mask <= 1'd0;
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_byte_count_litespi_next_value1 <= 2'd0;
    case (litespi_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if ((mgmtsoc_mmap_bus_cyc & mgmtsoc_mmap_bus_stb)) begin
                mgmtsoc_mmap_byte_count_litespi_next_value1 <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    mgmtsoc_mmap_request <= 1'd0;
    case (litespi_state)
        1'd1: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        2'd2: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        2'd3: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        3'd4: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        3'd5: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        3'd6: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        3'd7: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        4'd8: begin
            mgmtsoc_mmap_request <= 1'd1;
        end
        default: begin
            mgmtsoc_mmap_request <= mgmtsoc_mmap_burst_cs;
            if ((mgmtsoc_mmap_bus_cyc & mgmtsoc_mmap_bus_stb)) begin
                if ((~mgmtsoc_mmap_bus_we)) begin
                    if (((mgmtsoc_mmap_burst_cs & (mgmtsoc_mmap_bus_adr == mgmtsoc_mmap_burst_adr)) & ((~1'd0) | (~1'd0)))) begin
                    end else begin
                        mgmtsoc_mmap_request <= 1'd0;
                    end
                end
            end
        end
    endcase
end
assign mgmtsoc_master_rx_fifo_sink_sink_valid = mgmtsoc_master_sink_valid;
assign mgmtsoc_master_sink_ready = mgmtsoc_master_rx_fifo_sink_sink_ready;
assign mgmtsoc_master_rx_fifo_sink_sink_first = mgmtsoc_master_sink_first;
assign mgmtsoc_master_rx_fifo_sink_sink_last = mgmtsoc_master_sink_last;
assign mgmtsoc_master_rx_fifo_sink_sink_payload_data = mgmtsoc_master_sink_payload_data;
assign mgmtsoc_master_source_valid = mgmtsoc_master_tx_fifo_source_source_valid;
assign mgmtsoc_master_tx_fifo_source_source_ready = mgmtsoc_master_source_ready;
assign mgmtsoc_master_source_first = mgmtsoc_master_tx_fifo_source_source_first;
assign mgmtsoc_master_source_last = mgmtsoc_master_tx_fifo_source_source_last;
assign mgmtsoc_master_source_payload_data = mgmtsoc_master_tx_fifo_source_source_payload_data;
assign mgmtsoc_master_source_payload_len = mgmtsoc_master_tx_fifo_source_source_payload_len;
assign mgmtsoc_master_source_payload_width = mgmtsoc_master_tx_fifo_source_source_payload_width;
assign mgmtsoc_master_source_payload_mask = mgmtsoc_master_tx_fifo_source_source_payload_mask;
assign mgmtsoc_master_cs = mgmtsoc_master_cs_storage;
assign mgmtsoc_master_tx_fifo_sink_sink_valid = mgmtsoc_master_rxtx_re;
assign mgmtsoc_master_tx_ready = mgmtsoc_master_tx_fifo_sink_sink_ready;
assign mgmtsoc_master_tx_fifo_sink_sink_payload_data = mgmtsoc_master_rxtx_r;
assign mgmtsoc_master_tx_fifo_sink_sink_payload_len = mgmtsoc_master_len;
assign mgmtsoc_master_tx_fifo_sink_sink_payload_width = mgmtsoc_master_width;
assign mgmtsoc_master_tx_fifo_sink_sink_payload_mask = mgmtsoc_master_mask;
assign mgmtsoc_master_rx_fifo_source_source_ready = mgmtsoc_master_rxtx_we;
assign mgmtsoc_master_rx_ready = mgmtsoc_master_rx_fifo_source_source_valid;
assign mgmtsoc_master_rxtx_w = mgmtsoc_master_rx_fifo_source_source_payload_data;
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_ready = ((~mgmtsoc_master_tx_fifo_pipe_valid_source_valid) | mgmtsoc_master_tx_fifo_pipe_valid_source_ready);
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_valid = mgmtsoc_master_tx_fifo_sink_sink_valid;
assign mgmtsoc_master_tx_fifo_sink_sink_ready = mgmtsoc_master_tx_fifo_pipe_valid_sink_ready;
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_first = mgmtsoc_master_tx_fifo_sink_sink_first;
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_last = mgmtsoc_master_tx_fifo_sink_sink_last;
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_data = mgmtsoc_master_tx_fifo_sink_sink_payload_data;
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_len = mgmtsoc_master_tx_fifo_sink_sink_payload_len;
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_width = mgmtsoc_master_tx_fifo_sink_sink_payload_width;
assign mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_mask = mgmtsoc_master_tx_fifo_sink_sink_payload_mask;
assign mgmtsoc_master_tx_fifo_source_source_valid = mgmtsoc_master_tx_fifo_pipe_valid_source_valid;
assign mgmtsoc_master_tx_fifo_pipe_valid_source_ready = mgmtsoc_master_tx_fifo_source_source_ready;
assign mgmtsoc_master_tx_fifo_source_source_first = mgmtsoc_master_tx_fifo_pipe_valid_source_first;
assign mgmtsoc_master_tx_fifo_source_source_last = mgmtsoc_master_tx_fifo_pipe_valid_source_last;
assign mgmtsoc_master_tx_fifo_source_source_payload_data = mgmtsoc_master_tx_fifo_pipe_valid_source_payload_data;
assign mgmtsoc_master_tx_fifo_source_source_payload_len = mgmtsoc_master_tx_fifo_pipe_valid_source_payload_len;
assign mgmtsoc_master_tx_fifo_source_source_payload_width = mgmtsoc_master_tx_fifo_pipe_valid_source_payload_width;
assign mgmtsoc_master_tx_fifo_source_source_payload_mask = mgmtsoc_master_tx_fifo_pipe_valid_source_payload_mask;
assign mgmtsoc_master_rx_fifo_pipe_valid_sink_ready = ((~mgmtsoc_master_rx_fifo_pipe_valid_source_valid) | mgmtsoc_master_rx_fifo_pipe_valid_source_ready);
assign mgmtsoc_master_rx_fifo_pipe_valid_sink_valid = mgmtsoc_master_rx_fifo_sink_sink_valid;
assign mgmtsoc_master_rx_fifo_sink_sink_ready = mgmtsoc_master_rx_fifo_pipe_valid_sink_ready;
assign mgmtsoc_master_rx_fifo_pipe_valid_sink_first = mgmtsoc_master_rx_fifo_sink_sink_first;
assign mgmtsoc_master_rx_fifo_pipe_valid_sink_last = mgmtsoc_master_rx_fifo_sink_sink_last;
assign mgmtsoc_master_rx_fifo_pipe_valid_sink_payload_data = mgmtsoc_master_rx_fifo_sink_sink_payload_data;
assign mgmtsoc_master_rx_fifo_source_source_valid = mgmtsoc_master_rx_fifo_pipe_valid_source_valid;
assign mgmtsoc_master_rx_fifo_pipe_valid_source_ready = mgmtsoc_master_rx_fifo_source_source_ready;
assign mgmtsoc_master_rx_fifo_source_source_first = mgmtsoc_master_rx_fifo_pipe_valid_source_first;
assign mgmtsoc_master_rx_fifo_source_source_last = mgmtsoc_master_rx_fifo_pipe_valid_source_last;
assign mgmtsoc_master_rx_fifo_source_source_payload_data = mgmtsoc_master_rx_fifo_pipe_valid_source_payload_data;
assign spi_master_start0 = spi_master_start1;
assign spi_master_length0 = spi_master_length1;
assign spi_master_done1 = spi_master_done0;
assign spi_master_mode0 = 1'd0;
assign spi_master_mosi = spi_master_mosi_storage;
assign spi_master_miso_status = spi_master_miso;
assign spi_master_cs = spi_master_sel;
assign spi_master_cs_mode = spi_master_mode1;
assign spi_master_loopback = spi_master_mode2;
assign spi_master_clk_rise = (spi_master_clk_divider1 == (spi_master_clk_divider0[15:1] - 1'd1));
assign spi_master_clk_fall = (spi_master_clk_divider1 == (spi_master_clk_divider0 - 1'd1));
assign spi_master_clk_divider0 = spimaster_storage;
always @(*) begin
    spimaster_next_state <= 2'd0;
    spimaster_next_state <= spimaster_state;
    case (spimaster_state)
        1'd1: begin
            if (spi_master_clk_fall) begin
                spimaster_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (spi_master_clk_fall) begin
                if ((spi_master_count == (spi_master_length0 - 1'd1))) begin
                    spimaster_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            if (spi_master_clk_rise) begin
                spimaster_next_state <= 1'd0;
            end
        end
        default: begin
            if (spi_master_start0) begin
                spimaster_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    spi_master_done0 <= 1'd0;
    case (spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            spi_master_done0 <= 1'd1;
            if (spi_master_start0) begin
                spi_master_done0 <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    spi_master_irq <= 1'd0;
    case (spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (spi_master_clk_rise) begin
                spi_master_irq <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_clk_enable <= 1'd0;
    case (spimaster_state)
        1'd1: begin
        end
        2'd2: begin
            spi_master_clk_enable <= 1'd1;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_xfer_enable <= 1'd0;
    case (spimaster_state)
        1'd1: begin
            if (spi_master_clk_fall) begin
                spi_master_xfer_enable <= 1'd1;
            end
        end
        2'd2: begin
            spi_master_xfer_enable <= 1'd1;
        end
        2'd3: begin
            spi_master_xfer_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_mosi_latch <= 1'd0;
    case (spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (spi_master_start0) begin
                spi_master_mosi_latch <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    spi_master_count_spimaster_next_value <= 3'd0;
    case (spimaster_state)
        1'd1: begin
            spi_master_count_spimaster_next_value <= 1'd0;
        end
        2'd2: begin
            if (spi_master_clk_fall) begin
                spi_master_count_spimaster_next_value <= (spi_master_count + 1'd1);
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_miso_latch <= 1'd0;
    case (spimaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (spi_master_clk_rise) begin
                spi_master_miso_latch <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    spi_master_count_spimaster_next_value_ce <= 1'd0;
    case (spimaster_state)
        1'd1: begin
            spi_master_count_spimaster_next_value_ce <= 1'd1;
        end
        2'd2: begin
            if (spi_master_clk_fall) begin
                spi_master_count_spimaster_next_value_ce <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
assign mprj_wb_iena = mprj_wb_iena_storage;
always @(*) begin
    rs232phy_rs232phytx_next_state <= 1'd0;
    rs232phy_rs232phytx_next_state <= rs232phy_rs232phytx_state;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                if ((uart_phy_tx_count == 4'd9)) begin
                    rs232phy_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (uart_phy_tx_sink_valid) begin
                rs232phy_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    uart_phy_tx_count_rs232phy_rs232phytx_next_value0 <= 4'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                uart_phy_tx_count_rs232phy_rs232phytx_next_value0 <= (uart_phy_tx_count + 1'd1);
            end
        end
        default: begin
            uart_phy_tx_count_rs232phy_rs232phytx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    uart_phy_tx_sink_ready <= 1'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                if ((uart_phy_tx_count == 4'd9)) begin
                    uart_phy_tx_sink_ready <= 1'd1;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    uart_phy_tx_count_rs232phy_rs232phytx_next_value_ce0 <= 1'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                uart_phy_tx_count_rs232phy_rs232phytx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            uart_phy_tx_count_rs232phy_rs232phytx_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    sys_uart_tx_rs232phy_rs232phytx_next_value1 <= 1'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                sys_uart_tx_rs232phy_rs232phytx_next_value1 <= uart_phy_tx_data[0];
            end
        end
        default: begin
            sys_uart_tx_rs232phy_rs232phytx_next_value1 <= 1'd1;
            if (uart_phy_tx_sink_valid) begin
                sys_uart_tx_rs232phy_rs232phytx_next_value1 <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    sys_uart_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                sys_uart_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            sys_uart_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd1;
            if (uart_phy_tx_sink_valid) begin
                sys_uart_tx_rs232phy_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    uart_phy_tx_enable <= 1'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            uart_phy_tx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    uart_phy_tx_data_rs232phy_rs232phytx_next_value2 <= 8'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                uart_phy_tx_data_rs232phy_rs232phytx_next_value2 <= {1'd1, uart_phy_tx_data[7:1]};
            end
        end
        default: begin
            if (uart_phy_tx_sink_valid) begin
                uart_phy_tx_data_rs232phy_rs232phytx_next_value2 <= uart_phy_tx_sink_payload_data;
            end
        end
    endcase
end
always @(*) begin
    uart_phy_tx_data_rs232phy_rs232phytx_next_value_ce2 <= 1'd0;
    case (rs232phy_rs232phytx_state)
        1'd1: begin
            if (uart_phy_tx_tick) begin
                uart_phy_tx_data_rs232phy_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
            if (uart_phy_tx_sink_valid) begin
                uart_phy_tx_data_rs232phy_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    rs232phy_rs232phyrx_next_state <= 1'd0;
    rs232phy_rs232phyrx_next_state <= rs232phy_rs232phyrx_state;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            if (uart_phy_rx_tick) begin
                if ((uart_phy_rx_count == 4'd9)) begin
                    rs232phy_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (((uart_phy_rx_rx == 1'd0) & (uart_phy_rx_rx_d == 1'd1))) begin
                rs232phy_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    uart_phy_rx_count_rs232phy_rs232phyrx_next_value0 <= 4'd0;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            if (uart_phy_rx_tick) begin
                uart_phy_rx_count_rs232phy_rs232phyrx_next_value0 <= (uart_phy_rx_count + 1'd1);
            end
        end
        default: begin
            uart_phy_rx_count_rs232phy_rs232phyrx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    uart_phy_rx_source_valid <= 1'd0;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            if (uart_phy_rx_tick) begin
                if ((uart_phy_rx_count == 4'd9)) begin
                    uart_phy_rx_source_valid <= (uart_phy_rx_rx == 1'd1);
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    uart_phy_rx_count_rs232phy_rs232phyrx_next_value_ce0 <= 1'd0;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            if (uart_phy_rx_tick) begin
                uart_phy_rx_count_rs232phy_rs232phyrx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            uart_phy_rx_count_rs232phy_rs232phyrx_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    uart_phy_rx_source_payload_data <= 8'd0;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            if (uart_phy_rx_tick) begin
                if ((uart_phy_rx_count == 4'd9)) begin
                    uart_phy_rx_source_payload_data <= uart_phy_rx_data;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    uart_phy_rx_data_rs232phy_rs232phyrx_next_value1 <= 8'd0;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            if (uart_phy_rx_tick) begin
                uart_phy_rx_data_rs232phy_rs232phyrx_next_value1 <= {uart_phy_rx_rx, uart_phy_rx_data[7:1]};
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    uart_phy_rx_data_rs232phy_rs232phyrx_next_value_ce1 <= 1'd0;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            if (uart_phy_rx_tick) begin
                uart_phy_rx_data_rs232phy_rs232phyrx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    uart_phy_rx_enable <= 1'd0;
    case (rs232phy_rs232phyrx_state)
        1'd1: begin
            uart_phy_rx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
assign uart_uart_sink_valid = uart_phy_rx_source_valid;
assign uart_phy_rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = uart_phy_rx_source_first;
assign uart_uart_sink_last = uart_phy_rx_source_last;
assign uart_uart_sink_payload_data = uart_phy_rx_source_payload_data;
assign uart_phy_tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = uart_phy_tx_sink_ready;
assign uart_phy_tx_sink_first = uart_uart_source_first;
assign uart_phy_tx_sink_last = uart_uart_source_last;
assign uart_phy_tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = uart_rx_clear;
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_tx_pending = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_rx_pending = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign dbg_uart_wait = (~dbg_uart_is_ongoing);
assign dbg_uart_reset = dbg_uart_done;
assign dbg_uart_wishbone_adr = dbg_uart_address;
assign dbg_uart_wishbone_dat_w = dbg_uart_data;
assign dbg_uart_wishbone_sel = 4'd15;
always @(*) begin
    dbg_uart_tx_sink_payload_data <= 8'd0;
    case (dbg_uart_data_bytes_count)
        1'd0: begin
            dbg_uart_tx_sink_payload_data <= dbg_uart_data[31:24];
        end
        1'd1: begin
            dbg_uart_tx_sink_payload_data <= dbg_uart_data[31:16];
        end
        2'd2: begin
            dbg_uart_tx_sink_payload_data <= dbg_uart_data[31:8];
        end
        2'd3: begin
            dbg_uart_tx_sink_payload_data <= dbg_uart_data;
        end
    endcase
end
assign dbg_uart_tx_sink_last = ((dbg_uart_data_bytes_count == 2'd3) & (dbg_uart_words_count == (dbg_uart_length - 1'd1)));
always @(*) begin
    uartwishbonebridge_rs232phytx_next_state <= 1'd0;
    uartwishbonebridge_rs232phytx_next_state <= uartwishbonebridge_rs232phytx_state;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                if ((dbg_uart_tx_count == 4'd9)) begin
                    uartwishbonebridge_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (dbg_uart_tx_sink_valid) begin
                uartwishbonebridge_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_tx_enable <= 1'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            dbg_uart_tx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value0 <= 4'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value0 <= (dbg_uart_tx_count + 1'd1);
            end
        end
        default: begin
            dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 <= 1'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value1 <= 1'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value1 <= dbg_uart_tx_data[0];
            end
        end
        default: begin
            dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value1 <= 1'd1;
            if (dbg_uart_tx_sink_valid) begin
                dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value1 <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd1;
            if (dbg_uart_tx_sink_valid) begin
                dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value2 <= 8'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value2 <= {1'd1, dbg_uart_tx_data[7:1]};
            end
        end
        default: begin
            if (dbg_uart_tx_sink_valid) begin
                dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value2 <= dbg_uart_tx_sink_payload_data;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_tx_sink_ready <= 1'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                if ((dbg_uart_tx_count == 4'd9)) begin
                    dbg_uart_tx_sink_ready <= 1'd1;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 <= 1'd0;
    case (uartwishbonebridge_rs232phytx_state)
        1'd1: begin
            if (dbg_uart_tx_tick) begin
                dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
            if (dbg_uart_tx_sink_valid) begin
                dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    uartwishbonebridge_rs232phyrx_next_state <= 1'd0;
    uartwishbonebridge_rs232phyrx_next_state <= uartwishbonebridge_rs232phyrx_state;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            if (dbg_uart_rx_tick) begin
                if ((dbg_uart_rx_count == 4'd9)) begin
                    uartwishbonebridge_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (((dbg_uart_rx_rx == 1'd0) & (dbg_uart_rx_rx_d == 1'd1))) begin
                uartwishbonebridge_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_enable <= 1'd0;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            dbg_uart_rx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value0 <= 4'd0;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            if (dbg_uart_rx_tick) begin
                dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value0 <= (dbg_uart_rx_count + 1'd1);
            end
        end
        default: begin
            dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 <= 1'd0;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            if (dbg_uart_rx_tick) begin
                dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value1 <= 8'd0;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            if (dbg_uart_rx_tick) begin
                dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value1 <= {dbg_uart_rx_rx, dbg_uart_rx_data[7:1]};
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1 <= 1'd0;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            if (dbg_uart_rx_tick) begin
                dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_source_valid <= 1'd0;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            if (dbg_uart_rx_tick) begin
                if ((dbg_uart_rx_count == 4'd9)) begin
                    dbg_uart_rx_source_valid <= (dbg_uart_rx_rx == 1'd1);
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_source_payload_data <= 8'd0;
    case (uartwishbonebridge_rs232phyrx_state)
        1'd1: begin
            if (dbg_uart_rx_tick) begin
                if ((dbg_uart_rx_count == 4'd9)) begin
                    dbg_uart_rx_source_payload_data <= dbg_uart_rx_data;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    uartwishbonebridge_next_state <= 3'd0;
    uartwishbonebridge_next_state <= uartwishbonebridge_state;
    case (uartwishbonebridge_state)
        1'd1: begin
            if (dbg_uart_rx_source_valid) begin
                uartwishbonebridge_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (dbg_uart_rx_source_valid) begin
                if ((dbg_uart_addr_bytes_count == 2'd3)) begin
                    if (((dbg_uart_cmd == 1'd1) | (dbg_uart_cmd == 2'd3))) begin
                        uartwishbonebridge_next_state <= 2'd3;
                    end else begin
                        if (((dbg_uart_cmd == 2'd2) | (dbg_uart_cmd == 3'd4))) begin
                            uartwishbonebridge_next_state <= 3'd5;
                        end else begin
                            uartwishbonebridge_next_state <= 1'd0;
                        end
                    end
                end
            end
        end
        2'd3: begin
            if (dbg_uart_rx_source_valid) begin
                if ((dbg_uart_data_bytes_count == 2'd3)) begin
                    uartwishbonebridge_next_state <= 3'd4;
                end
            end
        end
        3'd4: begin
            if (dbg_uart_wishbone_ack) begin
                if ((dbg_uart_words_count == (dbg_uart_length - 1'd1))) begin
                    uartwishbonebridge_next_state <= 1'd0;
                end else begin
                    uartwishbonebridge_next_state <= 2'd3;
                end
            end
        end
        3'd5: begin
            if (dbg_uart_wishbone_ack) begin
                uartwishbonebridge_next_state <= 3'd6;
            end
        end
        3'd6: begin
            if (dbg_uart_tx_sink_ready) begin
                if ((dbg_uart_data_bytes_count == 2'd3)) begin
                    if ((dbg_uart_words_count == (dbg_uart_length - 1'd1))) begin
                        uartwishbonebridge_next_state <= 1'd0;
                    end else begin
                        uartwishbonebridge_next_state <= 3'd5;
                    end
                end
            end
        end
        default: begin
            if (dbg_uart_rx_source_valid) begin
                uartwishbonebridge_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_data_bytes_count_uartwishbonebridge_next_value0 <= 2'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_data_bytes_count_uartwishbonebridge_next_value0 <= (dbg_uart_data_bytes_count + 1'd1);
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (dbg_uart_tx_sink_ready) begin
                dbg_uart_data_bytes_count_uartwishbonebridge_next_value0 <= (dbg_uart_data_bytes_count + 1'd1);
            end
        end
        default: begin
            dbg_uart_data_bytes_count_uartwishbonebridge_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    dbg_uart_data_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_data_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (dbg_uart_tx_sink_ready) begin
                dbg_uart_data_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            dbg_uart_data_bytes_count_uartwishbonebridge_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    dbg_uart_addr_bytes_count_uartwishbonebridge_next_value1 <= 2'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_addr_bytes_count_uartwishbonebridge_next_value1 <= (dbg_uart_addr_bytes_count + 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            dbg_uart_addr_bytes_count_uartwishbonebridge_next_value1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    dbg_uart_wishbone_cyc <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            dbg_uart_wishbone_cyc <= 1'd1;
        end
        3'd5: begin
            dbg_uart_wishbone_cyc <= 1'd1;
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_addr_bytes_count_uartwishbonebridge_next_value_ce1 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_addr_bytes_count_uartwishbonebridge_next_value_ce1 <= 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            dbg_uart_addr_bytes_count_uartwishbonebridge_next_value_ce1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    dbg_uart_wishbone_stb <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            dbg_uart_wishbone_stb <= 1'd1;
        end
        3'd5: begin
            dbg_uart_wishbone_stb <= 1'd1;
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_words_count_uartwishbonebridge_next_value2 <= 8'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (dbg_uart_wishbone_ack) begin
                dbg_uart_words_count_uartwishbonebridge_next_value2 <= (dbg_uart_words_count + 1'd1);
            end
        end
        3'd5: begin
        end
        3'd6: begin
            if (dbg_uart_tx_sink_ready) begin
                if ((dbg_uart_data_bytes_count == 2'd3)) begin
                    dbg_uart_words_count_uartwishbonebridge_next_value2 <= (dbg_uart_words_count + 1'd1);
                end
            end
        end
        default: begin
            dbg_uart_words_count_uartwishbonebridge_next_value2 <= 1'd0;
        end
    endcase
end
always @(*) begin
    dbg_uart_wishbone_we <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            dbg_uart_wishbone_we <= 1'd1;
        end
        3'd5: begin
            dbg_uart_wishbone_we <= 1'd0;
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_words_count_uartwishbonebridge_next_value_ce2 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (dbg_uart_wishbone_ack) begin
                dbg_uart_words_count_uartwishbonebridge_next_value_ce2 <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            if (dbg_uart_tx_sink_ready) begin
                if ((dbg_uart_data_bytes_count == 2'd3)) begin
                    dbg_uart_words_count_uartwishbonebridge_next_value_ce2 <= 1'd1;
                end
            end
        end
        default: begin
            dbg_uart_words_count_uartwishbonebridge_next_value_ce2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    dbg_uart_cmd_uartwishbonebridge_next_value3 <= 8'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_cmd_uartwishbonebridge_next_value3 <= dbg_uart_rx_source_payload_data;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_cmd_uartwishbonebridge_next_value_ce3 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_cmd_uartwishbonebridge_next_value_ce3 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    dbg_uart_length_uartwishbonebridge_next_value4 <= 8'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_length_uartwishbonebridge_next_value4 <= dbg_uart_rx_source_payload_data;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_length_uartwishbonebridge_next_value_ce4 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_length_uartwishbonebridge_next_value_ce4 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_address_uartwishbonebridge_next_value5 <= 32'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_address_uartwishbonebridge_next_value5 <= {dbg_uart_address, dbg_uart_rx_source_payload_data};
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (dbg_uart_wishbone_ack) begin
                dbg_uart_address_uartwishbonebridge_next_value5 <= (dbg_uart_address + dbg_uart_incr);
            end
        end
        3'd5: begin
        end
        3'd6: begin
            if (dbg_uart_tx_sink_ready) begin
                if ((dbg_uart_data_bytes_count == 2'd3)) begin
                    dbg_uart_address_uartwishbonebridge_next_value5 <= (dbg_uart_address + dbg_uart_incr);
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_address_uartwishbonebridge_next_value_ce5 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_address_uartwishbonebridge_next_value_ce5 <= 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (dbg_uart_wishbone_ack) begin
                dbg_uart_address_uartwishbonebridge_next_value_ce5 <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            if (dbg_uart_tx_sink_ready) begin
                if ((dbg_uart_data_bytes_count == 2'd3)) begin
                    dbg_uart_address_uartwishbonebridge_next_value_ce5 <= 1'd1;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_incr_uartwishbonebridge_next_value6 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
            if (dbg_uart_rx_source_valid) begin
                if ((dbg_uart_addr_bytes_count == 2'd3)) begin
                    if (((dbg_uart_cmd == 1'd1) | (dbg_uart_cmd == 2'd3))) begin
                        dbg_uart_incr_uartwishbonebridge_next_value6 <= (dbg_uart_cmd == 1'd1);
                    end else begin
                        if (((dbg_uart_cmd == 2'd2) | (dbg_uart_cmd == 3'd4))) begin
                            dbg_uart_incr_uartwishbonebridge_next_value6 <= (dbg_uart_cmd == 2'd2);
                        end else begin
                        end
                    end
                end
            end
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_incr_uartwishbonebridge_next_value_ce6 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
            if (dbg_uart_rx_source_valid) begin
                if ((dbg_uart_addr_bytes_count == 2'd3)) begin
                    if (((dbg_uart_cmd == 1'd1) | (dbg_uart_cmd == 2'd3))) begin
                        dbg_uart_incr_uartwishbonebridge_next_value_ce6 <= 1'd1;
                    end else begin
                        if (((dbg_uart_cmd == 2'd2) | (dbg_uart_cmd == 3'd4))) begin
                            dbg_uart_incr_uartwishbonebridge_next_value_ce6 <= 1'd1;
                        end else begin
                        end
                    end
                end
            end
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_tx_sink_valid <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            dbg_uart_tx_sink_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_data_uartwishbonebridge_next_value7 <= 32'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_data_uartwishbonebridge_next_value7 <= {dbg_uart_data, dbg_uart_rx_source_payload_data};
            end
        end
        3'd4: begin
        end
        3'd5: begin
            if (dbg_uart_wishbone_ack) begin
                dbg_uart_data_uartwishbonebridge_next_value7 <= dbg_uart_wishbone_dat_r;
            end
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_data_uartwishbonebridge_next_value_ce7 <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (dbg_uart_rx_source_valid) begin
                dbg_uart_data_uartwishbonebridge_next_value_ce7 <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
            if (dbg_uart_wishbone_ack) begin
                dbg_uart_data_uartwishbonebridge_next_value_ce7 <= 1'd1;
            end
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    dbg_uart_is_ongoing <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            dbg_uart_is_ongoing <= 1'd1;
        end
    endcase
end
always @(*) begin
    dbg_uart_rx_source_ready <= 1'd0;
    case (uartwishbonebridge_state)
        1'd1: begin
            dbg_uart_rx_source_ready <= 1'd1;
        end
        2'd2: begin
            dbg_uart_rx_source_ready <= 1'd1;
        end
        2'd3: begin
            dbg_uart_rx_source_ready <= 1'd1;
        end
        3'd4: begin
            dbg_uart_rx_source_ready <= 1'd0;
        end
        3'd5: begin
            dbg_uart_rx_source_ready <= 1'd0;
        end
        3'd6: begin
            dbg_uart_rx_source_ready <= 1'd0;
        end
        default: begin
            dbg_uart_rx_source_ready <= 1'd1;
        end
    endcase
end
assign dbg_uart_done = (dbg_uart_count == 1'd0);
assign debug_oeb = debug_oeb_storage;
assign debug_mode = debug_mode_storage;
assign uart_enabled_o = uart_enabled_storage;
assign gpio_mode0_pad = gpio_mode0_storage;
assign gpio_mode1_pad = gpio_mode1_storage;
assign gpio_inenb_pad = (~gpio_ien_storage);
assign gpio_outenb_pad = (~gpio_oe_storage);
assign gpio_out_pad = gpio_out_storage;
always @(*) begin
    la_iena <= 128'd0;
    la_iena[0] <= (~la_ien_storage[0]);
    la_iena[1] <= (~la_ien_storage[1]);
    la_iena[2] <= (~la_ien_storage[2]);
    la_iena[3] <= (~la_ien_storage[3]);
    la_iena[4] <= (~la_ien_storage[4]);
    la_iena[5] <= (~la_ien_storage[5]);
    la_iena[6] <= (~la_ien_storage[6]);
    la_iena[7] <= (~la_ien_storage[7]);
    la_iena[8] <= (~la_ien_storage[8]);
    la_iena[9] <= (~la_ien_storage[9]);
    la_iena[10] <= (~la_ien_storage[10]);
    la_iena[11] <= (~la_ien_storage[11]);
    la_iena[12] <= (~la_ien_storage[12]);
    la_iena[13] <= (~la_ien_storage[13]);
    la_iena[14] <= (~la_ien_storage[14]);
    la_iena[15] <= (~la_ien_storage[15]);
    la_iena[16] <= (~la_ien_storage[16]);
    la_iena[17] <= (~la_ien_storage[17]);
    la_iena[18] <= (~la_ien_storage[18]);
    la_iena[19] <= (~la_ien_storage[19]);
    la_iena[20] <= (~la_ien_storage[20]);
    la_iena[21] <= (~la_ien_storage[21]);
    la_iena[22] <= (~la_ien_storage[22]);
    la_iena[23] <= (~la_ien_storage[23]);
    la_iena[24] <= (~la_ien_storage[24]);
    la_iena[25] <= (~la_ien_storage[25]);
    la_iena[26] <= (~la_ien_storage[26]);
    la_iena[27] <= (~la_ien_storage[27]);
    la_iena[28] <= (~la_ien_storage[28]);
    la_iena[29] <= (~la_ien_storage[29]);
    la_iena[30] <= (~la_ien_storage[30]);
    la_iena[31] <= (~la_ien_storage[31]);
    la_iena[32] <= (~la_ien_storage[32]);
    la_iena[33] <= (~la_ien_storage[33]);
    la_iena[34] <= (~la_ien_storage[34]);
    la_iena[35] <= (~la_ien_storage[35]);
    la_iena[36] <= (~la_ien_storage[36]);
    la_iena[37] <= (~la_ien_storage[37]);
    la_iena[38] <= (~la_ien_storage[38]);
    la_iena[39] <= (~la_ien_storage[39]);
    la_iena[40] <= (~la_ien_storage[40]);
    la_iena[41] <= (~la_ien_storage[41]);
    la_iena[42] <= (~la_ien_storage[42]);
    la_iena[43] <= (~la_ien_storage[43]);
    la_iena[44] <= (~la_ien_storage[44]);
    la_iena[45] <= (~la_ien_storage[45]);
    la_iena[46] <= (~la_ien_storage[46]);
    la_iena[47] <= (~la_ien_storage[47]);
    la_iena[48] <= (~la_ien_storage[48]);
    la_iena[49] <= (~la_ien_storage[49]);
    la_iena[50] <= (~la_ien_storage[50]);
    la_iena[51] <= (~la_ien_storage[51]);
    la_iena[52] <= (~la_ien_storage[52]);
    la_iena[53] <= (~la_ien_storage[53]);
    la_iena[54] <= (~la_ien_storage[54]);
    la_iena[55] <= (~la_ien_storage[55]);
    la_iena[56] <= (~la_ien_storage[56]);
    la_iena[57] <= (~la_ien_storage[57]);
    la_iena[58] <= (~la_ien_storage[58]);
    la_iena[59] <= (~la_ien_storage[59]);
    la_iena[60] <= (~la_ien_storage[60]);
    la_iena[61] <= (~la_ien_storage[61]);
    la_iena[62] <= (~la_ien_storage[62]);
    la_iena[63] <= (~la_ien_storage[63]);
    la_iena[64] <= (~la_ien_storage[64]);
    la_iena[65] <= (~la_ien_storage[65]);
    la_iena[66] <= (~la_ien_storage[66]);
    la_iena[67] <= (~la_ien_storage[67]);
    la_iena[68] <= (~la_ien_storage[68]);
    la_iena[69] <= (~la_ien_storage[69]);
    la_iena[70] <= (~la_ien_storage[70]);
    la_iena[71] <= (~la_ien_storage[71]);
    la_iena[72] <= (~la_ien_storage[72]);
    la_iena[73] <= (~la_ien_storage[73]);
    la_iena[74] <= (~la_ien_storage[74]);
    la_iena[75] <= (~la_ien_storage[75]);
    la_iena[76] <= (~la_ien_storage[76]);
    la_iena[77] <= (~la_ien_storage[77]);
    la_iena[78] <= (~la_ien_storage[78]);
    la_iena[79] <= (~la_ien_storage[79]);
    la_iena[80] <= (~la_ien_storage[80]);
    la_iena[81] <= (~la_ien_storage[81]);
    la_iena[82] <= (~la_ien_storage[82]);
    la_iena[83] <= (~la_ien_storage[83]);
    la_iena[84] <= (~la_ien_storage[84]);
    la_iena[85] <= (~la_ien_storage[85]);
    la_iena[86] <= (~la_ien_storage[86]);
    la_iena[87] <= (~la_ien_storage[87]);
    la_iena[88] <= (~la_ien_storage[88]);
    la_iena[89] <= (~la_ien_storage[89]);
    la_iena[90] <= (~la_ien_storage[90]);
    la_iena[91] <= (~la_ien_storage[91]);
    la_iena[92] <= (~la_ien_storage[92]);
    la_iena[93] <= (~la_ien_storage[93]);
    la_iena[94] <= (~la_ien_storage[94]);
    la_iena[95] <= (~la_ien_storage[95]);
    la_iena[96] <= (~la_ien_storage[96]);
    la_iena[97] <= (~la_ien_storage[97]);
    la_iena[98] <= (~la_ien_storage[98]);
    la_iena[99] <= (~la_ien_storage[99]);
    la_iena[100] <= (~la_ien_storage[100]);
    la_iena[101] <= (~la_ien_storage[101]);
    la_iena[102] <= (~la_ien_storage[102]);
    la_iena[103] <= (~la_ien_storage[103]);
    la_iena[104] <= (~la_ien_storage[104]);
    la_iena[105] <= (~la_ien_storage[105]);
    la_iena[106] <= (~la_ien_storage[106]);
    la_iena[107] <= (~la_ien_storage[107]);
    la_iena[108] <= (~la_ien_storage[108]);
    la_iena[109] <= (~la_ien_storage[109]);
    la_iena[110] <= (~la_ien_storage[110]);
    la_iena[111] <= (~la_ien_storage[111]);
    la_iena[112] <= (~la_ien_storage[112]);
    la_iena[113] <= (~la_ien_storage[113]);
    la_iena[114] <= (~la_ien_storage[114]);
    la_iena[115] <= (~la_ien_storage[115]);
    la_iena[116] <= (~la_ien_storage[116]);
    la_iena[117] <= (~la_ien_storage[117]);
    la_iena[118] <= (~la_ien_storage[118]);
    la_iena[119] <= (~la_ien_storage[119]);
    la_iena[120] <= (~la_ien_storage[120]);
    la_iena[121] <= (~la_ien_storage[121]);
    la_iena[122] <= (~la_ien_storage[122]);
    la_iena[123] <= (~la_ien_storage[123]);
    la_iena[124] <= (~la_ien_storage[124]);
    la_iena[125] <= (~la_ien_storage[125]);
    la_iena[126] <= (~la_ien_storage[126]);
    la_iena[127] <= (~la_ien_storage[127]);
end
always @(*) begin
    la_oenb <= 128'd0;
    la_oenb[0] <= (~la_oe_storage[0]);
    la_oenb[1] <= (~la_oe_storage[1]);
    la_oenb[2] <= (~la_oe_storage[2]);
    la_oenb[3] <= (~la_oe_storage[3]);
    la_oenb[4] <= (~la_oe_storage[4]);
    la_oenb[5] <= (~la_oe_storage[5]);
    la_oenb[6] <= (~la_oe_storage[6]);
    la_oenb[7] <= (~la_oe_storage[7]);
    la_oenb[8] <= (~la_oe_storage[8]);
    la_oenb[9] <= (~la_oe_storage[9]);
    la_oenb[10] <= (~la_oe_storage[10]);
    la_oenb[11] <= (~la_oe_storage[11]);
    la_oenb[12] <= (~la_oe_storage[12]);
    la_oenb[13] <= (~la_oe_storage[13]);
    la_oenb[14] <= (~la_oe_storage[14]);
    la_oenb[15] <= (~la_oe_storage[15]);
    la_oenb[16] <= (~la_oe_storage[16]);
    la_oenb[17] <= (~la_oe_storage[17]);
    la_oenb[18] <= (~la_oe_storage[18]);
    la_oenb[19] <= (~la_oe_storage[19]);
    la_oenb[20] <= (~la_oe_storage[20]);
    la_oenb[21] <= (~la_oe_storage[21]);
    la_oenb[22] <= (~la_oe_storage[22]);
    la_oenb[23] <= (~la_oe_storage[23]);
    la_oenb[24] <= (~la_oe_storage[24]);
    la_oenb[25] <= (~la_oe_storage[25]);
    la_oenb[26] <= (~la_oe_storage[26]);
    la_oenb[27] <= (~la_oe_storage[27]);
    la_oenb[28] <= (~la_oe_storage[28]);
    la_oenb[29] <= (~la_oe_storage[29]);
    la_oenb[30] <= (~la_oe_storage[30]);
    la_oenb[31] <= (~la_oe_storage[31]);
    la_oenb[32] <= (~la_oe_storage[32]);
    la_oenb[33] <= (~la_oe_storage[33]);
    la_oenb[34] <= (~la_oe_storage[34]);
    la_oenb[35] <= (~la_oe_storage[35]);
    la_oenb[36] <= (~la_oe_storage[36]);
    la_oenb[37] <= (~la_oe_storage[37]);
    la_oenb[38] <= (~la_oe_storage[38]);
    la_oenb[39] <= (~la_oe_storage[39]);
    la_oenb[40] <= (~la_oe_storage[40]);
    la_oenb[41] <= (~la_oe_storage[41]);
    la_oenb[42] <= (~la_oe_storage[42]);
    la_oenb[43] <= (~la_oe_storage[43]);
    la_oenb[44] <= (~la_oe_storage[44]);
    la_oenb[45] <= (~la_oe_storage[45]);
    la_oenb[46] <= (~la_oe_storage[46]);
    la_oenb[47] <= (~la_oe_storage[47]);
    la_oenb[48] <= (~la_oe_storage[48]);
    la_oenb[49] <= (~la_oe_storage[49]);
    la_oenb[50] <= (~la_oe_storage[50]);
    la_oenb[51] <= (~la_oe_storage[51]);
    la_oenb[52] <= (~la_oe_storage[52]);
    la_oenb[53] <= (~la_oe_storage[53]);
    la_oenb[54] <= (~la_oe_storage[54]);
    la_oenb[55] <= (~la_oe_storage[55]);
    la_oenb[56] <= (~la_oe_storage[56]);
    la_oenb[57] <= (~la_oe_storage[57]);
    la_oenb[58] <= (~la_oe_storage[58]);
    la_oenb[59] <= (~la_oe_storage[59]);
    la_oenb[60] <= (~la_oe_storage[60]);
    la_oenb[61] <= (~la_oe_storage[61]);
    la_oenb[62] <= (~la_oe_storage[62]);
    la_oenb[63] <= (~la_oe_storage[63]);
    la_oenb[64] <= (~la_oe_storage[64]);
    la_oenb[65] <= (~la_oe_storage[65]);
    la_oenb[66] <= (~la_oe_storage[66]);
    la_oenb[67] <= (~la_oe_storage[67]);
    la_oenb[68] <= (~la_oe_storage[68]);
    la_oenb[69] <= (~la_oe_storage[69]);
    la_oenb[70] <= (~la_oe_storage[70]);
    la_oenb[71] <= (~la_oe_storage[71]);
    la_oenb[72] <= (~la_oe_storage[72]);
    la_oenb[73] <= (~la_oe_storage[73]);
    la_oenb[74] <= (~la_oe_storage[74]);
    la_oenb[75] <= (~la_oe_storage[75]);
    la_oenb[76] <= (~la_oe_storage[76]);
    la_oenb[77] <= (~la_oe_storage[77]);
    la_oenb[78] <= (~la_oe_storage[78]);
    la_oenb[79] <= (~la_oe_storage[79]);
    la_oenb[80] <= (~la_oe_storage[80]);
    la_oenb[81] <= (~la_oe_storage[81]);
    la_oenb[82] <= (~la_oe_storage[82]);
    la_oenb[83] <= (~la_oe_storage[83]);
    la_oenb[84] <= (~la_oe_storage[84]);
    la_oenb[85] <= (~la_oe_storage[85]);
    la_oenb[86] <= (~la_oe_storage[86]);
    la_oenb[87] <= (~la_oe_storage[87]);
    la_oenb[88] <= (~la_oe_storage[88]);
    la_oenb[89] <= (~la_oe_storage[89]);
    la_oenb[90] <= (~la_oe_storage[90]);
    la_oenb[91] <= (~la_oe_storage[91]);
    la_oenb[92] <= (~la_oe_storage[92]);
    la_oenb[93] <= (~la_oe_storage[93]);
    la_oenb[94] <= (~la_oe_storage[94]);
    la_oenb[95] <= (~la_oe_storage[95]);
    la_oenb[96] <= (~la_oe_storage[96]);
    la_oenb[97] <= (~la_oe_storage[97]);
    la_oenb[98] <= (~la_oe_storage[98]);
    la_oenb[99] <= (~la_oe_storage[99]);
    la_oenb[100] <= (~la_oe_storage[100]);
    la_oenb[101] <= (~la_oe_storage[101]);
    la_oenb[102] <= (~la_oe_storage[102]);
    la_oenb[103] <= (~la_oe_storage[103]);
    la_oenb[104] <= (~la_oe_storage[104]);
    la_oenb[105] <= (~la_oe_storage[105]);
    la_oenb[106] <= (~la_oe_storage[106]);
    la_oenb[107] <= (~la_oe_storage[107]);
    la_oenb[108] <= (~la_oe_storage[108]);
    la_oenb[109] <= (~la_oe_storage[109]);
    la_oenb[110] <= (~la_oe_storage[110]);
    la_oenb[111] <= (~la_oe_storage[111]);
    la_oenb[112] <= (~la_oe_storage[112]);
    la_oenb[113] <= (~la_oe_storage[113]);
    la_oenb[114] <= (~la_oe_storage[114]);
    la_oenb[115] <= (~la_oe_storage[115]);
    la_oenb[116] <= (~la_oe_storage[116]);
    la_oenb[117] <= (~la_oe_storage[117]);
    la_oenb[118] <= (~la_oe_storage[118]);
    la_oenb[119] <= (~la_oe_storage[119]);
    la_oenb[120] <= (~la_oe_storage[120]);
    la_oenb[121] <= (~la_oe_storage[121]);
    la_oenb[122] <= (~la_oe_storage[122]);
    la_oenb[123] <= (~la_oe_storage[123]);
    la_oenb[124] <= (~la_oe_storage[124]);
    la_oenb[125] <= (~la_oe_storage[125]);
    la_oenb[126] <= (~la_oe_storage[126]);
    la_oenb[127] <= (~la_oe_storage[127]);
end
always @(*) begin
    la_output <= 128'd0;
    la_output[0] <= la_out_storage[0];
    la_output[1] <= la_out_storage[1];
    la_output[2] <= la_out_storage[2];
    la_output[3] <= la_out_storage[3];
    la_output[4] <= la_out_storage[4];
    la_output[5] <= la_out_storage[5];
    la_output[6] <= la_out_storage[6];
    la_output[7] <= la_out_storage[7];
    la_output[8] <= la_out_storage[8];
    la_output[9] <= la_out_storage[9];
    la_output[10] <= la_out_storage[10];
    la_output[11] <= la_out_storage[11];
    la_output[12] <= la_out_storage[12];
    la_output[13] <= la_out_storage[13];
    la_output[14] <= la_out_storage[14];
    la_output[15] <= la_out_storage[15];
    la_output[16] <= la_out_storage[16];
    la_output[17] <= la_out_storage[17];
    la_output[18] <= la_out_storage[18];
    la_output[19] <= la_out_storage[19];
    la_output[20] <= la_out_storage[20];
    la_output[21] <= la_out_storage[21];
    la_output[22] <= la_out_storage[22];
    la_output[23] <= la_out_storage[23];
    la_output[24] <= la_out_storage[24];
    la_output[25] <= la_out_storage[25];
    la_output[26] <= la_out_storage[26];
    la_output[27] <= la_out_storage[27];
    la_output[28] <= la_out_storage[28];
    la_output[29] <= la_out_storage[29];
    la_output[30] <= la_out_storage[30];
    la_output[31] <= la_out_storage[31];
    la_output[32] <= la_out_storage[32];
    la_output[33] <= la_out_storage[33];
    la_output[34] <= la_out_storage[34];
    la_output[35] <= la_out_storage[35];
    la_output[36] <= la_out_storage[36];
    la_output[37] <= la_out_storage[37];
    la_output[38] <= la_out_storage[38];
    la_output[39] <= la_out_storage[39];
    la_output[40] <= la_out_storage[40];
    la_output[41] <= la_out_storage[41];
    la_output[42] <= la_out_storage[42];
    la_output[43] <= la_out_storage[43];
    la_output[44] <= la_out_storage[44];
    la_output[45] <= la_out_storage[45];
    la_output[46] <= la_out_storage[46];
    la_output[47] <= la_out_storage[47];
    la_output[48] <= la_out_storage[48];
    la_output[49] <= la_out_storage[49];
    la_output[50] <= la_out_storage[50];
    la_output[51] <= la_out_storage[51];
    la_output[52] <= la_out_storage[52];
    la_output[53] <= la_out_storage[53];
    la_output[54] <= la_out_storage[54];
    la_output[55] <= la_out_storage[55];
    la_output[56] <= la_out_storage[56];
    la_output[57] <= la_out_storage[57];
    la_output[58] <= la_out_storage[58];
    la_output[59] <= la_out_storage[59];
    la_output[60] <= la_out_storage[60];
    la_output[61] <= la_out_storage[61];
    la_output[62] <= la_out_storage[62];
    la_output[63] <= la_out_storage[63];
    la_output[64] <= la_out_storage[64];
    la_output[65] <= la_out_storage[65];
    la_output[66] <= la_out_storage[66];
    la_output[67] <= la_out_storage[67];
    la_output[68] <= la_out_storage[68];
    la_output[69] <= la_out_storage[69];
    la_output[70] <= la_out_storage[70];
    la_output[71] <= la_out_storage[71];
    la_output[72] <= la_out_storage[72];
    la_output[73] <= la_out_storage[73];
    la_output[74] <= la_out_storage[74];
    la_output[75] <= la_out_storage[75];
    la_output[76] <= la_out_storage[76];
    la_output[77] <= la_out_storage[77];
    la_output[78] <= la_out_storage[78];
    la_output[79] <= la_out_storage[79];
    la_output[80] <= la_out_storage[80];
    la_output[81] <= la_out_storage[81];
    la_output[82] <= la_out_storage[82];
    la_output[83] <= la_out_storage[83];
    la_output[84] <= la_out_storage[84];
    la_output[85] <= la_out_storage[85];
    la_output[86] <= la_out_storage[86];
    la_output[87] <= la_out_storage[87];
    la_output[88] <= la_out_storage[88];
    la_output[89] <= la_out_storage[89];
    la_output[90] <= la_out_storage[90];
    la_output[91] <= la_out_storage[91];
    la_output[92] <= la_out_storage[92];
    la_output[93] <= la_out_storage[93];
    la_output[94] <= la_out_storage[94];
    la_output[95] <= la_out_storage[95];
    la_output[96] <= la_out_storage[96];
    la_output[97] <= la_out_storage[97];
    la_output[98] <= la_out_storage[98];
    la_output[99] <= la_out_storage[99];
    la_output[100] <= la_out_storage[100];
    la_output[101] <= la_out_storage[101];
    la_output[102] <= la_out_storage[102];
    la_output[103] <= la_out_storage[103];
    la_output[104] <= la_out_storage[104];
    la_output[105] <= la_out_storage[105];
    la_output[106] <= la_out_storage[106];
    la_output[107] <= la_out_storage[107];
    la_output[108] <= la_out_storage[108];
    la_output[109] <= la_out_storage[109];
    la_output[110] <= la_out_storage[110];
    la_output[111] <= la_out_storage[111];
    la_output[112] <= la_out_storage[112];
    la_output[113] <= la_out_storage[113];
    la_output[114] <= la_out_storage[114];
    la_output[115] <= la_out_storage[115];
    la_output[116] <= la_out_storage[116];
    la_output[117] <= la_out_storage[117];
    la_output[118] <= la_out_storage[118];
    la_output[119] <= la_out_storage[119];
    la_output[120] <= la_out_storage[120];
    la_output[121] <= la_out_storage[121];
    la_output[122] <= la_out_storage[122];
    la_output[123] <= la_out_storage[123];
    la_output[124] <= la_out_storage[124];
    la_output[125] <= la_out_storage[125];
    la_output[126] <= la_out_storage[126];
    la_output[127] <= la_out_storage[127];
end
assign spi_enabled = spi_enabled_storage;
assign user_irq_ena = user_irq_ena_storage;
always @(*) begin
    gpioin0_gpioin0_trigger <= 1'd0;
    if (gpioin0_gpioin0_mode_storage) begin
        gpioin0_gpioin0_trigger <= (gpioin0_in_status ^ gpioin0_gpioin0_in_pads_n_d);
    end else begin
        gpioin0_gpioin0_trigger <= (gpioin0_in_status ^ gpioin0_gpioin0_edge_storage);
    end
end
assign gpioin0_gpioin0_i00 = gpioin0_gpioin0_status;
assign gpioin0_gpioin0_i01 = gpioin0_gpioin0_pending;
always @(*) begin
    gpioin0_gpioin0_clear <= 1'd0;
    if ((gpioin0_gpioin0_pending_re & gpioin0_gpioin0_pending_r)) begin
        gpioin0_gpioin0_clear <= 1'd1;
    end
end
assign gpioin0_gpioin0_irq = (gpioin0_gpioin0_pending_status & gpioin0_gpioin0_enable_storage);
assign gpioin0_gpioin0_status = gpioin0_gpioin0_trigger;
always @(*) begin
    gpioin1_gpioin1_trigger <= 1'd0;
    if (gpioin1_gpioin1_mode_storage) begin
        gpioin1_gpioin1_trigger <= (gpioin1_in_status ^ gpioin1_gpioin1_in_pads_n_d);
    end else begin
        gpioin1_gpioin1_trigger <= (gpioin1_in_status ^ gpioin1_gpioin1_edge_storage);
    end
end
assign gpioin1_gpioin1_i00 = gpioin1_gpioin1_status;
assign gpioin1_gpioin1_i01 = gpioin1_gpioin1_pending;
always @(*) begin
    gpioin1_gpioin1_clear <= 1'd0;
    if ((gpioin1_gpioin1_pending_re & gpioin1_gpioin1_pending_r)) begin
        gpioin1_gpioin1_clear <= 1'd1;
    end
end
assign gpioin1_gpioin1_irq = (gpioin1_gpioin1_pending_status & gpioin1_gpioin1_enable_storage);
assign gpioin1_gpioin1_status = gpioin1_gpioin1_trigger;
always @(*) begin
    gpioin2_gpioin2_trigger <= 1'd0;
    if (gpioin2_gpioin2_mode_storage) begin
        gpioin2_gpioin2_trigger <= (gpioin2_in_status ^ gpioin2_gpioin2_in_pads_n_d);
    end else begin
        gpioin2_gpioin2_trigger <= (gpioin2_in_status ^ gpioin2_gpioin2_edge_storage);
    end
end
assign gpioin2_gpioin2_i00 = gpioin2_gpioin2_status;
assign gpioin2_gpioin2_i01 = gpioin2_gpioin2_pending;
always @(*) begin
    gpioin2_gpioin2_clear <= 1'd0;
    if ((gpioin2_gpioin2_pending_re & gpioin2_gpioin2_pending_r)) begin
        gpioin2_gpioin2_clear <= 1'd1;
    end
end
assign gpioin2_gpioin2_irq = (gpioin2_gpioin2_pending_status & gpioin2_gpioin2_enable_storage);
assign gpioin2_gpioin2_status = gpioin2_gpioin2_trigger;
always @(*) begin
    gpioin3_gpioin3_trigger <= 1'd0;
    if (gpioin3_gpioin3_mode_storage) begin
        gpioin3_gpioin3_trigger <= (gpioin3_in_status ^ gpioin3_gpioin3_in_pads_n_d);
    end else begin
        gpioin3_gpioin3_trigger <= (gpioin3_in_status ^ gpioin3_gpioin3_edge_storage);
    end
end
assign gpioin3_gpioin3_i00 = gpioin3_gpioin3_status;
assign gpioin3_gpioin3_i01 = gpioin3_gpioin3_pending;
always @(*) begin
    gpioin3_gpioin3_clear <= 1'd0;
    if ((gpioin3_gpioin3_pending_re & gpioin3_gpioin3_pending_r)) begin
        gpioin3_gpioin3_clear <= 1'd1;
    end
end
assign gpioin3_gpioin3_irq = (gpioin3_gpioin3_pending_status & gpioin3_gpioin3_enable_storage);
assign gpioin3_gpioin3_status = gpioin3_gpioin3_trigger;
always @(*) begin
    gpioin4_gpioin4_trigger <= 1'd0;
    if (gpioin4_gpioin4_mode_storage) begin
        gpioin4_gpioin4_trigger <= (gpioin4_in_status ^ gpioin4_gpioin4_in_pads_n_d);
    end else begin
        gpioin4_gpioin4_trigger <= (gpioin4_in_status ^ gpioin4_gpioin4_edge_storage);
    end
end
assign gpioin4_gpioin4_i00 = gpioin4_gpioin4_status;
assign gpioin4_gpioin4_i01 = gpioin4_gpioin4_pending;
always @(*) begin
    gpioin4_gpioin4_clear <= 1'd0;
    if ((gpioin4_gpioin4_pending_re & gpioin4_gpioin4_pending_r)) begin
        gpioin4_gpioin4_clear <= 1'd1;
    end
end
assign gpioin4_gpioin4_irq = (gpioin4_gpioin4_pending_status & gpioin4_gpioin4_enable_storage);
assign gpioin4_gpioin4_status = gpioin4_gpioin4_trigger;
always @(*) begin
    gpioin5_gpioin5_trigger <= 1'd0;
    if (gpioin5_gpioin5_mode_storage) begin
        gpioin5_gpioin5_trigger <= (gpioin5_in_status ^ gpioin5_gpioin5_in_pads_n_d);
    end else begin
        gpioin5_gpioin5_trigger <= (gpioin5_in_status ^ gpioin5_gpioin5_edge_storage);
    end
end
assign gpioin5_gpioin5_i00 = gpioin5_gpioin5_status;
assign gpioin5_gpioin5_i01 = gpioin5_gpioin5_pending;
always @(*) begin
    gpioin5_gpioin5_clear <= 1'd0;
    if ((gpioin5_gpioin5_pending_re & gpioin5_gpioin5_pending_r)) begin
        gpioin5_gpioin5_clear <= 1'd1;
    end
end
assign gpioin5_gpioin5_irq = (gpioin5_gpioin5_pending_status & gpioin5_gpioin5_enable_storage);
assign gpioin5_gpioin5_status = gpioin5_gpioin5_trigger;
always @(*) begin
    wishbone2csr_next_state <= 1'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    interface1_adr <= 14'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr;
            end
        end
    endcase
end
always @(*) begin
    interface1_re <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_re <= ((~interface0_we) & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface1_we <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface1_dat_w <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
        end
    endcase
end
always @(*) begin
    interface0_dat_r <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_dat_r <= interface1_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface0_ack <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank0_reset0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_we <= interface0_bank_bus_re;
    end
end
always @(*) begin
    csrbank0_reset0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_re <= interface0_bank_bus_we;
    end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w;
always @(*) begin
    csrbank0_scratch0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_we <= interface0_bank_bus_re;
    end
end
always @(*) begin
    csrbank0_scratch0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_re <= interface0_bank_bus_we;
    end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w;
always @(*) begin
    csrbank0_bus_errors_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_re <= interface0_bank_bus_we;
    end
end
always @(*) begin
    csrbank0_bus_errors_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_we <= interface0_bank_bus_re;
    end
end
always @(*) begin
    mgmtsoc_soc_rst <= 1'd0;
    if (mgmtsoc_reset_re) begin
        mgmtsoc_soc_rst <= mgmtsoc_reset_storage[0];
    end
end
assign mgmtsoc_cpu_rst = mgmtsoc_reset_storage[1];
assign csrbank0_reset0_w = mgmtsoc_reset_storage;
assign csrbank0_scratch0_w = mgmtsoc_scratch_storage;
assign csrbank0_bus_errors_w = mgmtsoc_bus_errors_status;
assign mgmtsoc_bus_errors_we = csrbank0_bus_errors_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_out0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_out0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_out0_we <= interface1_bank_bus_re;
    end
end
always @(*) begin
    csrbank1_out0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_out0_re <= interface1_bank_bus_we;
    end
end
assign csrbank1_out0_w = debug_mode_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd2);
assign csrbank2_out0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    csrbank2_out0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_out0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_out0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_out0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_out0_w = debug_oeb_storage;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd3);
assign csrbank3_mmap_dummy_bits0_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank3_mmap_dummy_bits0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_mmap_dummy_bits0_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank3_mmap_dummy_bits0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_mmap_dummy_bits0_we <= interface3_bank_bus_re;
    end
end
assign csrbank3_master_cs0_r = interface3_bank_bus_dat_w[0];
always @(*) begin
    csrbank3_master_cs0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank3_master_cs0_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank3_master_cs0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank3_master_cs0_re <= interface3_bank_bus_we;
    end
end
assign csrbank3_master_phyconfig0_r = interface3_bank_bus_dat_w[23:0];
always @(*) begin
    csrbank3_master_phyconfig0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank3_master_phyconfig0_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank3_master_phyconfig0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank3_master_phyconfig0_we <= interface3_bank_bus_re;
    end
end
assign mgmtsoc_master_rxtx_r = interface3_bank_bus_dat_w;
always @(*) begin
    mgmtsoc_master_rxtx_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
        mgmtsoc_master_rxtx_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    mgmtsoc_master_rxtx_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
        mgmtsoc_master_rxtx_we <= interface3_bank_bus_re;
    end
end
assign csrbank3_master_status_r = interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank3_master_status_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank3_master_status_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank3_master_status_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank3_master_status_re <= interface3_bank_bus_we;
    end
end
assign csrbank3_mmap_dummy_bits0_w = mgmtsoc_mmap_storage;
assign csrbank3_master_cs0_w = mgmtsoc_master_cs_storage;
assign mgmtsoc_master_len = mgmtsoc_master_phyconfig_storage[7:0];
assign mgmtsoc_master_width = mgmtsoc_master_phyconfig_storage[11:8];
assign mgmtsoc_master_mask = mgmtsoc_master_phyconfig_storage[23:16];
assign csrbank3_master_phyconfig0_w = mgmtsoc_master_phyconfig_storage;
always @(*) begin
    mgmtsoc_master_status_status <= 2'd0;
    mgmtsoc_master_status_status[0] <= mgmtsoc_master_tx_ready;
    mgmtsoc_master_status_status[1] <= mgmtsoc_master_rx_ready;
end
assign csrbank3_master_status_w = mgmtsoc_master_status_status;
assign mgmtsoc_master_status_we = csrbank3_master_status_we;
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 3'd4);
assign csrbank4_clk_divisor0_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank4_clk_divisor0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_clk_divisor0_we <= interface4_bank_bus_re;
    end
end
always @(*) begin
    csrbank4_clk_divisor0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_clk_divisor0_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_clk_divisor0_w = mgmtsoc_litespisdrphycore_storage;
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd5);
assign csrbank5_mode10_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_mode10_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank5_mode10_we <= interface5_bank_bus_re;
    end
end
always @(*) begin
    csrbank5_mode10_re <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank5_mode10_re <= interface5_bank_bus_we;
    end
end
assign csrbank5_mode00_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_mode00_re <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank5_mode00_re <= interface5_bank_bus_we;
    end
end
always @(*) begin
    csrbank5_mode00_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank5_mode00_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_ien0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_ien0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank5_ien0_we <= interface5_bank_bus_re;
    end
end
always @(*) begin
    csrbank5_ien0_re <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank5_ien0_re <= interface5_bank_bus_we;
    end
end
assign csrbank5_oe0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_oe0_re <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank5_oe0_re <= interface5_bank_bus_we;
    end
end
always @(*) begin
    csrbank5_oe0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank5_oe0_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_in_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_in_re <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank5_in_re <= interface5_bank_bus_we;
    end
end
always @(*) begin
    csrbank5_in_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank5_in_we <= interface5_bank_bus_re;
    end
end
assign csrbank5_out0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_out0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank5_out0_we <= interface5_bank_bus_re;
    end
end
always @(*) begin
    csrbank5_out0_re <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank5_out0_re <= interface5_bank_bus_we;
    end
end
assign csrbank5_mode10_w = gpio_mode1_storage;
assign csrbank5_mode00_w = gpio_mode0_storage;
assign csrbank5_ien0_w = gpio_ien_storage;
assign csrbank5_oe0_w = gpio_oe_storage;
assign csrbank5_in_w = gpio_in_status;
assign gpio_in_we = csrbank5_in_we;
assign csrbank5_out0_w = gpio_out_storage;
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 3'd6);
assign csrbank6_ien3_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_ien3_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank6_ien3_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_ien3_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank6_ien3_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_ien2_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_ien2_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank6_ien2_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_ien2_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank6_ien2_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ien1_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_ien1_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank6_ien1_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_ien1_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank6_ien1_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_ien0_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_ien0_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank6_ien0_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_ien0_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank6_ien0_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_oe3_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_oe3_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank6_oe3_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_oe3_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank6_oe3_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_oe2_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_oe2_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank6_oe2_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_oe2_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank6_oe2_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_oe1_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_oe1_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank6_oe1_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_oe1_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank6_oe1_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_oe0_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_oe0_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank6_oe0_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_oe0_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank6_oe0_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_in3_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_in3_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank6_in3_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_in3_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank6_in3_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_in2_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_in2_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank6_in2_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_in2_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank6_in2_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_in1_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_in1_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank6_in1_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_in1_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank6_in1_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_in0_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_in0_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd11))) begin
        csrbank6_in0_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_in0_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd11))) begin
        csrbank6_in0_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_out3_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_out3_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd12))) begin
        csrbank6_out3_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_out3_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd12))) begin
        csrbank6_out3_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_out2_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_out2_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd13))) begin
        csrbank6_out2_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_out2_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd13))) begin
        csrbank6_out2_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_out1_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_out1_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd14))) begin
        csrbank6_out1_re <= interface6_bank_bus_we;
    end
end
always @(*) begin
    csrbank6_out1_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd14))) begin
        csrbank6_out1_we <= interface6_bank_bus_re;
    end
end
assign csrbank6_out0_r = interface6_bank_bus_dat_w;
always @(*) begin
    csrbank6_out0_we <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd15))) begin
        csrbank6_out0_we <= interface6_bank_bus_re;
    end
end
always @(*) begin
    csrbank6_out0_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd15))) begin
        csrbank6_out0_re <= interface6_bank_bus_we;
    end
end
assign csrbank6_ien3_w = la_ien_storage[127:96];
assign csrbank6_ien2_w = la_ien_storage[95:64];
assign csrbank6_ien1_w = la_ien_storage[63:32];
assign csrbank6_ien0_w = la_ien_storage[31:0];
assign csrbank6_oe3_w = la_oe_storage[127:96];
assign csrbank6_oe2_w = la_oe_storage[95:64];
assign csrbank6_oe1_w = la_oe_storage[63:32];
assign csrbank6_oe0_w = la_oe_storage[31:0];
assign csrbank6_in3_w = la_in_status[127:96];
assign csrbank6_in2_w = la_in_status[95:64];
assign csrbank6_in1_w = la_in_status[63:32];
assign csrbank6_in0_w = la_in_status[31:0];
assign la_in_we = csrbank6_in0_we;
assign csrbank6_out3_w = la_out_storage[127:96];
assign csrbank6_out2_w = la_out_storage[95:64];
assign csrbank6_out1_w = la_out_storage[63:32];
assign csrbank6_out0_w = la_out_storage[31:0];
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 3'd7);
assign csrbank7_out0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_out0_re <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank7_out0_re <= interface7_bank_bus_we;
    end
end
always @(*) begin
    csrbank7_out0_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank7_out0_we <= interface7_bank_bus_re;
    end
end
assign csrbank7_out0_w = mprj_wb_iena_storage;
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 4'd8);
assign csrbank8_out0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
    csrbank8_out0_we <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank8_out0_we <= interface8_bank_bus_re;
    end
end
always @(*) begin
    csrbank8_out0_re <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank8_out0_re <= interface8_bank_bus_we;
    end
end
assign csrbank8_out0_w = spi_enabled_storage;
assign csrbank9_sel = (interface9_bank_bus_adr[13:9] == 4'd9);
assign csrbank9_control0_r = interface9_bank_bus_dat_w[15:0];
always @(*) begin
    csrbank9_control0_we <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank9_control0_we <= interface9_bank_bus_re;
    end
end
always @(*) begin
    csrbank9_control0_re <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank9_control0_re <= interface9_bank_bus_we;
    end
end
assign csrbank9_status_r = interface9_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank9_status_re <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank9_status_re <= interface9_bank_bus_we;
    end
end
always @(*) begin
    csrbank9_status_we <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank9_status_we <= interface9_bank_bus_re;
    end
end
assign csrbank9_mosi0_r = interface9_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank9_mosi0_re <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank9_mosi0_re <= interface9_bank_bus_we;
    end
end
always @(*) begin
    csrbank9_mosi0_we <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank9_mosi0_we <= interface9_bank_bus_re;
    end
end
assign csrbank9_miso_r = interface9_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank9_miso_we <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank9_miso_we <= interface9_bank_bus_re;
    end
end
always @(*) begin
    csrbank9_miso_re <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank9_miso_re <= interface9_bank_bus_we;
    end
end
assign csrbank9_cs0_r = interface9_bank_bus_dat_w[16:0];
always @(*) begin
    csrbank9_cs0_re <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank9_cs0_re <= interface9_bank_bus_we;
    end
end
always @(*) begin
    csrbank9_cs0_we <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank9_cs0_we <= interface9_bank_bus_re;
    end
end
assign csrbank9_loopback0_r = interface9_bank_bus_dat_w[0];
always @(*) begin
    csrbank9_loopback0_re <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank9_loopback0_re <= interface9_bank_bus_we;
    end
end
always @(*) begin
    csrbank9_loopback0_we <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank9_loopback0_we <= interface9_bank_bus_re;
    end
end
assign csrbank9_clk_divider0_r = interface9_bank_bus_dat_w[15:0];
always @(*) begin
    csrbank9_clk_divider0_we <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank9_clk_divider0_we <= interface9_bank_bus_re;
    end
end
always @(*) begin
    csrbank9_clk_divider0_re <= 1'd0;
    if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank9_clk_divider0_re <= interface9_bank_bus_we;
    end
end
always @(*) begin
    spi_master_start1 <= 1'd0;
    if (spi_master_control_re) begin
        spi_master_start1 <= spi_master_control_storage[0];
    end
end
assign spi_master_length1 = spi_master_control_storage[15:8];
assign csrbank9_control0_w = spi_master_control_storage;
always @(*) begin
    spi_master_status_status <= 2'd0;
    spi_master_status_status[0] <= spi_master_done1;
    spi_master_status_status[1] <= spi_master_mode0;
end
assign csrbank9_status_w = spi_master_status_status;
assign spi_master_status_we = csrbank9_status_we;
assign csrbank9_mosi0_w = spi_master_mosi_storage;
assign csrbank9_miso_w = spi_master_miso_status;
assign spi_master_miso_we = csrbank9_miso_we;
assign spi_master_sel = spi_master_cs_storage[0];
assign spi_master_mode1 = spi_master_cs_storage[16];
assign csrbank9_cs0_w = spi_master_cs_storage;
assign spi_master_mode2 = spi_master_loopback_storage;
assign csrbank9_loopback0_w = spi_master_loopback_storage;
assign csrbank9_clk_divider0_w = spimaster_storage;
assign csrbank10_sel = (interface10_bank_bus_adr[13:9] == 4'd10);
assign csrbank10_load0_r = interface10_bank_bus_dat_w;
always @(*) begin
    csrbank10_load0_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank10_load0_we <= interface10_bank_bus_re;
    end
end
always @(*) begin
    csrbank10_load0_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank10_load0_re <= interface10_bank_bus_we;
    end
end
assign csrbank10_reload0_r = interface10_bank_bus_dat_w;
always @(*) begin
    csrbank10_reload0_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank10_reload0_we <= interface10_bank_bus_re;
    end
end
always @(*) begin
    csrbank10_reload0_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank10_reload0_re <= interface10_bank_bus_we;
    end
end
assign csrbank10_en0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
    csrbank10_en0_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank10_en0_re <= interface10_bank_bus_we;
    end
end
always @(*) begin
    csrbank10_en0_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank10_en0_we <= interface10_bank_bus_re;
    end
end
assign csrbank10_update_value0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
    csrbank10_update_value0_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank10_update_value0_we <= interface10_bank_bus_re;
    end
end
always @(*) begin
    csrbank10_update_value0_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank10_update_value0_re <= interface10_bank_bus_we;
    end
end
assign csrbank10_value_r = interface10_bank_bus_dat_w;
always @(*) begin
    csrbank10_value_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank10_value_re <= interface10_bank_bus_we;
    end
end
always @(*) begin
    csrbank10_value_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank10_value_we <= interface10_bank_bus_re;
    end
end
assign csrbank10_ev_status_r = interface10_bank_bus_dat_w[0];
always @(*) begin
    csrbank10_ev_status_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank10_ev_status_re <= interface10_bank_bus_we;
    end
end
always @(*) begin
    csrbank10_ev_status_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank10_ev_status_we <= interface10_bank_bus_re;
    end
end
assign csrbank10_ev_pending_r = interface10_bank_bus_dat_w[0];
always @(*) begin
    csrbank10_ev_pending_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank10_ev_pending_we <= interface10_bank_bus_re;
    end
end
always @(*) begin
    csrbank10_ev_pending_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank10_ev_pending_re <= interface10_bank_bus_we;
    end
end
assign csrbank10_ev_enable0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
    csrbank10_ev_enable0_we <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank10_ev_enable0_we <= interface10_bank_bus_re;
    end
end
always @(*) begin
    csrbank10_ev_enable0_re <= 1'd0;
    if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank10_ev_enable0_re <= interface10_bank_bus_we;
    end
end
assign csrbank10_load0_w = mgmtsoc_load_storage;
assign csrbank10_reload0_w = mgmtsoc_reload_storage;
assign csrbank10_en0_w = mgmtsoc_en_storage;
assign csrbank10_update_value0_w = mgmtsoc_update_value_storage;
assign csrbank10_value_w = mgmtsoc_value_status;
assign mgmtsoc_value_we = csrbank10_value_we;
assign mgmtsoc_status_status = mgmtsoc_zero0;
assign csrbank10_ev_status_w = mgmtsoc_status_status;
assign mgmtsoc_status_we = csrbank10_ev_status_we;
assign mgmtsoc_pending_status = mgmtsoc_zero1;
assign csrbank10_ev_pending_w = mgmtsoc_pending_status;
assign mgmtsoc_pending_we = csrbank10_ev_pending_we;
assign mgmtsoc_zero2 = mgmtsoc_enable_storage;
assign csrbank10_ev_enable0_w = mgmtsoc_enable_storage;
assign csrbank11_sel = (interface11_bank_bus_adr[13:9] == 4'd11);
assign uart_rxtx_r = interface11_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_we <= interface11_bank_bus_re;
    end
end
always @(*) begin
    uart_rxtx_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= interface11_bank_bus_we;
    end
end
assign csrbank11_txfull_r = interface11_bank_bus_dat_w[0];
always @(*) begin
    csrbank11_txfull_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank11_txfull_re <= interface11_bank_bus_we;
    end
end
always @(*) begin
    csrbank11_txfull_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank11_txfull_we <= interface11_bank_bus_re;
    end
end
assign csrbank11_rxempty_r = interface11_bank_bus_dat_w[0];
always @(*) begin
    csrbank11_rxempty_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank11_rxempty_we <= interface11_bank_bus_re;
    end
end
always @(*) begin
    csrbank11_rxempty_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank11_rxempty_re <= interface11_bank_bus_we;
    end
end
assign csrbank11_ev_status_r = interface11_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank11_ev_status_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank11_ev_status_we <= interface11_bank_bus_re;
    end
end
always @(*) begin
    csrbank11_ev_status_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank11_ev_status_re <= interface11_bank_bus_we;
    end
end
assign csrbank11_ev_pending_r = interface11_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank11_ev_pending_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank11_ev_pending_re <= interface11_bank_bus_we;
    end
end
always @(*) begin
    csrbank11_ev_pending_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank11_ev_pending_we <= interface11_bank_bus_re;
    end
end
assign csrbank11_ev_enable0_r = interface11_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank11_ev_enable0_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank11_ev_enable0_we <= interface11_bank_bus_re;
    end
end
always @(*) begin
    csrbank11_ev_enable0_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank11_ev_enable0_re <= interface11_bank_bus_we;
    end
end
assign csrbank11_txempty_r = interface11_bank_bus_dat_w[0];
always @(*) begin
    csrbank11_txempty_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank11_txempty_we <= interface11_bank_bus_re;
    end
end
always @(*) begin
    csrbank11_txempty_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank11_txempty_re <= interface11_bank_bus_we;
    end
end
assign csrbank11_rxfull_r = interface11_bank_bus_dat_w[0];
always @(*) begin
    csrbank11_rxfull_re <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank11_rxfull_re <= interface11_bank_bus_we;
    end
end
always @(*) begin
    csrbank11_rxfull_we <= 1'd0;
    if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank11_rxfull_we <= interface11_bank_bus_re;
    end
end
assign csrbank11_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank11_txfull_we;
assign csrbank11_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank11_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csrbank11_ev_status_w = uart_status_status;
assign uart_status_we = csrbank11_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csrbank11_ev_pending_w = uart_pending_status;
assign uart_pending_we = csrbank11_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank11_ev_enable0_w = uart_enable_storage;
assign csrbank11_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank11_txempty_we;
assign csrbank11_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank11_rxfull_we;
assign csrbank12_sel = (interface12_bank_bus_adr[13:9] == 4'd12);
assign csrbank12_out0_r = interface12_bank_bus_dat_w[0];
always @(*) begin
    csrbank12_out0_we <= 1'd0;
    if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank12_out0_we <= interface12_bank_bus_re;
    end
end
always @(*) begin
    csrbank12_out0_re <= 1'd0;
    if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank12_out0_re <= interface12_bank_bus_we;
    end
end
assign csrbank12_out0_w = uart_enabled_storage;
assign csrbank13_sel = (interface13_bank_bus_adr[13:9] == 4'd13);
assign csrbank13_in_r = interface13_bank_bus_dat_w[0];
always @(*) begin
    csrbank13_in_we <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank13_in_we <= interface13_bank_bus_re;
    end
end
always @(*) begin
    csrbank13_in_re <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank13_in_re <= interface13_bank_bus_we;
    end
end
assign csrbank13_mode0_r = interface13_bank_bus_dat_w[0];
always @(*) begin
    csrbank13_mode0_re <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank13_mode0_re <= interface13_bank_bus_we;
    end
end
always @(*) begin
    csrbank13_mode0_we <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank13_mode0_we <= interface13_bank_bus_re;
    end
end
assign csrbank13_edge0_r = interface13_bank_bus_dat_w[0];
always @(*) begin
    csrbank13_edge0_re <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank13_edge0_re <= interface13_bank_bus_we;
    end
end
always @(*) begin
    csrbank13_edge0_we <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank13_edge0_we <= interface13_bank_bus_re;
    end
end
assign csrbank13_ev_status_r = interface13_bank_bus_dat_w[0];
always @(*) begin
    csrbank13_ev_status_we <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank13_ev_status_we <= interface13_bank_bus_re;
    end
end
always @(*) begin
    csrbank13_ev_status_re <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank13_ev_status_re <= interface13_bank_bus_we;
    end
end
assign csrbank13_ev_pending_r = interface13_bank_bus_dat_w[0];
always @(*) begin
    csrbank13_ev_pending_re <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank13_ev_pending_re <= interface13_bank_bus_we;
    end
end
always @(*) begin
    csrbank13_ev_pending_we <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank13_ev_pending_we <= interface13_bank_bus_re;
    end
end
assign csrbank13_ev_enable0_r = interface13_bank_bus_dat_w[0];
always @(*) begin
    csrbank13_ev_enable0_re <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank13_ev_enable0_re <= interface13_bank_bus_we;
    end
end
always @(*) begin
    csrbank13_ev_enable0_we <= 1'd0;
    if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank13_ev_enable0_we <= interface13_bank_bus_re;
    end
end
assign csrbank13_in_w = gpioin0_in_status;
assign gpioin0_in_we = csrbank13_in_we;
assign csrbank13_mode0_w = gpioin0_gpioin0_mode_storage;
assign csrbank13_edge0_w = gpioin0_gpioin0_edge_storage;
assign gpioin0_gpioin0_status_status = gpioin0_gpioin0_i00;
assign csrbank13_ev_status_w = gpioin0_gpioin0_status_status;
assign gpioin0_gpioin0_status_we = csrbank13_ev_status_we;
assign gpioin0_gpioin0_pending_status = gpioin0_gpioin0_i01;
assign csrbank13_ev_pending_w = gpioin0_gpioin0_pending_status;
assign gpioin0_gpioin0_pending_we = csrbank13_ev_pending_we;
assign gpioin0_gpioin0_i02 = gpioin0_gpioin0_enable_storage;
assign csrbank13_ev_enable0_w = gpioin0_gpioin0_enable_storage;
assign csrbank14_sel = (interface14_bank_bus_adr[13:9] == 4'd14);
assign csrbank14_in_r = interface14_bank_bus_dat_w[0];
always @(*) begin
    csrbank14_in_re <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank14_in_re <= interface14_bank_bus_we;
    end
end
always @(*) begin
    csrbank14_in_we <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank14_in_we <= interface14_bank_bus_re;
    end
end
assign csrbank14_mode0_r = interface14_bank_bus_dat_w[0];
always @(*) begin
    csrbank14_mode0_we <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank14_mode0_we <= interface14_bank_bus_re;
    end
end
always @(*) begin
    csrbank14_mode0_re <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank14_mode0_re <= interface14_bank_bus_we;
    end
end
assign csrbank14_edge0_r = interface14_bank_bus_dat_w[0];
always @(*) begin
    csrbank14_edge0_re <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank14_edge0_re <= interface14_bank_bus_we;
    end
end
always @(*) begin
    csrbank14_edge0_we <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank14_edge0_we <= interface14_bank_bus_re;
    end
end
assign csrbank14_ev_status_r = interface14_bank_bus_dat_w[0];
always @(*) begin
    csrbank14_ev_status_re <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank14_ev_status_re <= interface14_bank_bus_we;
    end
end
always @(*) begin
    csrbank14_ev_status_we <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank14_ev_status_we <= interface14_bank_bus_re;
    end
end
assign csrbank14_ev_pending_r = interface14_bank_bus_dat_w[0];
always @(*) begin
    csrbank14_ev_pending_we <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank14_ev_pending_we <= interface14_bank_bus_re;
    end
end
always @(*) begin
    csrbank14_ev_pending_re <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank14_ev_pending_re <= interface14_bank_bus_we;
    end
end
assign csrbank14_ev_enable0_r = interface14_bank_bus_dat_w[0];
always @(*) begin
    csrbank14_ev_enable0_re <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank14_ev_enable0_re <= interface14_bank_bus_we;
    end
end
always @(*) begin
    csrbank14_ev_enable0_we <= 1'd0;
    if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank14_ev_enable0_we <= interface14_bank_bus_re;
    end
end
assign csrbank14_in_w = gpioin1_in_status;
assign gpioin1_in_we = csrbank14_in_we;
assign csrbank14_mode0_w = gpioin1_gpioin1_mode_storage;
assign csrbank14_edge0_w = gpioin1_gpioin1_edge_storage;
assign gpioin1_gpioin1_status_status = gpioin1_gpioin1_i00;
assign csrbank14_ev_status_w = gpioin1_gpioin1_status_status;
assign gpioin1_gpioin1_status_we = csrbank14_ev_status_we;
assign gpioin1_gpioin1_pending_status = gpioin1_gpioin1_i01;
assign csrbank14_ev_pending_w = gpioin1_gpioin1_pending_status;
assign gpioin1_gpioin1_pending_we = csrbank14_ev_pending_we;
assign gpioin1_gpioin1_i02 = gpioin1_gpioin1_enable_storage;
assign csrbank14_ev_enable0_w = gpioin1_gpioin1_enable_storage;
assign csrbank15_sel = (interface15_bank_bus_adr[13:9] == 4'd15);
assign csrbank15_in_r = interface15_bank_bus_dat_w[0];
always @(*) begin
    csrbank15_in_re <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank15_in_re <= interface15_bank_bus_we;
    end
end
always @(*) begin
    csrbank15_in_we <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank15_in_we <= interface15_bank_bus_re;
    end
end
assign csrbank15_mode0_r = interface15_bank_bus_dat_w[0];
always @(*) begin
    csrbank15_mode0_re <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank15_mode0_re <= interface15_bank_bus_we;
    end
end
always @(*) begin
    csrbank15_mode0_we <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank15_mode0_we <= interface15_bank_bus_re;
    end
end
assign csrbank15_edge0_r = interface15_bank_bus_dat_w[0];
always @(*) begin
    csrbank15_edge0_we <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank15_edge0_we <= interface15_bank_bus_re;
    end
end
always @(*) begin
    csrbank15_edge0_re <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank15_edge0_re <= interface15_bank_bus_we;
    end
end
assign csrbank15_ev_status_r = interface15_bank_bus_dat_w[0];
always @(*) begin
    csrbank15_ev_status_re <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank15_ev_status_re <= interface15_bank_bus_we;
    end
end
always @(*) begin
    csrbank15_ev_status_we <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank15_ev_status_we <= interface15_bank_bus_re;
    end
end
assign csrbank15_ev_pending_r = interface15_bank_bus_dat_w[0];
always @(*) begin
    csrbank15_ev_pending_re <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank15_ev_pending_re <= interface15_bank_bus_we;
    end
end
always @(*) begin
    csrbank15_ev_pending_we <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank15_ev_pending_we <= interface15_bank_bus_re;
    end
end
assign csrbank15_ev_enable0_r = interface15_bank_bus_dat_w[0];
always @(*) begin
    csrbank15_ev_enable0_we <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank15_ev_enable0_we <= interface15_bank_bus_re;
    end
end
always @(*) begin
    csrbank15_ev_enable0_re <= 1'd0;
    if ((csrbank15_sel & (interface15_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank15_ev_enable0_re <= interface15_bank_bus_we;
    end
end
assign csrbank15_in_w = gpioin2_in_status;
assign gpioin2_in_we = csrbank15_in_we;
assign csrbank15_mode0_w = gpioin2_gpioin2_mode_storage;
assign csrbank15_edge0_w = gpioin2_gpioin2_edge_storage;
assign gpioin2_gpioin2_status_status = gpioin2_gpioin2_i00;
assign csrbank15_ev_status_w = gpioin2_gpioin2_status_status;
assign gpioin2_gpioin2_status_we = csrbank15_ev_status_we;
assign gpioin2_gpioin2_pending_status = gpioin2_gpioin2_i01;
assign csrbank15_ev_pending_w = gpioin2_gpioin2_pending_status;
assign gpioin2_gpioin2_pending_we = csrbank15_ev_pending_we;
assign gpioin2_gpioin2_i02 = gpioin2_gpioin2_enable_storage;
assign csrbank15_ev_enable0_w = gpioin2_gpioin2_enable_storage;
assign csrbank16_sel = (interface16_bank_bus_adr[13:9] == 5'd16);
assign csrbank16_in_r = interface16_bank_bus_dat_w[0];
always @(*) begin
    csrbank16_in_we <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank16_in_we <= interface16_bank_bus_re;
    end
end
always @(*) begin
    csrbank16_in_re <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank16_in_re <= interface16_bank_bus_we;
    end
end
assign csrbank16_mode0_r = interface16_bank_bus_dat_w[0];
always @(*) begin
    csrbank16_mode0_we <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank16_mode0_we <= interface16_bank_bus_re;
    end
end
always @(*) begin
    csrbank16_mode0_re <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank16_mode0_re <= interface16_bank_bus_we;
    end
end
assign csrbank16_edge0_r = interface16_bank_bus_dat_w[0];
always @(*) begin
    csrbank16_edge0_re <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank16_edge0_re <= interface16_bank_bus_we;
    end
end
always @(*) begin
    csrbank16_edge0_we <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank16_edge0_we <= interface16_bank_bus_re;
    end
end
assign csrbank16_ev_status_r = interface16_bank_bus_dat_w[0];
always @(*) begin
    csrbank16_ev_status_we <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank16_ev_status_we <= interface16_bank_bus_re;
    end
end
always @(*) begin
    csrbank16_ev_status_re <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank16_ev_status_re <= interface16_bank_bus_we;
    end
end
assign csrbank16_ev_pending_r = interface16_bank_bus_dat_w[0];
always @(*) begin
    csrbank16_ev_pending_we <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank16_ev_pending_we <= interface16_bank_bus_re;
    end
end
always @(*) begin
    csrbank16_ev_pending_re <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank16_ev_pending_re <= interface16_bank_bus_we;
    end
end
assign csrbank16_ev_enable0_r = interface16_bank_bus_dat_w[0];
always @(*) begin
    csrbank16_ev_enable0_re <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank16_ev_enable0_re <= interface16_bank_bus_we;
    end
end
always @(*) begin
    csrbank16_ev_enable0_we <= 1'd0;
    if ((csrbank16_sel & (interface16_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank16_ev_enable0_we <= interface16_bank_bus_re;
    end
end
assign csrbank16_in_w = gpioin3_in_status;
assign gpioin3_in_we = csrbank16_in_we;
assign csrbank16_mode0_w = gpioin3_gpioin3_mode_storage;
assign csrbank16_edge0_w = gpioin3_gpioin3_edge_storage;
assign gpioin3_gpioin3_status_status = gpioin3_gpioin3_i00;
assign csrbank16_ev_status_w = gpioin3_gpioin3_status_status;
assign gpioin3_gpioin3_status_we = csrbank16_ev_status_we;
assign gpioin3_gpioin3_pending_status = gpioin3_gpioin3_i01;
assign csrbank16_ev_pending_w = gpioin3_gpioin3_pending_status;
assign gpioin3_gpioin3_pending_we = csrbank16_ev_pending_we;
assign gpioin3_gpioin3_i02 = gpioin3_gpioin3_enable_storage;
assign csrbank16_ev_enable0_w = gpioin3_gpioin3_enable_storage;
assign csrbank17_sel = (interface17_bank_bus_adr[13:9] == 5'd17);
assign csrbank17_in_r = interface17_bank_bus_dat_w[0];
always @(*) begin
    csrbank17_in_re <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank17_in_re <= interface17_bank_bus_we;
    end
end
always @(*) begin
    csrbank17_in_we <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank17_in_we <= interface17_bank_bus_re;
    end
end
assign csrbank17_mode0_r = interface17_bank_bus_dat_w[0];
always @(*) begin
    csrbank17_mode0_we <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank17_mode0_we <= interface17_bank_bus_re;
    end
end
always @(*) begin
    csrbank17_mode0_re <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank17_mode0_re <= interface17_bank_bus_we;
    end
end
assign csrbank17_edge0_r = interface17_bank_bus_dat_w[0];
always @(*) begin
    csrbank17_edge0_we <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank17_edge0_we <= interface17_bank_bus_re;
    end
end
always @(*) begin
    csrbank17_edge0_re <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank17_edge0_re <= interface17_bank_bus_we;
    end
end
assign csrbank17_ev_status_r = interface17_bank_bus_dat_w[0];
always @(*) begin
    csrbank17_ev_status_re <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank17_ev_status_re <= interface17_bank_bus_we;
    end
end
always @(*) begin
    csrbank17_ev_status_we <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank17_ev_status_we <= interface17_bank_bus_re;
    end
end
assign csrbank17_ev_pending_r = interface17_bank_bus_dat_w[0];
always @(*) begin
    csrbank17_ev_pending_we <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank17_ev_pending_we <= interface17_bank_bus_re;
    end
end
always @(*) begin
    csrbank17_ev_pending_re <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank17_ev_pending_re <= interface17_bank_bus_we;
    end
end
assign csrbank17_ev_enable0_r = interface17_bank_bus_dat_w[0];
always @(*) begin
    csrbank17_ev_enable0_we <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank17_ev_enable0_we <= interface17_bank_bus_re;
    end
end
always @(*) begin
    csrbank17_ev_enable0_re <= 1'd0;
    if ((csrbank17_sel & (interface17_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank17_ev_enable0_re <= interface17_bank_bus_we;
    end
end
assign csrbank17_in_w = gpioin4_in_status;
assign gpioin4_in_we = csrbank17_in_we;
assign csrbank17_mode0_w = gpioin4_gpioin4_mode_storage;
assign csrbank17_edge0_w = gpioin4_gpioin4_edge_storage;
assign gpioin4_gpioin4_status_status = gpioin4_gpioin4_i00;
assign csrbank17_ev_status_w = gpioin4_gpioin4_status_status;
assign gpioin4_gpioin4_status_we = csrbank17_ev_status_we;
assign gpioin4_gpioin4_pending_status = gpioin4_gpioin4_i01;
assign csrbank17_ev_pending_w = gpioin4_gpioin4_pending_status;
assign gpioin4_gpioin4_pending_we = csrbank17_ev_pending_we;
assign gpioin4_gpioin4_i02 = gpioin4_gpioin4_enable_storage;
assign csrbank17_ev_enable0_w = gpioin4_gpioin4_enable_storage;
assign csrbank18_sel = (interface18_bank_bus_adr[13:9] == 5'd18);
assign csrbank18_in_r = interface18_bank_bus_dat_w[0];
always @(*) begin
    csrbank18_in_we <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank18_in_we <= interface18_bank_bus_re;
    end
end
always @(*) begin
    csrbank18_in_re <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank18_in_re <= interface18_bank_bus_we;
    end
end
assign csrbank18_mode0_r = interface18_bank_bus_dat_w[0];
always @(*) begin
    csrbank18_mode0_re <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank18_mode0_re <= interface18_bank_bus_we;
    end
end
always @(*) begin
    csrbank18_mode0_we <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank18_mode0_we <= interface18_bank_bus_re;
    end
end
assign csrbank18_edge0_r = interface18_bank_bus_dat_w[0];
always @(*) begin
    csrbank18_edge0_we <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank18_edge0_we <= interface18_bank_bus_re;
    end
end
always @(*) begin
    csrbank18_edge0_re <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank18_edge0_re <= interface18_bank_bus_we;
    end
end
assign csrbank18_ev_status_r = interface18_bank_bus_dat_w[0];
always @(*) begin
    csrbank18_ev_status_we <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank18_ev_status_we <= interface18_bank_bus_re;
    end
end
always @(*) begin
    csrbank18_ev_status_re <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank18_ev_status_re <= interface18_bank_bus_we;
    end
end
assign csrbank18_ev_pending_r = interface18_bank_bus_dat_w[0];
always @(*) begin
    csrbank18_ev_pending_re <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank18_ev_pending_re <= interface18_bank_bus_we;
    end
end
always @(*) begin
    csrbank18_ev_pending_we <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank18_ev_pending_we <= interface18_bank_bus_re;
    end
end
assign csrbank18_ev_enable0_r = interface18_bank_bus_dat_w[0];
always @(*) begin
    csrbank18_ev_enable0_we <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank18_ev_enable0_we <= interface18_bank_bus_re;
    end
end
always @(*) begin
    csrbank18_ev_enable0_re <= 1'd0;
    if ((csrbank18_sel & (interface18_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank18_ev_enable0_re <= interface18_bank_bus_we;
    end
end
assign csrbank18_in_w = gpioin5_in_status;
assign gpioin5_in_we = csrbank18_in_we;
assign csrbank18_mode0_w = gpioin5_gpioin5_mode_storage;
assign csrbank18_edge0_w = gpioin5_gpioin5_edge_storage;
assign gpioin5_gpioin5_status_status = gpioin5_gpioin5_i00;
assign csrbank18_ev_status_w = gpioin5_gpioin5_status_status;
assign gpioin5_gpioin5_status_we = csrbank18_ev_status_we;
assign gpioin5_gpioin5_pending_status = gpioin5_gpioin5_i01;
assign csrbank18_ev_pending_w = gpioin5_gpioin5_pending_status;
assign gpioin5_gpioin5_pending_we = csrbank18_ev_pending_we;
assign gpioin5_gpioin5_i02 = gpioin5_gpioin5_enable_storage;
assign csrbank18_ev_enable0_w = gpioin5_gpioin5_enable_storage;
assign csrbank19_sel = (interface19_bank_bus_adr[13:9] == 5'd19);
assign csrbank19_out0_r = interface19_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank19_out0_we <= 1'd0;
    if ((csrbank19_sel & (interface19_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank19_out0_we <= interface19_bank_bus_re;
    end
end
always @(*) begin
    csrbank19_out0_re <= 1'd0;
    if ((csrbank19_sel & (interface19_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank19_out0_re <= interface19_bank_bus_we;
    end
end
assign csrbank19_out0_w = user_irq_ena_storage;
assign adr = interface1_adr;
assign re = interface1_re;
assign we = interface1_we;
assign dat_w = interface1_dat_w;
assign interface1_dat_r = dat_r;
assign interface0_bank_bus_adr = adr;
assign interface1_bank_bus_adr = adr;
assign interface2_bank_bus_adr = adr;
assign interface3_bank_bus_adr = adr;
assign interface4_bank_bus_adr = adr;
assign interface5_bank_bus_adr = adr;
assign interface6_bank_bus_adr = adr;
assign interface7_bank_bus_adr = adr;
assign interface8_bank_bus_adr = adr;
assign interface9_bank_bus_adr = adr;
assign interface10_bank_bus_adr = adr;
assign interface11_bank_bus_adr = adr;
assign interface12_bank_bus_adr = adr;
assign interface13_bank_bus_adr = adr;
assign interface14_bank_bus_adr = adr;
assign interface15_bank_bus_adr = adr;
assign interface16_bank_bus_adr = adr;
assign interface17_bank_bus_adr = adr;
assign interface18_bank_bus_adr = adr;
assign interface19_bank_bus_adr = adr;
assign interface0_bank_bus_re = re;
assign interface1_bank_bus_re = re;
assign interface2_bank_bus_re = re;
assign interface3_bank_bus_re = re;
assign interface4_bank_bus_re = re;
assign interface5_bank_bus_re = re;
assign interface6_bank_bus_re = re;
assign interface7_bank_bus_re = re;
assign interface8_bank_bus_re = re;
assign interface9_bank_bus_re = re;
assign interface10_bank_bus_re = re;
assign interface11_bank_bus_re = re;
assign interface12_bank_bus_re = re;
assign interface13_bank_bus_re = re;
assign interface14_bank_bus_re = re;
assign interface15_bank_bus_re = re;
assign interface16_bank_bus_re = re;
assign interface17_bank_bus_re = re;
assign interface18_bank_bus_re = re;
assign interface19_bank_bus_re = re;
assign interface0_bank_bus_we = we;
assign interface1_bank_bus_we = we;
assign interface2_bank_bus_we = we;
assign interface3_bank_bus_we = we;
assign interface4_bank_bus_we = we;
assign interface5_bank_bus_we = we;
assign interface6_bank_bus_we = we;
assign interface7_bank_bus_we = we;
assign interface8_bank_bus_we = we;
assign interface9_bank_bus_we = we;
assign interface10_bank_bus_we = we;
assign interface11_bank_bus_we = we;
assign interface12_bank_bus_we = we;
assign interface13_bank_bus_we = we;
assign interface14_bank_bus_we = we;
assign interface15_bank_bus_we = we;
assign interface16_bank_bus_we = we;
assign interface17_bank_bus_we = we;
assign interface18_bank_bus_we = we;
assign interface19_bank_bus_we = we;
assign interface0_bank_bus_dat_w = dat_w;
assign interface1_bank_bus_dat_w = dat_w;
assign interface2_bank_bus_dat_w = dat_w;
assign interface3_bank_bus_dat_w = dat_w;
assign interface4_bank_bus_dat_w = dat_w;
assign interface5_bank_bus_dat_w = dat_w;
assign interface6_bank_bus_dat_w = dat_w;
assign interface7_bank_bus_dat_w = dat_w;
assign interface8_bank_bus_dat_w = dat_w;
assign interface9_bank_bus_dat_w = dat_w;
assign interface10_bank_bus_dat_w = dat_w;
assign interface11_bank_bus_dat_w = dat_w;
assign interface12_bank_bus_dat_w = dat_w;
assign interface13_bank_bus_dat_w = dat_w;
assign interface14_bank_bus_dat_w = dat_w;
assign interface15_bank_bus_dat_w = dat_w;
assign interface16_bank_bus_dat_w = dat_w;
assign interface17_bank_bus_dat_w = dat_w;
assign interface18_bank_bus_dat_w = dat_w;
assign interface19_bank_bus_dat_w = dat_w;
assign dat_r = (((((((((((((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r) | interface9_bank_bus_dat_r) | interface10_bank_bus_dat_r) | interface11_bank_bus_dat_r) | interface12_bank_bus_dat_r) | interface13_bank_bus_dat_r) | interface14_bank_bus_dat_r) | interface15_bank_bus_dat_r) | interface16_bank_bus_dat_r) | interface17_bank_bus_dat_r) | interface18_bank_bus_dat_r) | interface19_bank_bus_dat_r);
always @(*) begin
    comb_array_muxed0 <= 30'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed0 <= mgmtsoc_interface0_adapted_interface_adr;
        end
        1'd1: begin
            comb_array_muxed0 <= mgmtsoc_interface1_adapted_interface_adr;
        end
        default: begin
            comb_array_muxed0 <= dbg_uart_wishbone_adr;
        end
    endcase
end
always @(*) begin
    comb_array_muxed1 <= 32'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed1 <= mgmtsoc_interface0_adapted_interface_dat_w;
        end
        1'd1: begin
            comb_array_muxed1 <= mgmtsoc_interface1_adapted_interface_dat_w;
        end
        default: begin
            comb_array_muxed1 <= dbg_uart_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    comb_array_muxed2 <= 4'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed2 <= mgmtsoc_interface0_adapted_interface_sel;
        end
        1'd1: begin
            comb_array_muxed2 <= mgmtsoc_interface1_adapted_interface_sel;
        end
        default: begin
            comb_array_muxed2 <= dbg_uart_wishbone_sel;
        end
    endcase
end
always @(*) begin
    comb_array_muxed3 <= 1'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed3 <= mgmtsoc_interface0_adapted_interface_cyc;
        end
        1'd1: begin
            comb_array_muxed3 <= mgmtsoc_interface1_adapted_interface_cyc;
        end
        default: begin
            comb_array_muxed3 <= dbg_uart_wishbone_cyc;
        end
    endcase
end
always @(*) begin
    comb_array_muxed4 <= 1'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed4 <= mgmtsoc_interface0_adapted_interface_stb;
        end
        1'd1: begin
            comb_array_muxed4 <= mgmtsoc_interface1_adapted_interface_stb;
        end
        default: begin
            comb_array_muxed4 <= dbg_uart_wishbone_stb;
        end
    endcase
end
always @(*) begin
    comb_array_muxed5 <= 1'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed5 <= mgmtsoc_interface0_adapted_interface_we;
        end
        1'd1: begin
            comb_array_muxed5 <= mgmtsoc_interface1_adapted_interface_we;
        end
        default: begin
            comb_array_muxed5 <= dbg_uart_wishbone_we;
        end
    endcase
end
always @(*) begin
    comb_array_muxed6 <= 3'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed6 <= mgmtsoc_interface0_adapted_interface_cti;
        end
        1'd1: begin
            comb_array_muxed6 <= mgmtsoc_interface1_adapted_interface_cti;
        end
        default: begin
            comb_array_muxed6 <= dbg_uart_wishbone_cti;
        end
    endcase
end
always @(*) begin
    comb_array_muxed7 <= 2'd0;
    case (grant)
        1'd0: begin
            comb_array_muxed7 <= mgmtsoc_interface0_adapted_interface_bte;
        end
        1'd1: begin
            comb_array_muxed7 <= mgmtsoc_interface1_adapted_interface_bte;
        end
        default: begin
            comb_array_muxed7 <= dbg_uart_wishbone_bte;
        end
    endcase
end
always @(*) begin
    sync_array_muxed <= 1'd0;
    case (spi_master_mosi_sel)
        1'd0: begin
            sync_array_muxed <= spi_master_mosi_data[0];
        end
        1'd1: begin
            sync_array_muxed <= spi_master_mosi_data[1];
        end
        2'd2: begin
            sync_array_muxed <= spi_master_mosi_data[2];
        end
        2'd3: begin
            sync_array_muxed <= spi_master_mosi_data[3];
        end
        3'd4: begin
            sync_array_muxed <= spi_master_mosi_data[4];
        end
        3'd5: begin
            sync_array_muxed <= spi_master_mosi_data[5];
        end
        3'd6: begin
            sync_array_muxed <= spi_master_mosi_data[6];
        end
        default: begin
            sync_array_muxed <= spi_master_mosi_data[7];
        end
    endcase
end
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
assign sdrio_clk_3 = sys_clk;
assign uart_phy_rx_rx = multiregimpl0_regs1;
assign dbg_uart_rx_rx = multiregimpl1_regs1;
assign gpio_in_status = multiregimpl2_regs1;
always @(*) begin
    la_in_status <= 128'd0;
    la_in_status[0] <= multiregimpl3_regs1;
    la_in_status[1] <= multiregimpl4_regs1;
    la_in_status[2] <= multiregimpl5_regs1;
    la_in_status[3] <= multiregimpl6_regs1;
    la_in_status[4] <= multiregimpl7_regs1;
    la_in_status[5] <= multiregimpl8_regs1;
    la_in_status[6] <= multiregimpl9_regs1;
    la_in_status[7] <= multiregimpl10_regs1;
    la_in_status[8] <= multiregimpl11_regs1;
    la_in_status[9] <= multiregimpl12_regs1;
    la_in_status[10] <= multiregimpl13_regs1;
    la_in_status[11] <= multiregimpl14_regs1;
    la_in_status[12] <= multiregimpl15_regs1;
    la_in_status[13] <= multiregimpl16_regs1;
    la_in_status[14] <= multiregimpl17_regs1;
    la_in_status[15] <= multiregimpl18_regs1;
    la_in_status[16] <= multiregimpl19_regs1;
    la_in_status[17] <= multiregimpl20_regs1;
    la_in_status[18] <= multiregimpl21_regs1;
    la_in_status[19] <= multiregimpl22_regs1;
    la_in_status[20] <= multiregimpl23_regs1;
    la_in_status[21] <= multiregimpl24_regs1;
    la_in_status[22] <= multiregimpl25_regs1;
    la_in_status[23] <= multiregimpl26_regs1;
    la_in_status[24] <= multiregimpl27_regs1;
    la_in_status[25] <= multiregimpl28_regs1;
    la_in_status[26] <= multiregimpl29_regs1;
    la_in_status[27] <= multiregimpl30_regs1;
    la_in_status[28] <= multiregimpl31_regs1;
    la_in_status[29] <= multiregimpl32_regs1;
    la_in_status[30] <= multiregimpl33_regs1;
    la_in_status[31] <= multiregimpl34_regs1;
    la_in_status[32] <= multiregimpl35_regs1;
    la_in_status[33] <= multiregimpl36_regs1;
    la_in_status[34] <= multiregimpl37_regs1;
    la_in_status[35] <= multiregimpl38_regs1;
    la_in_status[36] <= multiregimpl39_regs1;
    la_in_status[37] <= multiregimpl40_regs1;
    la_in_status[38] <= multiregimpl41_regs1;
    la_in_status[39] <= multiregimpl42_regs1;
    la_in_status[40] <= multiregimpl43_regs1;
    la_in_status[41] <= multiregimpl44_regs1;
    la_in_status[42] <= multiregimpl45_regs1;
    la_in_status[43] <= multiregimpl46_regs1;
    la_in_status[44] <= multiregimpl47_regs1;
    la_in_status[45] <= multiregimpl48_regs1;
    la_in_status[46] <= multiregimpl49_regs1;
    la_in_status[47] <= multiregimpl50_regs1;
    la_in_status[48] <= multiregimpl51_regs1;
    la_in_status[49] <= multiregimpl52_regs1;
    la_in_status[50] <= multiregimpl53_regs1;
    la_in_status[51] <= multiregimpl54_regs1;
    la_in_status[52] <= multiregimpl55_regs1;
    la_in_status[53] <= multiregimpl56_regs1;
    la_in_status[54] <= multiregimpl57_regs1;
    la_in_status[55] <= multiregimpl58_regs1;
    la_in_status[56] <= multiregimpl59_regs1;
    la_in_status[57] <= multiregimpl60_regs1;
    la_in_status[58] <= multiregimpl61_regs1;
    la_in_status[59] <= multiregimpl62_regs1;
    la_in_status[60] <= multiregimpl63_regs1;
    la_in_status[61] <= multiregimpl64_regs1;
    la_in_status[62] <= multiregimpl65_regs1;
    la_in_status[63] <= multiregimpl66_regs1;
    la_in_status[64] <= multiregimpl67_regs1;
    la_in_status[65] <= multiregimpl68_regs1;
    la_in_status[66] <= multiregimpl69_regs1;
    la_in_status[67] <= multiregimpl70_regs1;
    la_in_status[68] <= multiregimpl71_regs1;
    la_in_status[69] <= multiregimpl72_regs1;
    la_in_status[70] <= multiregimpl73_regs1;
    la_in_status[71] <= multiregimpl74_regs1;
    la_in_status[72] <= multiregimpl75_regs1;
    la_in_status[73] <= multiregimpl76_regs1;
    la_in_status[74] <= multiregimpl77_regs1;
    la_in_status[75] <= multiregimpl78_regs1;
    la_in_status[76] <= multiregimpl79_regs1;
    la_in_status[77] <= multiregimpl80_regs1;
    la_in_status[78] <= multiregimpl81_regs1;
    la_in_status[79] <= multiregimpl82_regs1;
    la_in_status[80] <= multiregimpl83_regs1;
    la_in_status[81] <= multiregimpl84_regs1;
    la_in_status[82] <= multiregimpl85_regs1;
    la_in_status[83] <= multiregimpl86_regs1;
    la_in_status[84] <= multiregimpl87_regs1;
    la_in_status[85] <= multiregimpl88_regs1;
    la_in_status[86] <= multiregimpl89_regs1;
    la_in_status[87] <= multiregimpl90_regs1;
    la_in_status[88] <= multiregimpl91_regs1;
    la_in_status[89] <= multiregimpl92_regs1;
    la_in_status[90] <= multiregimpl93_regs1;
    la_in_status[91] <= multiregimpl94_regs1;
    la_in_status[92] <= multiregimpl95_regs1;
    la_in_status[93] <= multiregimpl96_regs1;
    la_in_status[94] <= multiregimpl97_regs1;
    la_in_status[95] <= multiregimpl98_regs1;
    la_in_status[96] <= multiregimpl99_regs1;
    la_in_status[97] <= multiregimpl100_regs1;
    la_in_status[98] <= multiregimpl101_regs1;
    la_in_status[99] <= multiregimpl102_regs1;
    la_in_status[100] <= multiregimpl103_regs1;
    la_in_status[101] <= multiregimpl104_regs1;
    la_in_status[102] <= multiregimpl105_regs1;
    la_in_status[103] <= multiregimpl106_regs1;
    la_in_status[104] <= multiregimpl107_regs1;
    la_in_status[105] <= multiregimpl108_regs1;
    la_in_status[106] <= multiregimpl109_regs1;
    la_in_status[107] <= multiregimpl110_regs1;
    la_in_status[108] <= multiregimpl111_regs1;
    la_in_status[109] <= multiregimpl112_regs1;
    la_in_status[110] <= multiregimpl113_regs1;
    la_in_status[111] <= multiregimpl114_regs1;
    la_in_status[112] <= multiregimpl115_regs1;
    la_in_status[113] <= multiregimpl116_regs1;
    la_in_status[114] <= multiregimpl117_regs1;
    la_in_status[115] <= multiregimpl118_regs1;
    la_in_status[116] <= multiregimpl119_regs1;
    la_in_status[117] <= multiregimpl120_regs1;
    la_in_status[118] <= multiregimpl121_regs1;
    la_in_status[119] <= multiregimpl122_regs1;
    la_in_status[120] <= multiregimpl123_regs1;
    la_in_status[121] <= multiregimpl124_regs1;
    la_in_status[122] <= multiregimpl125_regs1;
    la_in_status[123] <= multiregimpl126_regs1;
    la_in_status[124] <= multiregimpl127_regs1;
    la_in_status[125] <= multiregimpl128_regs1;
    la_in_status[126] <= multiregimpl129_regs1;
    la_in_status[127] <= multiregimpl130_regs1;
end
assign gpioin0_in_status = multiregimpl131_regs1;
assign gpioin1_in_status = multiregimpl132_regs1;
assign gpioin2_in_status = multiregimpl133_regs1;
assign gpioin3_in_status = multiregimpl134_regs1;
assign gpioin4_in_status = multiregimpl135_regs1;
assign gpioin5_in_status = multiregimpl136_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= core_rst;
end

always @(posedge sdrio_clk) begin
    flash_clk <= mgmtsoc_litespisdrphycore_clk;
    flash_io0_oeb <= (~mgmtsoc_litespisdrphycore_dq_oe);
    flash_io0_do <= mgmtsoc_litespisdrphycore_dq_o;
    mgmtsoc_litespisdrphycore_dq_i[1] <= flash_io1_di;
end

always @(posedge sys_clk) begin
    if ((((mgmtsoc_interface0_adapted_interface_stb & mgmtsoc_interface0_adapted_interface_cyc) & mgmtsoc_interface0_adapted_interface_ack) | mgmtsoc_converter0_skip)) begin
        mgmtsoc_converter0_count <= (mgmtsoc_converter0_count + 1'd1);
    end
    if ((mgmtsoc_microwatt_ibus_ack | (~mgmtsoc_microwatt_ibus_cyc))) begin
        mgmtsoc_converter0_count <= 1'd0;
    end
    if ((mgmtsoc_interface0_adapted_interface_ack | mgmtsoc_converter0_skip)) begin
        mgmtsoc_converter0_dat_r <= mgmtsoc_microwatt_ibus_dat_r;
    end
    if ((((mgmtsoc_interface1_adapted_interface_stb & mgmtsoc_interface1_adapted_interface_cyc) & mgmtsoc_interface1_adapted_interface_ack) | mgmtsoc_converter1_skip)) begin
        mgmtsoc_converter1_count <= (mgmtsoc_converter1_count + 1'd1);
    end
    if ((mgmtsoc_microwatt_dbus_ack | (~mgmtsoc_microwatt_dbus_cyc))) begin
        mgmtsoc_converter1_count <= 1'd0;
    end
    if ((mgmtsoc_interface1_adapted_interface_ack | mgmtsoc_converter1_skip)) begin
        mgmtsoc_converter1_dat_r <= mgmtsoc_microwatt_dbus_dat_r;
    end
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end else begin
                    if (request[2]) begin
                        grant <= 2'd2;
                    end
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[2]) begin
                    grant <= 2'd2;
                end else begin
                    if (request[0]) begin
                        grant <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            if ((~request[2])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end else begin
                    if (request[1]) begin
                        grant <= 1'd1;
                    end
                end
            end
        end
    endcase
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((mgmtsoc_bus_errors != 32'd4294967295)) begin
        if (mgmtsoc_bus_error) begin
            mgmtsoc_bus_errors <= (mgmtsoc_bus_errors + 1'd1);
        end
    end
    if (mgmtsoc_en_storage) begin
        if ((mgmtsoc_value == 1'd0)) begin
            mgmtsoc_value <= mgmtsoc_reload_storage;
        end else begin
            mgmtsoc_value <= (mgmtsoc_value - 1'd1);
        end
    end else begin
        mgmtsoc_value <= mgmtsoc_load_storage;
    end
    if (mgmtsoc_update_value_re) begin
        mgmtsoc_value_status <= mgmtsoc_value;
    end
    if (mgmtsoc_zero_clear) begin
        mgmtsoc_zero_pending <= 1'd0;
    end
    mgmtsoc_zero_trigger_d <= mgmtsoc_zero_trigger;
    if ((mgmtsoc_zero_trigger & (~mgmtsoc_zero_trigger_d))) begin
        mgmtsoc_zero_pending <= 1'd1;
    end
    dff_bus_ack <= ((dff_bus_stb & dff_bus_cyc) & (~dff_bus_ack));
    dff2_bus_ack <= ((dff2_bus_stb & dff2_bus_cyc) & (~dff2_bus_ack));
    if (mgmtsoc_litespisdrphycore_sr_out_load) begin
        mgmtsoc_litespisdrphycore_sr_out <= (mgmtsoc_litespisdrphycore_sink_payload_data <<< (6'd32 - mgmtsoc_litespisdrphycore_sink_payload_len));
    end
    if (mgmtsoc_litespisdrphycore_sr_out_shift) begin
        case (mgmtsoc_litespisdrphycore_sink_payload_width)
            1'd1: begin
                mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore0};
            end
            2'd2: begin
                mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore1};
            end
            3'd4: begin
                mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore2};
            end
            4'd8: begin
                mgmtsoc_litespisdrphycore_sr_out <= {mgmtsoc_litespisdrphycore_sr_out, mgmtsoc_litespisdrphycore3};
            end
        endcase
    end
    if (mgmtsoc_litespisdrphycore_sr_in_shift) begin
        case (mgmtsoc_litespisdrphycore_sink_payload_width)
            1'd1: begin
                mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i[1]};
            end
            2'd2: begin
                mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i};
            end
            3'd4: begin
                mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i};
            end
            4'd8: begin
                mgmtsoc_litespisdrphycore_sr_in <= {mgmtsoc_litespisdrphycore_sr_in, mgmtsoc_litespisdrphycore_dq_i};
            end
        endcase
    end
    mgmtsoc_litespisdrphycore_posedge_reg <= {mgmtsoc_litespisdrphycore_posedge, mgmtsoc_litespisdrphycore_posedge_reg[1]};
    if ((mgmtsoc_litespisdrphycore_en | mgmtsoc_litespisdrphycore_en_int)) begin
        if ((mgmtsoc_litespisdrphycore_cnt < mgmtsoc_litespisdrphycore_div)) begin
            mgmtsoc_litespisdrphycore_cnt <= (mgmtsoc_litespisdrphycore_cnt + 1'd1);
        end else begin
            mgmtsoc_litespisdrphycore_cnt <= 1'd0;
            mgmtsoc_litespisdrphycore_clk <= (~mgmtsoc_litespisdrphycore_clk);
        end
    end else begin
        mgmtsoc_litespisdrphycore_clk <= 1'd0;
        mgmtsoc_litespisdrphycore_cnt <= 1'd0;
    end
    if (mgmtsoc_litespisdrphycore_wait) begin
        if ((~mgmtsoc_litespisdrphycore_done)) begin
            mgmtsoc_litespisdrphycore_count <= (mgmtsoc_litespisdrphycore_count - 1'd1);
        end
    end else begin
        mgmtsoc_litespisdrphycore_count <= 4'd11;
    end
    litespiphy_state <= litespiphy_next_state;
    if (mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
        mgmtsoc_litespisdrphycore_sr_cnt <= mgmtsoc_litespisdrphycore_sr_cnt_litespiphy_next_value;
    end
    case (litespi_grant)
        1'd0: begin
            if ((~litespi_request[0])) begin
                if (litespi_request[1]) begin
                    litespi_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~litespi_request[1])) begin
                if (litespi_request[0]) begin
                    litespi_grant <= 1'd0;
                end
            end
        end
    endcase
    if (mgmtsoc_mmap_wait) begin
        if ((~mgmtsoc_mmap_done)) begin
            mgmtsoc_mmap_count <= (mgmtsoc_mmap_count - 1'd1);
        end
    end else begin
        mgmtsoc_mmap_count <= 9'd256;
    end
    litespi_state <= litespi_next_state;
    if (mgmtsoc_mmap_burst_cs_litespi_next_value_ce0) begin
        mgmtsoc_mmap_burst_cs <= mgmtsoc_mmap_burst_cs_litespi_next_value0;
    end
    if (mgmtsoc_mmap_byte_count_litespi_next_value_ce1) begin
        mgmtsoc_mmap_byte_count <= mgmtsoc_mmap_byte_count_litespi_next_value1;
    end
    if (mgmtsoc_mmap_burst_adr_litespi_next_value_ce2) begin
        mgmtsoc_mmap_burst_adr <= mgmtsoc_mmap_burst_adr_litespi_next_value2;
    end
    if (((~mgmtsoc_master_tx_fifo_pipe_valid_source_valid) | mgmtsoc_master_tx_fifo_pipe_valid_source_ready)) begin
        mgmtsoc_master_tx_fifo_pipe_valid_source_valid <= mgmtsoc_master_tx_fifo_pipe_valid_sink_valid;
        mgmtsoc_master_tx_fifo_pipe_valid_source_first <= mgmtsoc_master_tx_fifo_pipe_valid_sink_first;
        mgmtsoc_master_tx_fifo_pipe_valid_source_last <= mgmtsoc_master_tx_fifo_pipe_valid_sink_last;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_data <= mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_data;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_len <= mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_len;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_width <= mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_width;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_mask <= mgmtsoc_master_tx_fifo_pipe_valid_sink_payload_mask;
    end
    if (((~mgmtsoc_master_rx_fifo_pipe_valid_source_valid) | mgmtsoc_master_rx_fifo_pipe_valid_source_ready)) begin
        mgmtsoc_master_rx_fifo_pipe_valid_source_valid <= mgmtsoc_master_rx_fifo_pipe_valid_sink_valid;
        mgmtsoc_master_rx_fifo_pipe_valid_source_first <= mgmtsoc_master_rx_fifo_pipe_valid_sink_first;
        mgmtsoc_master_rx_fifo_pipe_valid_source_last <= mgmtsoc_master_rx_fifo_pipe_valid_sink_last;
        mgmtsoc_master_rx_fifo_pipe_valid_source_payload_data <= mgmtsoc_master_rx_fifo_pipe_valid_sink_payload_data;
    end
    spi_master_clk_divider1 <= (spi_master_clk_divider1 + 1'd1);
    if (spi_master_clk_rise) begin
        spi_clk <= spi_master_clk_enable;
    end else begin
        if (spi_master_clk_fall) begin
            spi_master_clk_divider1 <= 1'd0;
            spi_clk <= 1'd0;
        end
    end
    spi_cs_n <= (~(spi_master_cs & (spi_master_xfer_enable | (spi_master_cs_mode == 1'd1))));
    if (spi_master_mosi_latch) begin
        spi_master_mosi_data <= spi_master_mosi;
        spi_master_mosi_sel <= 3'd7;
    end else begin
        if (spi_master_clk_fall) begin
            if (spi_master_xfer_enable) begin
                spi_mosi <= sync_array_muxed;
            end
            spi_master_mosi_sel <= (spi_master_mosi_sel - 1'd1);
        end
    end
    if (spi_master_clk_rise) begin
        if (spi_master_loopback) begin
            spi_master_miso_data <= {spi_master_miso_data, spi_mosi};
        end else begin
            spi_master_miso_data <= {spi_master_miso_data, spi_miso};
        end
    end
    if (spi_master_miso_latch) begin
        spi_master_miso <= spi_master_miso_data;
    end
    spimaster_state <= spimaster_next_state;
    if (spi_master_count_spimaster_next_value_ce) begin
        spi_master_count <= spi_master_count_spimaster_next_value;
    end
    {uart_phy_tx_tick, uart_phy_tx_phase} <= 22'd4123168;
    if (uart_phy_tx_enable) begin
        {uart_phy_tx_tick, uart_phy_tx_phase} <= (uart_phy_tx_phase + 22'd4123168);
    end
    rs232phy_rs232phytx_state <= rs232phy_rs232phytx_next_state;
    if (uart_phy_tx_count_rs232phy_rs232phytx_next_value_ce0) begin
        uart_phy_tx_count <= uart_phy_tx_count_rs232phy_rs232phytx_next_value0;
    end
    if (sys_uart_tx_rs232phy_rs232phytx_next_value_ce1) begin
        sys_uart_tx <= sys_uart_tx_rs232phy_rs232phytx_next_value1;
    end
    if (uart_phy_tx_data_rs232phy_rs232phytx_next_value_ce2) begin
        uart_phy_tx_data <= uart_phy_tx_data_rs232phy_rs232phytx_next_value2;
    end
    uart_phy_rx_rx_d <= uart_phy_rx_rx;
    {uart_phy_rx_tick, uart_phy_rx_phase} <= 32'd2147483648;
    if (uart_phy_rx_enable) begin
        {uart_phy_rx_tick, uart_phy_rx_phase} <= (uart_phy_rx_phase + 22'd4123168);
    end
    rs232phy_rs232phyrx_state <= rs232phy_rs232phyrx_next_state;
    if (uart_phy_rx_count_rs232phy_rs232phyrx_next_value_ce0) begin
        uart_phy_rx_count <= uart_phy_rx_count_rs232phy_rs232phyrx_next_value0;
    end
    if (uart_phy_rx_data_rs232phy_rs232phyrx_next_value_ce1) begin
        uart_phy_rx_data <= uart_phy_rx_data_rs232phy_rs232phyrx_next_value1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    {dbg_uart_tx_tick, dbg_uart_tx_phase} <= 26'd49478023;
    if (dbg_uart_tx_enable) begin
        {dbg_uart_tx_tick, dbg_uart_tx_phase} <= (dbg_uart_tx_phase + 26'd49478023);
    end
    uartwishbonebridge_rs232phytx_state <= uartwishbonebridge_rs232phytx_next_state;
    if (dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value_ce0) begin
        dbg_uart_tx_count <= dbg_uart_tx_count_uartwishbonebridge_rs232phytx_next_value0;
    end
    if (dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value_ce1) begin
        dbg_uart_dbg_uart_tx <= dbg_uart_dbg_uart_tx_uartwishbonebridge_rs232phytx_next_value1;
    end
    if (dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value_ce2) begin
        dbg_uart_tx_data <= dbg_uart_tx_data_uartwishbonebridge_rs232phytx_next_value2;
    end
    dbg_uart_rx_rx_d <= dbg_uart_rx_rx;
    {dbg_uart_rx_tick, dbg_uart_rx_phase} <= 32'd2147483648;
    if (dbg_uart_rx_enable) begin
        {dbg_uart_rx_tick, dbg_uart_rx_phase} <= (dbg_uart_rx_phase + 26'd49478023);
    end
    uartwishbonebridge_rs232phyrx_state <= uartwishbonebridge_rs232phyrx_next_state;
    if (dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value_ce0) begin
        dbg_uart_rx_count <= dbg_uart_rx_count_uartwishbonebridge_rs232phyrx_next_value0;
    end
    if (dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value_ce1) begin
        dbg_uart_rx_data <= dbg_uart_rx_data_uartwishbonebridge_rs232phyrx_next_value1;
    end
    uartwishbonebridge_state <= uartwishbonebridge_next_state;
    if (dbg_uart_data_bytes_count_uartwishbonebridge_next_value_ce0) begin
        dbg_uart_data_bytes_count <= dbg_uart_data_bytes_count_uartwishbonebridge_next_value0;
    end
    if (dbg_uart_addr_bytes_count_uartwishbonebridge_next_value_ce1) begin
        dbg_uart_addr_bytes_count <= dbg_uart_addr_bytes_count_uartwishbonebridge_next_value1;
    end
    if (dbg_uart_words_count_uartwishbonebridge_next_value_ce2) begin
        dbg_uart_words_count <= dbg_uart_words_count_uartwishbonebridge_next_value2;
    end
    if (dbg_uart_cmd_uartwishbonebridge_next_value_ce3) begin
        dbg_uart_cmd <= dbg_uart_cmd_uartwishbonebridge_next_value3;
    end
    if (dbg_uart_length_uartwishbonebridge_next_value_ce4) begin
        dbg_uart_length <= dbg_uart_length_uartwishbonebridge_next_value4;
    end
    if (dbg_uart_address_uartwishbonebridge_next_value_ce5) begin
        dbg_uart_address <= dbg_uart_address_uartwishbonebridge_next_value5;
    end
    if (dbg_uart_incr_uartwishbonebridge_next_value_ce6) begin
        dbg_uart_incr <= dbg_uart_incr_uartwishbonebridge_next_value6;
    end
    if (dbg_uart_data_uartwishbonebridge_next_value_ce7) begin
        dbg_uart_data <= dbg_uart_data_uartwishbonebridge_next_value7;
    end
    if (dbg_uart_reset) begin
        dbg_uart_incr <= 1'd0;
        uartwishbonebridge_state <= 3'd0;
    end
    if (dbg_uart_wait) begin
        if ((~dbg_uart_done)) begin
            dbg_uart_count <= (dbg_uart_count - 1'd1);
        end
    end else begin
        dbg_uart_count <= 20'd1000000;
    end
    gpioin0_gpioin0_in_pads_n_d <= gpioin0_in_status;
    if (gpioin0_gpioin0_clear) begin
        gpioin0_gpioin0_pending <= 1'd0;
    end
    gpioin0_gpioin0_trigger_d <= gpioin0_gpioin0_trigger;
    if ((gpioin0_gpioin0_trigger & (~gpioin0_gpioin0_trigger_d))) begin
        gpioin0_gpioin0_pending <= 1'd1;
    end
    gpioin1_gpioin1_in_pads_n_d <= gpioin1_in_status;
    if (gpioin1_gpioin1_clear) begin
        gpioin1_gpioin1_pending <= 1'd0;
    end
    gpioin1_gpioin1_trigger_d <= gpioin1_gpioin1_trigger;
    if ((gpioin1_gpioin1_trigger & (~gpioin1_gpioin1_trigger_d))) begin
        gpioin1_gpioin1_pending <= 1'd1;
    end
    gpioin2_gpioin2_in_pads_n_d <= gpioin2_in_status;
    if (gpioin2_gpioin2_clear) begin
        gpioin2_gpioin2_pending <= 1'd0;
    end
    gpioin2_gpioin2_trigger_d <= gpioin2_gpioin2_trigger;
    if ((gpioin2_gpioin2_trigger & (~gpioin2_gpioin2_trigger_d))) begin
        gpioin2_gpioin2_pending <= 1'd1;
    end
    gpioin3_gpioin3_in_pads_n_d <= gpioin3_in_status;
    if (gpioin3_gpioin3_clear) begin
        gpioin3_gpioin3_pending <= 1'd0;
    end
    gpioin3_gpioin3_trigger_d <= gpioin3_gpioin3_trigger;
    if ((gpioin3_gpioin3_trigger & (~gpioin3_gpioin3_trigger_d))) begin
        gpioin3_gpioin3_pending <= 1'd1;
    end
    gpioin4_gpioin4_in_pads_n_d <= gpioin4_in_status;
    if (gpioin4_gpioin4_clear) begin
        gpioin4_gpioin4_pending <= 1'd0;
    end
    gpioin4_gpioin4_trigger_d <= gpioin4_gpioin4_trigger;
    if ((gpioin4_gpioin4_trigger & (~gpioin4_gpioin4_trigger_d))) begin
        gpioin4_gpioin4_pending <= 1'd1;
    end
    gpioin5_gpioin5_in_pads_n_d <= gpioin5_in_status;
    if (gpioin5_gpioin5_clear) begin
        gpioin5_gpioin5_pending <= 1'd0;
    end
    gpioin5_gpioin5_trigger_d <= gpioin5_gpioin5_trigger;
    if ((gpioin5_gpioin5_trigger & (~gpioin5_gpioin5_trigger_d))) begin
        gpioin5_gpioin5_pending <= 1'd1;
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_reset0_w;
            end
            1'd1: begin
                interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
            end
            2'd2: begin
                interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csrbank0_reset0_re) begin
        mgmtsoc_reset_storage <= csrbank0_reset0_r;
    end
    mgmtsoc_reset_re <= csrbank0_reset0_re;
    if (csrbank0_scratch0_re) begin
        mgmtsoc_scratch_storage <= csrbank0_scratch0_r;
    end
    mgmtsoc_scratch_re <= csrbank0_scratch0_re;
    mgmtsoc_bus_errors_re <= csrbank0_bus_errors_re;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_out0_w;
            end
        endcase
    end
    if (csrbank1_out0_re) begin
        debug_mode_storage <= csrbank1_out0_r;
    end
    debug_mode_re <= csrbank1_out0_re;
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_out0_w;
            end
        endcase
    end
    if (csrbank2_out0_re) begin
        debug_oeb_storage <= csrbank2_out0_r;
    end
    debug_oeb_re <= csrbank2_out0_re;
    interface3_bank_bus_dat_r <= 1'd0;
    if (csrbank3_sel) begin
        case (interface3_bank_bus_adr[8:0])
            1'd0: begin
                interface3_bank_bus_dat_r <= csrbank3_mmap_dummy_bits0_w;
            end
            1'd1: begin
                interface3_bank_bus_dat_r <= csrbank3_master_cs0_w;
            end
            2'd2: begin
                interface3_bank_bus_dat_r <= csrbank3_master_phyconfig0_w;
            end
            2'd3: begin
                interface3_bank_bus_dat_r <= mgmtsoc_master_rxtx_w;
            end
            3'd4: begin
                interface3_bank_bus_dat_r <= csrbank3_master_status_w;
            end
        endcase
    end
    if (csrbank3_mmap_dummy_bits0_re) begin
        mgmtsoc_mmap_storage <= csrbank3_mmap_dummy_bits0_r;
    end
    mgmtsoc_mmap_re <= csrbank3_mmap_dummy_bits0_re;
    if (csrbank3_master_cs0_re) begin
        mgmtsoc_master_cs_storage <= csrbank3_master_cs0_r;
    end
    mgmtsoc_master_cs_re <= csrbank3_master_cs0_re;
    if (csrbank3_master_phyconfig0_re) begin
        mgmtsoc_master_phyconfig_storage <= csrbank3_master_phyconfig0_r;
    end
    mgmtsoc_master_phyconfig_re <= csrbank3_master_phyconfig0_re;
    mgmtsoc_master_status_re <= csrbank3_master_status_re;
    interface4_bank_bus_dat_r <= 1'd0;
    if (csrbank4_sel) begin
        case (interface4_bank_bus_adr[8:0])
            1'd0: begin
                interface4_bank_bus_dat_r <= csrbank4_clk_divisor0_w;
            end
        endcase
    end
    if (csrbank4_clk_divisor0_re) begin
        mgmtsoc_litespisdrphycore_storage <= csrbank4_clk_divisor0_r;
    end
    mgmtsoc_litespisdrphycore_re <= csrbank4_clk_divisor0_re;
    interface5_bank_bus_dat_r <= 1'd0;
    if (csrbank5_sel) begin
        case (interface5_bank_bus_adr[8:0])
            1'd0: begin
                interface5_bank_bus_dat_r <= csrbank5_mode10_w;
            end
            1'd1: begin
                interface5_bank_bus_dat_r <= csrbank5_mode00_w;
            end
            2'd2: begin
                interface5_bank_bus_dat_r <= csrbank5_ien0_w;
            end
            2'd3: begin
                interface5_bank_bus_dat_r <= csrbank5_oe0_w;
            end
            3'd4: begin
                interface5_bank_bus_dat_r <= csrbank5_in_w;
            end
            3'd5: begin
                interface5_bank_bus_dat_r <= csrbank5_out0_w;
            end
        endcase
    end
    if (csrbank5_mode10_re) begin
        gpio_mode1_storage <= csrbank5_mode10_r;
    end
    gpio_mode1_re <= csrbank5_mode10_re;
    if (csrbank5_mode00_re) begin
        gpio_mode0_storage <= csrbank5_mode00_r;
    end
    gpio_mode0_re <= csrbank5_mode00_re;
    if (csrbank5_ien0_re) begin
        gpio_ien_storage <= csrbank5_ien0_r;
    end
    gpio_ien_re <= csrbank5_ien0_re;
    if (csrbank5_oe0_re) begin
        gpio_oe_storage <= csrbank5_oe0_r;
    end
    gpio_oe_re <= csrbank5_oe0_re;
    gpio_in_re <= csrbank5_in_re;
    if (csrbank5_out0_re) begin
        gpio_out_storage <= csrbank5_out0_r;
    end
    gpio_out_re <= csrbank5_out0_re;
    interface6_bank_bus_dat_r <= 1'd0;
    if (csrbank6_sel) begin
        case (interface6_bank_bus_adr[8:0])
            1'd0: begin
                interface6_bank_bus_dat_r <= csrbank6_ien3_w;
            end
            1'd1: begin
                interface6_bank_bus_dat_r <= csrbank6_ien2_w;
            end
            2'd2: begin
                interface6_bank_bus_dat_r <= csrbank6_ien1_w;
            end
            2'd3: begin
                interface6_bank_bus_dat_r <= csrbank6_ien0_w;
            end
            3'd4: begin
                interface6_bank_bus_dat_r <= csrbank6_oe3_w;
            end
            3'd5: begin
                interface6_bank_bus_dat_r <= csrbank6_oe2_w;
            end
            3'd6: begin
                interface6_bank_bus_dat_r <= csrbank6_oe1_w;
            end
            3'd7: begin
                interface6_bank_bus_dat_r <= csrbank6_oe0_w;
            end
            4'd8: begin
                interface6_bank_bus_dat_r <= csrbank6_in3_w;
            end
            4'd9: begin
                interface6_bank_bus_dat_r <= csrbank6_in2_w;
            end
            4'd10: begin
                interface6_bank_bus_dat_r <= csrbank6_in1_w;
            end
            4'd11: begin
                interface6_bank_bus_dat_r <= csrbank6_in0_w;
            end
            4'd12: begin
                interface6_bank_bus_dat_r <= csrbank6_out3_w;
            end
            4'd13: begin
                interface6_bank_bus_dat_r <= csrbank6_out2_w;
            end
            4'd14: begin
                interface6_bank_bus_dat_r <= csrbank6_out1_w;
            end
            4'd15: begin
                interface6_bank_bus_dat_r <= csrbank6_out0_w;
            end
        endcase
    end
    if (csrbank6_ien3_re) begin
        la_ien_storage[127:96] <= csrbank6_ien3_r;
    end
    if (csrbank6_ien2_re) begin
        la_ien_storage[95:64] <= csrbank6_ien2_r;
    end
    if (csrbank6_ien1_re) begin
        la_ien_storage[63:32] <= csrbank6_ien1_r;
    end
    if (csrbank6_ien0_re) begin
        la_ien_storage[31:0] <= csrbank6_ien0_r;
    end
    la_ien_re <= csrbank6_ien0_re;
    if (csrbank6_oe3_re) begin
        la_oe_storage[127:96] <= csrbank6_oe3_r;
    end
    if (csrbank6_oe2_re) begin
        la_oe_storage[95:64] <= csrbank6_oe2_r;
    end
    if (csrbank6_oe1_re) begin
        la_oe_storage[63:32] <= csrbank6_oe1_r;
    end
    if (csrbank6_oe0_re) begin
        la_oe_storage[31:0] <= csrbank6_oe0_r;
    end
    la_oe_re <= csrbank6_oe0_re;
    la_in_re <= csrbank6_in0_re;
    if (csrbank6_out3_re) begin
        la_out_storage[127:96] <= csrbank6_out3_r;
    end
    if (csrbank6_out2_re) begin
        la_out_storage[95:64] <= csrbank6_out2_r;
    end
    if (csrbank6_out1_re) begin
        la_out_storage[63:32] <= csrbank6_out1_r;
    end
    if (csrbank6_out0_re) begin
        la_out_storage[31:0] <= csrbank6_out0_r;
    end
    la_out_re <= csrbank6_out0_re;
    interface7_bank_bus_dat_r <= 1'd0;
    if (csrbank7_sel) begin
        case (interface7_bank_bus_adr[8:0])
            1'd0: begin
                interface7_bank_bus_dat_r <= csrbank7_out0_w;
            end
        endcase
    end
    if (csrbank7_out0_re) begin
        mprj_wb_iena_storage <= csrbank7_out0_r;
    end
    mprj_wb_iena_re <= csrbank7_out0_re;
    interface8_bank_bus_dat_r <= 1'd0;
    if (csrbank8_sel) begin
        case (interface8_bank_bus_adr[8:0])
            1'd0: begin
                interface8_bank_bus_dat_r <= csrbank8_out0_w;
            end
        endcase
    end
    if (csrbank8_out0_re) begin
        spi_enabled_storage <= csrbank8_out0_r;
    end
    spi_enabled_re <= csrbank8_out0_re;
    interface9_bank_bus_dat_r <= 1'd0;
    if (csrbank9_sel) begin
        case (interface9_bank_bus_adr[8:0])
            1'd0: begin
                interface9_bank_bus_dat_r <= csrbank9_control0_w;
            end
            1'd1: begin
                interface9_bank_bus_dat_r <= csrbank9_status_w;
            end
            2'd2: begin
                interface9_bank_bus_dat_r <= csrbank9_mosi0_w;
            end
            2'd3: begin
                interface9_bank_bus_dat_r <= csrbank9_miso_w;
            end
            3'd4: begin
                interface9_bank_bus_dat_r <= csrbank9_cs0_w;
            end
            3'd5: begin
                interface9_bank_bus_dat_r <= csrbank9_loopback0_w;
            end
            3'd6: begin
                interface9_bank_bus_dat_r <= csrbank9_clk_divider0_w;
            end
        endcase
    end
    if (csrbank9_control0_re) begin
        spi_master_control_storage <= csrbank9_control0_r;
    end
    spi_master_control_re <= csrbank9_control0_re;
    spi_master_status_re <= csrbank9_status_re;
    if (csrbank9_mosi0_re) begin
        spi_master_mosi_storage <= csrbank9_mosi0_r;
    end
    spi_master_mosi_re <= csrbank9_mosi0_re;
    spi_master_miso_re <= csrbank9_miso_re;
    if (csrbank9_cs0_re) begin
        spi_master_cs_storage <= csrbank9_cs0_r;
    end
    spi_master_cs_re <= csrbank9_cs0_re;
    if (csrbank9_loopback0_re) begin
        spi_master_loopback_storage <= csrbank9_loopback0_r;
    end
    spi_master_loopback_re <= csrbank9_loopback0_re;
    if (csrbank9_clk_divider0_re) begin
        spimaster_storage <= csrbank9_clk_divider0_r;
    end
    spimaster_re <= csrbank9_clk_divider0_re;
    interface10_bank_bus_dat_r <= 1'd0;
    if (csrbank10_sel) begin
        case (interface10_bank_bus_adr[8:0])
            1'd0: begin
                interface10_bank_bus_dat_r <= csrbank10_load0_w;
            end
            1'd1: begin
                interface10_bank_bus_dat_r <= csrbank10_reload0_w;
            end
            2'd2: begin
                interface10_bank_bus_dat_r <= csrbank10_en0_w;
            end
            2'd3: begin
                interface10_bank_bus_dat_r <= csrbank10_update_value0_w;
            end
            3'd4: begin
                interface10_bank_bus_dat_r <= csrbank10_value_w;
            end
            3'd5: begin
                interface10_bank_bus_dat_r <= csrbank10_ev_status_w;
            end
            3'd6: begin
                interface10_bank_bus_dat_r <= csrbank10_ev_pending_w;
            end
            3'd7: begin
                interface10_bank_bus_dat_r <= csrbank10_ev_enable0_w;
            end
        endcase
    end
    if (csrbank10_load0_re) begin
        mgmtsoc_load_storage <= csrbank10_load0_r;
    end
    mgmtsoc_load_re <= csrbank10_load0_re;
    if (csrbank10_reload0_re) begin
        mgmtsoc_reload_storage <= csrbank10_reload0_r;
    end
    mgmtsoc_reload_re <= csrbank10_reload0_re;
    if (csrbank10_en0_re) begin
        mgmtsoc_en_storage <= csrbank10_en0_r;
    end
    mgmtsoc_en_re <= csrbank10_en0_re;
    if (csrbank10_update_value0_re) begin
        mgmtsoc_update_value_storage <= csrbank10_update_value0_r;
    end
    mgmtsoc_update_value_re <= csrbank10_update_value0_re;
    mgmtsoc_value_re <= csrbank10_value_re;
    mgmtsoc_status_re <= csrbank10_ev_status_re;
    if (csrbank10_ev_pending_re) begin
        mgmtsoc_pending_r <= csrbank10_ev_pending_r;
    end
    mgmtsoc_pending_re <= csrbank10_ev_pending_re;
    if (csrbank10_ev_enable0_re) begin
        mgmtsoc_enable_storage <= csrbank10_ev_enable0_r;
    end
    mgmtsoc_enable_re <= csrbank10_ev_enable0_re;
    interface11_bank_bus_dat_r <= 1'd0;
    if (csrbank11_sel) begin
        case (interface11_bank_bus_adr[8:0])
            1'd0: begin
                interface11_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                interface11_bank_bus_dat_r <= csrbank11_txfull_w;
            end
            2'd2: begin
                interface11_bank_bus_dat_r <= csrbank11_rxempty_w;
            end
            2'd3: begin
                interface11_bank_bus_dat_r <= csrbank11_ev_status_w;
            end
            3'd4: begin
                interface11_bank_bus_dat_r <= csrbank11_ev_pending_w;
            end
            3'd5: begin
                interface11_bank_bus_dat_r <= csrbank11_ev_enable0_w;
            end
            3'd6: begin
                interface11_bank_bus_dat_r <= csrbank11_txempty_w;
            end
            3'd7: begin
                interface11_bank_bus_dat_r <= csrbank11_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csrbank11_txfull_re;
    uart_rxempty_re <= csrbank11_rxempty_re;
    uart_status_re <= csrbank11_ev_status_re;
    if (csrbank11_ev_pending_re) begin
        uart_pending_r <= csrbank11_ev_pending_r;
    end
    uart_pending_re <= csrbank11_ev_pending_re;
    if (csrbank11_ev_enable0_re) begin
        uart_enable_storage <= csrbank11_ev_enable0_r;
    end
    uart_enable_re <= csrbank11_ev_enable0_re;
    uart_txempty_re <= csrbank11_txempty_re;
    uart_rxfull_re <= csrbank11_rxfull_re;
    interface12_bank_bus_dat_r <= 1'd0;
    if (csrbank12_sel) begin
        case (interface12_bank_bus_adr[8:0])
            1'd0: begin
                interface12_bank_bus_dat_r <= csrbank12_out0_w;
            end
        endcase
    end
    if (csrbank12_out0_re) begin
        uart_enabled_storage <= csrbank12_out0_r;
    end
    uart_enabled_re <= csrbank12_out0_re;
    interface13_bank_bus_dat_r <= 1'd0;
    if (csrbank13_sel) begin
        case (interface13_bank_bus_adr[8:0])
            1'd0: begin
                interface13_bank_bus_dat_r <= csrbank13_in_w;
            end
            1'd1: begin
                interface13_bank_bus_dat_r <= csrbank13_mode0_w;
            end
            2'd2: begin
                interface13_bank_bus_dat_r <= csrbank13_edge0_w;
            end
            2'd3: begin
                interface13_bank_bus_dat_r <= csrbank13_ev_status_w;
            end
            3'd4: begin
                interface13_bank_bus_dat_r <= csrbank13_ev_pending_w;
            end
            3'd5: begin
                interface13_bank_bus_dat_r <= csrbank13_ev_enable0_w;
            end
        endcase
    end
    gpioin0_in_re <= csrbank13_in_re;
    if (csrbank13_mode0_re) begin
        gpioin0_gpioin0_mode_storage <= csrbank13_mode0_r;
    end
    gpioin0_gpioin0_mode_re <= csrbank13_mode0_re;
    if (csrbank13_edge0_re) begin
        gpioin0_gpioin0_edge_storage <= csrbank13_edge0_r;
    end
    gpioin0_gpioin0_edge_re <= csrbank13_edge0_re;
    gpioin0_gpioin0_status_re <= csrbank13_ev_status_re;
    if (csrbank13_ev_pending_re) begin
        gpioin0_gpioin0_pending_r <= csrbank13_ev_pending_r;
    end
    gpioin0_gpioin0_pending_re <= csrbank13_ev_pending_re;
    if (csrbank13_ev_enable0_re) begin
        gpioin0_gpioin0_enable_storage <= csrbank13_ev_enable0_r;
    end
    gpioin0_gpioin0_enable_re <= csrbank13_ev_enable0_re;
    interface14_bank_bus_dat_r <= 1'd0;
    if (csrbank14_sel) begin
        case (interface14_bank_bus_adr[8:0])
            1'd0: begin
                interface14_bank_bus_dat_r <= csrbank14_in_w;
            end
            1'd1: begin
                interface14_bank_bus_dat_r <= csrbank14_mode0_w;
            end
            2'd2: begin
                interface14_bank_bus_dat_r <= csrbank14_edge0_w;
            end
            2'd3: begin
                interface14_bank_bus_dat_r <= csrbank14_ev_status_w;
            end
            3'd4: begin
                interface14_bank_bus_dat_r <= csrbank14_ev_pending_w;
            end
            3'd5: begin
                interface14_bank_bus_dat_r <= csrbank14_ev_enable0_w;
            end
        endcase
    end
    gpioin1_in_re <= csrbank14_in_re;
    if (csrbank14_mode0_re) begin
        gpioin1_gpioin1_mode_storage <= csrbank14_mode0_r;
    end
    gpioin1_gpioin1_mode_re <= csrbank14_mode0_re;
    if (csrbank14_edge0_re) begin
        gpioin1_gpioin1_edge_storage <= csrbank14_edge0_r;
    end
    gpioin1_gpioin1_edge_re <= csrbank14_edge0_re;
    gpioin1_gpioin1_status_re <= csrbank14_ev_status_re;
    if (csrbank14_ev_pending_re) begin
        gpioin1_gpioin1_pending_r <= csrbank14_ev_pending_r;
    end
    gpioin1_gpioin1_pending_re <= csrbank14_ev_pending_re;
    if (csrbank14_ev_enable0_re) begin
        gpioin1_gpioin1_enable_storage <= csrbank14_ev_enable0_r;
    end
    gpioin1_gpioin1_enable_re <= csrbank14_ev_enable0_re;
    interface15_bank_bus_dat_r <= 1'd0;
    if (csrbank15_sel) begin
        case (interface15_bank_bus_adr[8:0])
            1'd0: begin
                interface15_bank_bus_dat_r <= csrbank15_in_w;
            end
            1'd1: begin
                interface15_bank_bus_dat_r <= csrbank15_mode0_w;
            end
            2'd2: begin
                interface15_bank_bus_dat_r <= csrbank15_edge0_w;
            end
            2'd3: begin
                interface15_bank_bus_dat_r <= csrbank15_ev_status_w;
            end
            3'd4: begin
                interface15_bank_bus_dat_r <= csrbank15_ev_pending_w;
            end
            3'd5: begin
                interface15_bank_bus_dat_r <= csrbank15_ev_enable0_w;
            end
        endcase
    end
    gpioin2_in_re <= csrbank15_in_re;
    if (csrbank15_mode0_re) begin
        gpioin2_gpioin2_mode_storage <= csrbank15_mode0_r;
    end
    gpioin2_gpioin2_mode_re <= csrbank15_mode0_re;
    if (csrbank15_edge0_re) begin
        gpioin2_gpioin2_edge_storage <= csrbank15_edge0_r;
    end
    gpioin2_gpioin2_edge_re <= csrbank15_edge0_re;
    gpioin2_gpioin2_status_re <= csrbank15_ev_status_re;
    if (csrbank15_ev_pending_re) begin
        gpioin2_gpioin2_pending_r <= csrbank15_ev_pending_r;
    end
    gpioin2_gpioin2_pending_re <= csrbank15_ev_pending_re;
    if (csrbank15_ev_enable0_re) begin
        gpioin2_gpioin2_enable_storage <= csrbank15_ev_enable0_r;
    end
    gpioin2_gpioin2_enable_re <= csrbank15_ev_enable0_re;
    interface16_bank_bus_dat_r <= 1'd0;
    if (csrbank16_sel) begin
        case (interface16_bank_bus_adr[8:0])
            1'd0: begin
                interface16_bank_bus_dat_r <= csrbank16_in_w;
            end
            1'd1: begin
                interface16_bank_bus_dat_r <= csrbank16_mode0_w;
            end
            2'd2: begin
                interface16_bank_bus_dat_r <= csrbank16_edge0_w;
            end
            2'd3: begin
                interface16_bank_bus_dat_r <= csrbank16_ev_status_w;
            end
            3'd4: begin
                interface16_bank_bus_dat_r <= csrbank16_ev_pending_w;
            end
            3'd5: begin
                interface16_bank_bus_dat_r <= csrbank16_ev_enable0_w;
            end
        endcase
    end
    gpioin3_in_re <= csrbank16_in_re;
    if (csrbank16_mode0_re) begin
        gpioin3_gpioin3_mode_storage <= csrbank16_mode0_r;
    end
    gpioin3_gpioin3_mode_re <= csrbank16_mode0_re;
    if (csrbank16_edge0_re) begin
        gpioin3_gpioin3_edge_storage <= csrbank16_edge0_r;
    end
    gpioin3_gpioin3_edge_re <= csrbank16_edge0_re;
    gpioin3_gpioin3_status_re <= csrbank16_ev_status_re;
    if (csrbank16_ev_pending_re) begin
        gpioin3_gpioin3_pending_r <= csrbank16_ev_pending_r;
    end
    gpioin3_gpioin3_pending_re <= csrbank16_ev_pending_re;
    if (csrbank16_ev_enable0_re) begin
        gpioin3_gpioin3_enable_storage <= csrbank16_ev_enable0_r;
    end
    gpioin3_gpioin3_enable_re <= csrbank16_ev_enable0_re;
    interface17_bank_bus_dat_r <= 1'd0;
    if (csrbank17_sel) begin
        case (interface17_bank_bus_adr[8:0])
            1'd0: begin
                interface17_bank_bus_dat_r <= csrbank17_in_w;
            end
            1'd1: begin
                interface17_bank_bus_dat_r <= csrbank17_mode0_w;
            end
            2'd2: begin
                interface17_bank_bus_dat_r <= csrbank17_edge0_w;
            end
            2'd3: begin
                interface17_bank_bus_dat_r <= csrbank17_ev_status_w;
            end
            3'd4: begin
                interface17_bank_bus_dat_r <= csrbank17_ev_pending_w;
            end
            3'd5: begin
                interface17_bank_bus_dat_r <= csrbank17_ev_enable0_w;
            end
        endcase
    end
    gpioin4_in_re <= csrbank17_in_re;
    if (csrbank17_mode0_re) begin
        gpioin4_gpioin4_mode_storage <= csrbank17_mode0_r;
    end
    gpioin4_gpioin4_mode_re <= csrbank17_mode0_re;
    if (csrbank17_edge0_re) begin
        gpioin4_gpioin4_edge_storage <= csrbank17_edge0_r;
    end
    gpioin4_gpioin4_edge_re <= csrbank17_edge0_re;
    gpioin4_gpioin4_status_re <= csrbank17_ev_status_re;
    if (csrbank17_ev_pending_re) begin
        gpioin4_gpioin4_pending_r <= csrbank17_ev_pending_r;
    end
    gpioin4_gpioin4_pending_re <= csrbank17_ev_pending_re;
    if (csrbank17_ev_enable0_re) begin
        gpioin4_gpioin4_enable_storage <= csrbank17_ev_enable0_r;
    end
    gpioin4_gpioin4_enable_re <= csrbank17_ev_enable0_re;
    interface18_bank_bus_dat_r <= 1'd0;
    if (csrbank18_sel) begin
        case (interface18_bank_bus_adr[8:0])
            1'd0: begin
                interface18_bank_bus_dat_r <= csrbank18_in_w;
            end
            1'd1: begin
                interface18_bank_bus_dat_r <= csrbank18_mode0_w;
            end
            2'd2: begin
                interface18_bank_bus_dat_r <= csrbank18_edge0_w;
            end
            2'd3: begin
                interface18_bank_bus_dat_r <= csrbank18_ev_status_w;
            end
            3'd4: begin
                interface18_bank_bus_dat_r <= csrbank18_ev_pending_w;
            end
            3'd5: begin
                interface18_bank_bus_dat_r <= csrbank18_ev_enable0_w;
            end
        endcase
    end
    gpioin5_in_re <= csrbank18_in_re;
    if (csrbank18_mode0_re) begin
        gpioin5_gpioin5_mode_storage <= csrbank18_mode0_r;
    end
    gpioin5_gpioin5_mode_re <= csrbank18_mode0_re;
    if (csrbank18_edge0_re) begin
        gpioin5_gpioin5_edge_storage <= csrbank18_edge0_r;
    end
    gpioin5_gpioin5_edge_re <= csrbank18_edge0_re;
    gpioin5_gpioin5_status_re <= csrbank18_ev_status_re;
    if (csrbank18_ev_pending_re) begin
        gpioin5_gpioin5_pending_r <= csrbank18_ev_pending_r;
    end
    gpioin5_gpioin5_pending_re <= csrbank18_ev_pending_re;
    if (csrbank18_ev_enable0_re) begin
        gpioin5_gpioin5_enable_storage <= csrbank18_ev_enable0_r;
    end
    gpioin5_gpioin5_enable_re <= csrbank18_ev_enable0_re;
    interface19_bank_bus_dat_r <= 1'd0;
    if (csrbank19_sel) begin
        case (interface19_bank_bus_adr[8:0])
            1'd0: begin
                interface19_bank_bus_dat_r <= csrbank19_out0_w;
            end
        endcase
    end
    if (csrbank19_out0_re) begin
        user_irq_ena_storage <= csrbank19_out0_r;
    end
    user_irq_ena_re <= csrbank19_out0_re;
    if (sys_rst) begin
	    // ****** added to correct GL testbench failure
        dbg_uart_tx_data <= 8'd0;
        dbg_uart_tx_count <= 4'd0;
        dbg_uart_tx_tick <= 1'd0;
        dbg_uart_tx_phase <= 32'd0;
        dbg_uart_rx_tick <= 1'd0;
        dbg_uart_rx_phase <= 32'd0;
        dbg_uart_rx_rx_d <= 1'd0;
        dbg_uart_cmd <= 8'd0;
        dbg_uart_incr <= 1'd0;
        dbg_uart_address <= 32'd0;
        dbg_uart_data <= 32'd0;
        dbg_uart_bytes_count <= 2'd0;
        dbg_uart_words_count <= 8'd0;
        dbg_uart_count <= 20'd1000000;
	    // ******
        mgmtsoc_reset_storage <= 2'd0;
        mgmtsoc_reset_re <= 1'd0;
        mgmtsoc_scratch_storage <= 32'd305419896;
        mgmtsoc_scratch_re <= 1'd0;
        mgmtsoc_bus_errors_re <= 1'd0;
        mgmtsoc_bus_errors <= 32'd0;
        mgmtsoc_converter0_count <= 1'd0;
        mgmtsoc_converter1_count <= 1'd0;
        mgmtsoc_load_storage <= 32'd0;
        mgmtsoc_load_re <= 1'd0;
        mgmtsoc_reload_storage <= 32'd0;
        mgmtsoc_reload_re <= 1'd0;
        mgmtsoc_en_storage <= 1'd0;
        mgmtsoc_en_re <= 1'd0;
        mgmtsoc_update_value_storage <= 1'd0;
        mgmtsoc_update_value_re <= 1'd0;
        mgmtsoc_value_status <= 32'd0;
        mgmtsoc_value_re <= 1'd0;
        mgmtsoc_zero_pending <= 1'd0;
        mgmtsoc_zero_trigger_d <= 1'd0;
        mgmtsoc_status_re <= 1'd0;
        mgmtsoc_pending_re <= 1'd0;
        mgmtsoc_pending_r <= 1'd0;
        mgmtsoc_enable_storage <= 1'd0;
        mgmtsoc_enable_re <= 1'd0;
        mgmtsoc_value <= 32'd0;
        dff_bus_ack <= 1'd0;
        dff2_bus_ack <= 1'd0;
        mgmtsoc_litespisdrphycore_storage <= 8'd1;
        mgmtsoc_litespisdrphycore_re <= 1'd0;
        mgmtsoc_litespisdrphycore_cnt <= 8'd0;
        mgmtsoc_litespisdrphycore_clk <= 1'd0;
        mgmtsoc_litespisdrphycore_posedge_reg <= 2'd0;
        mgmtsoc_litespisdrphycore_count <= 4'd11;
        mgmtsoc_mmap_burst_cs <= 1'd0;
        mgmtsoc_mmap_count <= 9'd256;
        mgmtsoc_mmap_storage <= 8'd0;
        mgmtsoc_mmap_re <= 1'd0;
        mgmtsoc_master_cs_storage <= 1'd0;
        mgmtsoc_master_cs_re <= 1'd0;
        mgmtsoc_master_phyconfig_storage <= 24'd0;
        mgmtsoc_master_phyconfig_re <= 1'd0;
        mgmtsoc_master_status_re <= 1'd0;
        mgmtsoc_master_tx_fifo_pipe_valid_source_valid <= 1'd0;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_data <= 32'd0;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_len <= 6'd0;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_width <= 4'd0;
        mgmtsoc_master_tx_fifo_pipe_valid_source_payload_mask <= 8'd0;
        mgmtsoc_master_rx_fifo_pipe_valid_source_valid <= 1'd0;
        mgmtsoc_master_rx_fifo_pipe_valid_source_payload_data <= 32'd0;
        spi_clk <= 1'd0;
        spi_cs_n <= 1'd0;
        spi_mosi <= 1'd0;
        spi_master_miso <= 8'd0;
        spi_master_control_storage <= 16'd0;
        spi_master_control_re <= 1'd0;
        spi_master_status_re <= 1'd0;
        spi_master_mosi_re <= 1'd0;
        spi_master_miso_re <= 1'd0;
        spi_master_cs_storage <= 17'd1;
        spi_master_cs_re <= 1'd0;
        spi_master_loopback_storage <= 1'd0;
        spi_master_loopback_re <= 1'd0;
        spi_master_count <= 3'd0;
        spi_master_clk_divider1 <= 16'd0;
        spi_master_mosi_data <= 8'd0;
        spi_master_mosi_sel <= 3'd0;
        spi_master_miso_data <= 8'd0;
        spimaster_storage <= 16'd100;
        spimaster_re <= 1'd0;
        mprj_wb_iena_storage <= 1'd0;
        mprj_wb_iena_re <= 1'd0;
        sys_uart_tx <= 1'd1;
        uart_phy_tx_tick <= 1'd0;
        uart_phy_rx_tick <= 1'd0;
        uart_phy_rx_rx_d <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        dbg_uart_dbg_uart_tx <= 1'd1;
        dbg_uart_tx_tick <= 1'd0;
        dbg_uart_rx_tick <= 1'd0;
        dbg_uart_rx_rx_d <= 1'd0;
        dbg_uart_incr <= 1'd0;
        dbg_uart_count <= 20'd1000000;
        debug_oeb_storage <= 1'd0;
        debug_oeb_re <= 1'd0;
        debug_mode_storage <= 1'd0;
        debug_mode_re <= 1'd0;
        uart_enabled_storage <= 1'd0;
        uart_enabled_re <= 1'd0;
        gpio_mode1_storage <= 1'd0;
        gpio_mode1_re <= 1'd0;
        gpio_mode0_storage <= 1'd0;
        gpio_mode0_re <= 1'd0;
        gpio_ien_storage <= 1'd0;
        gpio_ien_re <= 1'd0;
        gpio_oe_storage <= 1'd0;
        gpio_oe_re <= 1'd0;
        gpio_in_re <= 1'd0;
        gpio_out_storage <= 1'd0;
        gpio_out_re <= 1'd0;
        la_ien_storage <= 128'd0;
        la_ien_re <= 1'd0;
        la_oe_storage <= 128'd0;
        la_oe_re <= 1'd0;
        la_in_re <= 1'd0;
        la_out_storage <= 128'd0;
        la_out_re <= 1'd0;
        spi_enabled_storage <= 1'd0;
        spi_enabled_re <= 1'd0;
        user_irq_ena_storage <= 3'd0;
        user_irq_ena_re <= 1'd0;
        gpioin0_in_re <= 1'd0;
        gpioin0_gpioin0_mode_storage <= 1'd0;
        gpioin0_gpioin0_mode_re <= 1'd0;
        gpioin0_gpioin0_edge_storage <= 1'd0;
        gpioin0_gpioin0_edge_re <= 1'd0;
        gpioin0_gpioin0_in_pads_n_d <= 1'd0;
        gpioin0_gpioin0_pending <= 1'd0;
        gpioin0_gpioin0_trigger_d <= 1'd0;
        gpioin0_gpioin0_status_re <= 1'd0;
        gpioin0_gpioin0_pending_re <= 1'd0;
        gpioin0_gpioin0_pending_r <= 1'd0;
        gpioin0_gpioin0_enable_storage <= 1'd0;
        gpioin0_gpioin0_enable_re <= 1'd0;
        gpioin1_in_re <= 1'd0;
        gpioin1_gpioin1_mode_storage <= 1'd0;
        gpioin1_gpioin1_mode_re <= 1'd0;
        gpioin1_gpioin1_edge_storage <= 1'd0;
        gpioin1_gpioin1_edge_re <= 1'd0;
        gpioin1_gpioin1_in_pads_n_d <= 1'd0;
        gpioin1_gpioin1_pending <= 1'd0;
        gpioin1_gpioin1_trigger_d <= 1'd0;
        gpioin1_gpioin1_status_re <= 1'd0;
        gpioin1_gpioin1_pending_re <= 1'd0;
        gpioin1_gpioin1_pending_r <= 1'd0;
        gpioin1_gpioin1_enable_storage <= 1'd0;
        gpioin1_gpioin1_enable_re <= 1'd0;
        gpioin2_in_re <= 1'd0;
        gpioin2_gpioin2_mode_storage <= 1'd0;
        gpioin2_gpioin2_mode_re <= 1'd0;
        gpioin2_gpioin2_edge_storage <= 1'd0;
        gpioin2_gpioin2_edge_re <= 1'd0;
        gpioin2_gpioin2_in_pads_n_d <= 1'd0;
        gpioin2_gpioin2_pending <= 1'd0;
        gpioin2_gpioin2_trigger_d <= 1'd0;
        gpioin2_gpioin2_status_re <= 1'd0;
        gpioin2_gpioin2_pending_re <= 1'd0;
        gpioin2_gpioin2_pending_r <= 1'd0;
        gpioin2_gpioin2_enable_storage <= 1'd0;
        gpioin2_gpioin2_enable_re <= 1'd0;
        gpioin3_in_re <= 1'd0;
        gpioin3_gpioin3_mode_storage <= 1'd0;
        gpioin3_gpioin3_mode_re <= 1'd0;
        gpioin3_gpioin3_edge_storage <= 1'd0;
        gpioin3_gpioin3_edge_re <= 1'd0;
        gpioin3_gpioin3_in_pads_n_d <= 1'd0;
        gpioin3_gpioin3_pending <= 1'd0;
        gpioin3_gpioin3_trigger_d <= 1'd0;
        gpioin3_gpioin3_status_re <= 1'd0;
        gpioin3_gpioin3_pending_re <= 1'd0;
        gpioin3_gpioin3_pending_r <= 1'd0;
        gpioin3_gpioin3_enable_storage <= 1'd0;
        gpioin3_gpioin3_enable_re <= 1'd0;
        gpioin4_in_re <= 1'd0;
        gpioin4_gpioin4_mode_storage <= 1'd0;
        gpioin4_gpioin4_mode_re <= 1'd0;
        gpioin4_gpioin4_edge_storage <= 1'd0;
        gpioin4_gpioin4_edge_re <= 1'd0;
        gpioin4_gpioin4_in_pads_n_d <= 1'd0;
        gpioin4_gpioin4_pending <= 1'd0;
        gpioin4_gpioin4_trigger_d <= 1'd0;
        gpioin4_gpioin4_status_re <= 1'd0;
        gpioin4_gpioin4_pending_re <= 1'd0;
        gpioin4_gpioin4_pending_r <= 1'd0;
        gpioin4_gpioin4_enable_storage <= 1'd0;
        gpioin4_gpioin4_enable_re <= 1'd0;
        gpioin5_in_re <= 1'd0;
        gpioin5_gpioin5_mode_storage <= 1'd0;
        gpioin5_gpioin5_mode_re <= 1'd0;
        gpioin5_gpioin5_edge_storage <= 1'd0;
        gpioin5_gpioin5_edge_re <= 1'd0;
        gpioin5_gpioin5_in_pads_n_d <= 1'd0;
        gpioin5_gpioin5_pending <= 1'd0;
        gpioin5_gpioin5_trigger_d <= 1'd0;
        gpioin5_gpioin5_status_re <= 1'd0;
        gpioin5_gpioin5_pending_re <= 1'd0;
        gpioin5_gpioin5_pending_r <= 1'd0;
        gpioin5_gpioin5_enable_storage <= 1'd0;
        gpioin5_gpioin5_enable_re <= 1'd0;
        grant <= 2'd0;
        slave_sel_r <= 8'd0;
        count <= 20'd1000000;
        litespiphy_state <= 2'd0;
        litespi_grant <= 1'd0;
        litespi_state <= 4'd0;
        spimaster_state <= 2'd0;
        rs232phy_rs232phytx_state <= 1'd0;
        rs232phy_rs232phyrx_state <= 1'd0;
        uartwishbonebridge_rs232phytx_state <= 1'd0;
        uartwishbonebridge_rs232phyrx_state <= 1'd0;
        uartwishbonebridge_state <= 3'd0;
        wishbone2csr_state <= 1'd0;
    end
    multiregimpl0_regs0 <= sys_uart_rx;
    multiregimpl0_regs1 <= multiregimpl0_regs0;
    multiregimpl1_regs0 <= dbg_uart_dbg_uart_rx;
    multiregimpl1_regs1 <= multiregimpl1_regs0;
    multiregimpl2_regs0 <= gpio_in_pad;
    multiregimpl2_regs1 <= multiregimpl2_regs0;
    multiregimpl3_regs0 <= la_input[0];
    multiregimpl3_regs1 <= multiregimpl3_regs0;
    multiregimpl4_regs0 <= la_input[1];
    multiregimpl4_regs1 <= multiregimpl4_regs0;
    multiregimpl5_regs0 <= la_input[2];
    multiregimpl5_regs1 <= multiregimpl5_regs0;
    multiregimpl6_regs0 <= la_input[3];
    multiregimpl6_regs1 <= multiregimpl6_regs0;
    multiregimpl7_regs0 <= la_input[4];
    multiregimpl7_regs1 <= multiregimpl7_regs0;
    multiregimpl8_regs0 <= la_input[5];
    multiregimpl8_regs1 <= multiregimpl8_regs0;
    multiregimpl9_regs0 <= la_input[6];
    multiregimpl9_regs1 <= multiregimpl9_regs0;
    multiregimpl10_regs0 <= la_input[7];
    multiregimpl10_regs1 <= multiregimpl10_regs0;
    multiregimpl11_regs0 <= la_input[8];
    multiregimpl11_regs1 <= multiregimpl11_regs0;
    multiregimpl12_regs0 <= la_input[9];
    multiregimpl12_regs1 <= multiregimpl12_regs0;
    multiregimpl13_regs0 <= la_input[10];
    multiregimpl13_regs1 <= multiregimpl13_regs0;
    multiregimpl14_regs0 <= la_input[11];
    multiregimpl14_regs1 <= multiregimpl14_regs0;
    multiregimpl15_regs0 <= la_input[12];
    multiregimpl15_regs1 <= multiregimpl15_regs0;
    multiregimpl16_regs0 <= la_input[13];
    multiregimpl16_regs1 <= multiregimpl16_regs0;
    multiregimpl17_regs0 <= la_input[14];
    multiregimpl17_regs1 <= multiregimpl17_regs0;
    multiregimpl18_regs0 <= la_input[15];
    multiregimpl18_regs1 <= multiregimpl18_regs0;
    multiregimpl19_regs0 <= la_input[16];
    multiregimpl19_regs1 <= multiregimpl19_regs0;
    multiregimpl20_regs0 <= la_input[17];
    multiregimpl20_regs1 <= multiregimpl20_regs0;
    multiregimpl21_regs0 <= la_input[18];
    multiregimpl21_regs1 <= multiregimpl21_regs0;
    multiregimpl22_regs0 <= la_input[19];
    multiregimpl22_regs1 <= multiregimpl22_regs0;
    multiregimpl23_regs0 <= la_input[20];
    multiregimpl23_regs1 <= multiregimpl23_regs0;
    multiregimpl24_regs0 <= la_input[21];
    multiregimpl24_regs1 <= multiregimpl24_regs0;
    multiregimpl25_regs0 <= la_input[22];
    multiregimpl25_regs1 <= multiregimpl25_regs0;
    multiregimpl26_regs0 <= la_input[23];
    multiregimpl26_regs1 <= multiregimpl26_regs0;
    multiregimpl27_regs0 <= la_input[24];
    multiregimpl27_regs1 <= multiregimpl27_regs0;
    multiregimpl28_regs0 <= la_input[25];
    multiregimpl28_regs1 <= multiregimpl28_regs0;
    multiregimpl29_regs0 <= la_input[26];
    multiregimpl29_regs1 <= multiregimpl29_regs0;
    multiregimpl30_regs0 <= la_input[27];
    multiregimpl30_regs1 <= multiregimpl30_regs0;
    multiregimpl31_regs0 <= la_input[28];
    multiregimpl31_regs1 <= multiregimpl31_regs0;
    multiregimpl32_regs0 <= la_input[29];
    multiregimpl32_regs1 <= multiregimpl32_regs0;
    multiregimpl33_regs0 <= la_input[30];
    multiregimpl33_regs1 <= multiregimpl33_regs0;
    multiregimpl34_regs0 <= la_input[31];
    multiregimpl34_regs1 <= multiregimpl34_regs0;
    multiregimpl35_regs0 <= la_input[32];
    multiregimpl35_regs1 <= multiregimpl35_regs0;
    multiregimpl36_regs0 <= la_input[33];
    multiregimpl36_regs1 <= multiregimpl36_regs0;
    multiregimpl37_regs0 <= la_input[34];
    multiregimpl37_regs1 <= multiregimpl37_regs0;
    multiregimpl38_regs0 <= la_input[35];
    multiregimpl38_regs1 <= multiregimpl38_regs0;
    multiregimpl39_regs0 <= la_input[36];
    multiregimpl39_regs1 <= multiregimpl39_regs0;
    multiregimpl40_regs0 <= la_input[37];
    multiregimpl40_regs1 <= multiregimpl40_regs0;
    multiregimpl41_regs0 <= la_input[38];
    multiregimpl41_regs1 <= multiregimpl41_regs0;
    multiregimpl42_regs0 <= la_input[39];
    multiregimpl42_regs1 <= multiregimpl42_regs0;
    multiregimpl43_regs0 <= la_input[40];
    multiregimpl43_regs1 <= multiregimpl43_regs0;
    multiregimpl44_regs0 <= la_input[41];
    multiregimpl44_regs1 <= multiregimpl44_regs0;
    multiregimpl45_regs0 <= la_input[42];
    multiregimpl45_regs1 <= multiregimpl45_regs0;
    multiregimpl46_regs0 <= la_input[43];
    multiregimpl46_regs1 <= multiregimpl46_regs0;
    multiregimpl47_regs0 <= la_input[44];
    multiregimpl47_regs1 <= multiregimpl47_regs0;
    multiregimpl48_regs0 <= la_input[45];
    multiregimpl48_regs1 <= multiregimpl48_regs0;
    multiregimpl49_regs0 <= la_input[46];
    multiregimpl49_regs1 <= multiregimpl49_regs0;
    multiregimpl50_regs0 <= la_input[47];
    multiregimpl50_regs1 <= multiregimpl50_regs0;
    multiregimpl51_regs0 <= la_input[48];
    multiregimpl51_regs1 <= multiregimpl51_regs0;
    multiregimpl52_regs0 <= la_input[49];
    multiregimpl52_regs1 <= multiregimpl52_regs0;
    multiregimpl53_regs0 <= la_input[50];
    multiregimpl53_regs1 <= multiregimpl53_regs0;
    multiregimpl54_regs0 <= la_input[51];
    multiregimpl54_regs1 <= multiregimpl54_regs0;
    multiregimpl55_regs0 <= la_input[52];
    multiregimpl55_regs1 <= multiregimpl55_regs0;
    multiregimpl56_regs0 <= la_input[53];
    multiregimpl56_regs1 <= multiregimpl56_regs0;
    multiregimpl57_regs0 <= la_input[54];
    multiregimpl57_regs1 <= multiregimpl57_regs0;
    multiregimpl58_regs0 <= la_input[55];
    multiregimpl58_regs1 <= multiregimpl58_regs0;
    multiregimpl59_regs0 <= la_input[56];
    multiregimpl59_regs1 <= multiregimpl59_regs0;
    multiregimpl60_regs0 <= la_input[57];
    multiregimpl60_regs1 <= multiregimpl60_regs0;
    multiregimpl61_regs0 <= la_input[58];
    multiregimpl61_regs1 <= multiregimpl61_regs0;
    multiregimpl62_regs0 <= la_input[59];
    multiregimpl62_regs1 <= multiregimpl62_regs0;
    multiregimpl63_regs0 <= la_input[60];
    multiregimpl63_regs1 <= multiregimpl63_regs0;
    multiregimpl64_regs0 <= la_input[61];
    multiregimpl64_regs1 <= multiregimpl64_regs0;
    multiregimpl65_regs0 <= la_input[62];
    multiregimpl65_regs1 <= multiregimpl65_regs0;
    multiregimpl66_regs0 <= la_input[63];
    multiregimpl66_regs1 <= multiregimpl66_regs0;
    multiregimpl67_regs0 <= la_input[64];
    multiregimpl67_regs1 <= multiregimpl67_regs0;
    multiregimpl68_regs0 <= la_input[65];
    multiregimpl68_regs1 <= multiregimpl68_regs0;
    multiregimpl69_regs0 <= la_input[66];
    multiregimpl69_regs1 <= multiregimpl69_regs0;
    multiregimpl70_regs0 <= la_input[67];
    multiregimpl70_regs1 <= multiregimpl70_regs0;
    multiregimpl71_regs0 <= la_input[68];
    multiregimpl71_regs1 <= multiregimpl71_regs0;
    multiregimpl72_regs0 <= la_input[69];
    multiregimpl72_regs1 <= multiregimpl72_regs0;
    multiregimpl73_regs0 <= la_input[70];
    multiregimpl73_regs1 <= multiregimpl73_regs0;
    multiregimpl74_regs0 <= la_input[71];
    multiregimpl74_regs1 <= multiregimpl74_regs0;
    multiregimpl75_regs0 <= la_input[72];
    multiregimpl75_regs1 <= multiregimpl75_regs0;
    multiregimpl76_regs0 <= la_input[73];
    multiregimpl76_regs1 <= multiregimpl76_regs0;
    multiregimpl77_regs0 <= la_input[74];
    multiregimpl77_regs1 <= multiregimpl77_regs0;
    multiregimpl78_regs0 <= la_input[75];
    multiregimpl78_regs1 <= multiregimpl78_regs0;
    multiregimpl79_regs0 <= la_input[76];
    multiregimpl79_regs1 <= multiregimpl79_regs0;
    multiregimpl80_regs0 <= la_input[77];
    multiregimpl80_regs1 <= multiregimpl80_regs0;
    multiregimpl81_regs0 <= la_input[78];
    multiregimpl81_regs1 <= multiregimpl81_regs0;
    multiregimpl82_regs0 <= la_input[79];
    multiregimpl82_regs1 <= multiregimpl82_regs0;
    multiregimpl83_regs0 <= la_input[80];
    multiregimpl83_regs1 <= multiregimpl83_regs0;
    multiregimpl84_regs0 <= la_input[81];
    multiregimpl84_regs1 <= multiregimpl84_regs0;
    multiregimpl85_regs0 <= la_input[82];
    multiregimpl85_regs1 <= multiregimpl85_regs0;
    multiregimpl86_regs0 <= la_input[83];
    multiregimpl86_regs1 <= multiregimpl86_regs0;
    multiregimpl87_regs0 <= la_input[84];
    multiregimpl87_regs1 <= multiregimpl87_regs0;
    multiregimpl88_regs0 <= la_input[85];
    multiregimpl88_regs1 <= multiregimpl88_regs0;
    multiregimpl89_regs0 <= la_input[86];
    multiregimpl89_regs1 <= multiregimpl89_regs0;
    multiregimpl90_regs0 <= la_input[87];
    multiregimpl90_regs1 <= multiregimpl90_regs0;
    multiregimpl91_regs0 <= la_input[88];
    multiregimpl91_regs1 <= multiregimpl91_regs0;
    multiregimpl92_regs0 <= la_input[89];
    multiregimpl92_regs1 <= multiregimpl92_regs0;
    multiregimpl93_regs0 <= la_input[90];
    multiregimpl93_regs1 <= multiregimpl93_regs0;
    multiregimpl94_regs0 <= la_input[91];
    multiregimpl94_regs1 <= multiregimpl94_regs0;
    multiregimpl95_regs0 <= la_input[92];
    multiregimpl95_regs1 <= multiregimpl95_regs0;
    multiregimpl96_regs0 <= la_input[93];
    multiregimpl96_regs1 <= multiregimpl96_regs0;
    multiregimpl97_regs0 <= la_input[94];
    multiregimpl97_regs1 <= multiregimpl97_regs0;
    multiregimpl98_regs0 <= la_input[95];
    multiregimpl98_regs1 <= multiregimpl98_regs0;
    multiregimpl99_regs0 <= la_input[96];
    multiregimpl99_regs1 <= multiregimpl99_regs0;
    multiregimpl100_regs0 <= la_input[97];
    multiregimpl100_regs1 <= multiregimpl100_regs0;
    multiregimpl101_regs0 <= la_input[98];
    multiregimpl101_regs1 <= multiregimpl101_regs0;
    multiregimpl102_regs0 <= la_input[99];
    multiregimpl102_regs1 <= multiregimpl102_regs0;
    multiregimpl103_regs0 <= la_input[100];
    multiregimpl103_regs1 <= multiregimpl103_regs0;
    multiregimpl104_regs0 <= la_input[101];
    multiregimpl104_regs1 <= multiregimpl104_regs0;
    multiregimpl105_regs0 <= la_input[102];
    multiregimpl105_regs1 <= multiregimpl105_regs0;
    multiregimpl106_regs0 <= la_input[103];
    multiregimpl106_regs1 <= multiregimpl106_regs0;
    multiregimpl107_regs0 <= la_input[104];
    multiregimpl107_regs1 <= multiregimpl107_regs0;
    multiregimpl108_regs0 <= la_input[105];
    multiregimpl108_regs1 <= multiregimpl108_regs0;
    multiregimpl109_regs0 <= la_input[106];
    multiregimpl109_regs1 <= multiregimpl109_regs0;
    multiregimpl110_regs0 <= la_input[107];
    multiregimpl110_regs1 <= multiregimpl110_regs0;
    multiregimpl111_regs0 <= la_input[108];
    multiregimpl111_regs1 <= multiregimpl111_regs0;
    multiregimpl112_regs0 <= la_input[109];
    multiregimpl112_regs1 <= multiregimpl112_regs0;
    multiregimpl113_regs0 <= la_input[110];
    multiregimpl113_regs1 <= multiregimpl113_regs0;
    multiregimpl114_regs0 <= la_input[111];
    multiregimpl114_regs1 <= multiregimpl114_regs0;
    multiregimpl115_regs0 <= la_input[112];
    multiregimpl115_regs1 <= multiregimpl115_regs0;
    multiregimpl116_regs0 <= la_input[113];
    multiregimpl116_regs1 <= multiregimpl116_regs0;
    multiregimpl117_regs0 <= la_input[114];
    multiregimpl117_regs1 <= multiregimpl117_regs0;
    multiregimpl118_regs0 <= la_input[115];
    multiregimpl118_regs1 <= multiregimpl118_regs0;
    multiregimpl119_regs0 <= la_input[116];
    multiregimpl119_regs1 <= multiregimpl119_regs0;
    multiregimpl120_regs0 <= la_input[117];
    multiregimpl120_regs1 <= multiregimpl120_regs0;
    multiregimpl121_regs0 <= la_input[118];
    multiregimpl121_regs1 <= multiregimpl121_regs0;
    multiregimpl122_regs0 <= la_input[119];
    multiregimpl122_regs1 <= multiregimpl122_regs0;
    multiregimpl123_regs0 <= la_input[120];
    multiregimpl123_regs1 <= multiregimpl123_regs0;
    multiregimpl124_regs0 <= la_input[121];
    multiregimpl124_regs1 <= multiregimpl124_regs0;
    multiregimpl125_regs0 <= la_input[122];
    multiregimpl125_regs1 <= multiregimpl125_regs0;
    multiregimpl126_regs0 <= la_input[123];
    multiregimpl126_regs1 <= multiregimpl126_regs0;
    multiregimpl127_regs0 <= la_input[124];
    multiregimpl127_regs1 <= multiregimpl127_regs0;
    multiregimpl128_regs0 <= la_input[125];
    multiregimpl128_regs1 <= multiregimpl128_regs0;
    multiregimpl129_regs0 <= la_input[126];
    multiregimpl129_regs1 <= multiregimpl129_regs0;
    multiregimpl130_regs0 <= la_input[127];
    multiregimpl130_regs1 <= multiregimpl130_regs0;
    multiregimpl131_regs0 <= user_irq[0];
    multiregimpl131_regs1 <= multiregimpl131_regs0;
    multiregimpl132_regs0 <= user_irq[1];
    multiregimpl132_regs1 <= multiregimpl132_regs0;
    multiregimpl133_regs0 <= user_irq[2];
    multiregimpl133_regs1 <= multiregimpl133_regs0;
    multiregimpl134_regs0 <= user_irq[3];
    multiregimpl134_regs1 <= multiregimpl134_regs0;
    multiregimpl135_regs0 <= user_irq[4];
    multiregimpl135_regs1 <= multiregimpl135_regs0;
    multiregimpl136_regs0 <= user_irq[5];
    multiregimpl136_regs1 <= multiregimpl136_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance RAM256 of RAM256 Module.
//------------------------------------------------------------------------------
RAM256 RAM256(
	// Inputs.
	.A0  (dff_bus_adr[7:0]),
	.CLK (sys_clk),
	.Di0 (dff_di),
	.EN0 (dff_en),
	.WE0 (dff_we),

	// Outputs.
	.Do0 (dff_do)
);

//------------------------------------------------------------------------------
// Instance RAM128 of RAM128 Module.
//------------------------------------------------------------------------------
RAM128 RAM128(
	// Inputs.
	.A0  (dff2_bus_adr[6:0]),
	.CLK (sys_clk),
	.Di0 (dff2_di),
	.EN0 (dff2_en),
	.WE0 (dff2_we),

	// Outputs.
	.Do0 (dff2_do)
);

//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance xics_icp_wrapper of xics_icp_wrapper Module.
//------------------------------------------------------------------------------
xics_icp_wrapper xics_icp_wrapper(
	// Inputs.
	.clk            (sys_clk),
	.ics_in_pri     (mgmtsoc_ics_icp_xfer_pri),
	.ics_in_src     (mgmtsoc_ics_icp_xfer_src),
	.rst            (sys_rst),
	.wishbone_adr   (mgmtsoc_icp_bus_adr),
	.wishbone_cyc   (mgmtsoc_icp_bus_cyc),
	.wishbone_dat_w (mgmtsoc_icp_bus_dat_w),
	.wishbone_sel   (mgmtsoc_icp_bus_sel),
	.wishbone_stb   (mgmtsoc_icp_bus_stb),
	.wishbone_we    (mgmtsoc_icp_bus_we),

	// Outputs.
	.core_irq_out   (mgmtsoc_microwatt_core_ext_irq),
	.wishbone_ack   (mgmtsoc_icp_bus_ack),
	.wishbone_dat_r (mgmtsoc_icp_bus_dat_r)
);

//------------------------------------------------------------------------------
// Instance xics_ics_wrapper of xics_ics_wrapper Module.
//------------------------------------------------------------------------------
xics_ics_wrapper xics_ics_wrapper(
	// Inputs.
	.clk            (sys_clk),
	.int_level_in   (mgmtsoc_microwatt_interrupt),
	.rst            (sys_rst),
	.wishbone_adr   (mgmtsoc_ics_bus_adr),
	.wishbone_cyc   (mgmtsoc_ics_bus_cyc),
	.wishbone_dat_w (mgmtsoc_ics_bus_dat_w),
	.wishbone_sel   (mgmtsoc_ics_bus_sel),
	.wishbone_stb   (mgmtsoc_ics_bus_stb),
	.wishbone_we    (mgmtsoc_ics_bus_we),

	// Outputs.
	.icp_out_pri    (mgmtsoc_ics_icp_xfer_pri),
	.icp_out_src    (mgmtsoc_ics_icp_xfer_src),
	.wishbone_ack   (mgmtsoc_ics_bus_ack),
	.wishbone_dat_r (mgmtsoc_ics_bus_dat_r)
);

//------------------------------------------------------------------------------
// Instance microwatt_wrapper of microwatt_wrapper Module.
//------------------------------------------------------------------------------
microwatt_wrapper microwatt_wrapper(
`ifdef USE_POWER_PINS
    .vccd1(VPWR),
    .vssd1(VGND),
`endif
	// Inputs.
	.clk                 (sys_clk),
	.core_ext_irq        (mgmtsoc_microwatt_core_ext_irq),
	.dmi_addr            (1'd0),
	.dmi_din             (1'd0),
	.dmi_req             (1'd0),
	.dmi_wr              (1'd0),
	.rst                 ((sys_rst | mgmtsoc_microwatt_reset)),
	.wb_snoop_in_adr     (1'd0),
	.wb_snoop_in_cyc     (1'd0),
	.wb_snoop_in_dat_w   (1'd0),
	.wb_snoop_in_sel     (1'd0),
	.wb_snoop_in_stb     (1'd0),
	.wb_snoop_in_we      (1'd0),
	.wishbone_data_ack   (mgmtsoc_microwatt_dbus_ack),
	.wishbone_data_dat_r (mgmtsoc_microwatt_dbus_dat_r),
	.wishbone_data_stall ((mgmtsoc_microwatt_dbus_cyc & (~mgmtsoc_microwatt_dbus_ack))),
	.wishbone_insn_ack   (mgmtsoc_microwatt_ibus_ack),
	.wishbone_insn_dat_r (mgmtsoc_microwatt_ibus_dat_r),
	.wishbone_insn_stall ((mgmtsoc_microwatt_ibus_cyc & (~mgmtsoc_microwatt_ibus_ack))),

	// Outputs.
	.dmi_ack             (mgmtsoc_microwatt1),
	.dmi_dout            (mgmtsoc_microwatt0),
	.wishbone_data_adr   (mgmtsoc_microwatt_dbus_adr),
	.wishbone_data_cyc   (mgmtsoc_microwatt_dbus_cyc),
	.wishbone_data_dat_w (mgmtsoc_microwatt_dbus_dat_w),
	.wishbone_data_sel   (mgmtsoc_microwatt_dbus_sel),
	.wishbone_data_stb   (mgmtsoc_microwatt_dbus_stb),
	.wishbone_data_we    (mgmtsoc_microwatt_dbus_we),
	.wishbone_insn_adr   (mgmtsoc_microwatt_ibus_adr),
	.wishbone_insn_cyc   (mgmtsoc_microwatt_ibus_cyc),
	.wishbone_insn_dat_w (mgmtsoc_microwatt_ibus_dat_w),
	.wishbone_insn_sel   (mgmtsoc_microwatt_ibus_sel),
	.wishbone_insn_stb   (mgmtsoc_microwatt_ibus_stb),
	.wishbone_insn_we    (mgmtsoc_microwatt_ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-10-24 15:25:34.
//------------------------------------------------------------------------------
